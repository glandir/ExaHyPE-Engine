// Do not modify any part of this file. It will be overwritten throughout the 
// next pdt run.


#include "ExplicitEulerForHeatEquation/VertexOperations.h"
#include "peano/utils/Loop.h"
#include "peano/grid/Checkpoint.h"


myproject::VertexOperations::VertexOperations() { 
}

 tarch::la::Vector<FOUR_POWER_D,double> myproject::VertexOperations::readAllU(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices) { tarch::la::Vector<FOUR_POWER_D,double> result; dfor4(x) result(xScalar) = vertices[ enumerator(x) ]._vertexData.getU(); enddforx return result; }
 tarch::la::Vector<FOUR_POWER_D,double> myproject::VertexOperations::readAllOldU(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices) { tarch::la::Vector<FOUR_POWER_D,double> result; dfor4(x) result(xScalar) = vertices[ enumerator(x) ]._vertexData.getOldU(); enddforx return result; }



 tarch::la::Vector<TWO_POWER_D,double> myproject::VertexOperations::readU(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices) { tarch::la::Vector<TWO_POWER_D,double> result; dfor2(x) result(xScalar) = vertices[ enumerator(x) ]._vertexData.getU(); enddforx return result; }
 tarch::la::Vector<TWO_POWER_D,double> myproject::VertexOperations::readOldU(const peano::grid::VertexEnumerator& enumerator, const Vertex* const vertices) { tarch::la::Vector<TWO_POWER_D,double> result; dfor2(x) result(xScalar) = vertices[ enumerator(x) ]._vertexData.getOldU(); enddforx return result; }











 double myproject::VertexOperations::readU(const Vertex& vertex) { return vertex._vertexData.getU(); }
 double myproject::VertexOperations::readOldU(const Vertex& vertex) { return vertex._vertexData.getOldU(); }











 void myproject::VertexOperations::writeAllU(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<FOUR_POWER_D,double>& values ) { dfor4(x) vertices[ enumerator(x) ]._vertexData.setU( values(xScalar) ); enddforx }



 void myproject::VertexOperations::writeU(const peano::grid::VertexEnumerator& enumerator, Vertex* const vertices, const tarch::la::Vector<TWO_POWER_D,double>& values ) { dfor2(x) vertices[ enumerator(x) ]._vertexData.setU( values(xScalar) ); enddforx }











 void myproject::VertexOperations::writeU(Vertex& vertex, const double& values ) { vertex._vertexData.setU( values ); }














































































































