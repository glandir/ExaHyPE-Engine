// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================



#include "exahype/solvers/Solver.h"


namespace Euler3d{
  class MyEulerSolver;
}


class Euler3d::MyEulerSolver: public exahype::solvers::Solver {
  public:
    MyEulerSolver(int kernelNumber); 
    virtual int getMinimumTreeDepth() const;
    virtual void spaceTimePredictor(double* lQi, double* lFi, double* lQhi, double* lFhi, double* lQhbnd, double* lFhbnd, const double* const luh, const tarch::la::Vector<DIMENSIONS,double>& dx, const double dt ); 
    virtual void solutionUpdate(double* luh, const double* const lduh, const double dt);
    virtual void volumeIntegral(double* lduh, const double* const lFhi, const tarch::la::Vector<DIMENSIONS,double>& dx);
    virtual void surfaceIntegral(double* lduh, const double* const lFhbnd, const tarch::la::Vector<DIMENSIONS,double>& dx);
    virtual void riemannSolver(double* FL, double* FR, const double* const QL, const double* const QR, const double dt, const int normalNonZeroIndex);
    virtual double stableTimeStepSize(const double* const luh, const tarch::la::Vector<DIMENSIONS,double>& dx );
    virtual void solutionAdjustment(double*  luh, const tarch::la::Vector<DIMENSIONS,double>&   center, const tarch::la::Vector<DIMENSIONS,double>&  dx, double  t, double  dt);
    virtual bool hasToAdjustSolution( const tarch::la::Vector<DIMENSIONS,double>&   center, const tarch::la::Vector<DIMENSIONS,double>&   dx, double   t);
  private:
    static void flux(const double* const Q, double* f, double* g, double * h);
    static void eigenvalues(const double* const Q, const int normalNonZeroIndex, double* lambda);
    static void adjustedSolutionValues(const double* const x, const double J_w, const double t, const double dt, double* Q);
};


