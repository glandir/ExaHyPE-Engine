/**
 * MHD AlfenWave specfile for convergence analysis.
 *
 *@comment@ This file is a TEMPLATE, it has variables denoted
 *@comment@ like "@VARNAME@" and replaced by a script before
 *@comment@ handing over to ExaHyPE. Furthermore, these lines
 *@comment@ starting with "@comment@" are removed from the
 *@comment@ generated spec file. Instead, there will be a
 *@comment@ description about the generated file in the
 *@comment@ following:
 *
 * This convergence test is using ideal Special Relativistic
 * Magnetohydrodynamics using a Fortran kernel, in 2D.
 *
 */
exahype-project  MHDSolver

  peano-kernel-path          = ./Peano
  exahype-path               = ./ExaHyPE
  output-directory           = ./ApplicationExamples/MHD/
  architecture               = noarch

  computational-domain
    dimension                = 2
    /* this is the grid for the MHD AlfenWave test */
    width                    = 1.0, 1.0
    offset                   = 0.0, 0.0
    end-time                 = 6.0
  end computational-domain

  shared-memory
    identifier               = dummy
    cores                    = 30
    properties-file          = sharedmemory.properties
  end shared-memory

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks_per_node:4}
    buffer-size              = 64
    timeout                  = 120
  end distributed-memory

  optimisation
    fuse-algorithmic-steps        = on
    fuse-algorithmic-steps-factor = 0.99
    timestep-batch-factor           = 0.0
    skip-reduction-in-batched-time-steps = on
    disable-amr-if-grid-has-been-stationary-in-previous-iteration = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end optimisation
  
  solver ADER-DG MHDSolver
    variables          = 9
    parameters         = 0
    order              = @ORDER@
    maximum-mesh-size  = @MESHSIZE@
    time-stepping      = global
    kernel             = generic::fluxes::nonlinear
    language           = C
    constants          = {initialdata:alfenwave}

    plot vtk::Legendre::vertices::ascii
      variables= 9
      time     = 0.0
      repeat   = @VTKOUTPUTREPEAT@
      output   = ./conserved
      select   = {}
    end plot
    
    plot vtk::Legendre::vertices::ascii
      variables = 0
      time = 0.0
      repeat = @CONVOUTPUTREPEAT@
      output = ./global-integrals
      select = {}
    end plot

    plot vtk::Legendre::vertices::ascii
      variables = 9
      time      = 0.0
      repeat    = @VTKOUTPUTREPEAT@
      output    = ./primitive
      select = {}
    end plot

    plot vtk::Legendre::vertices::ascii
      variables = 9
      time      = 0.0
      repeat    = @VTKOUTPUTREPEAT@
      output    = ./exact-primitive
      select = {}
    end plot

    plot vtk::Legendre::vertices::ascii
      variables = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./errors-conserved
      select = {}
    end plot

  end solver

end exahype-project
