# This is a makefile for Peano's AdvectionDG0 component
# generated by the Peano Development Tools (PDT) 

# Include files
-include files.mk



# Configure System
# ----------------
# These values are used to assemble the symbols SYSTEM_CFLAGS and SYSTEM_LFLAGS.
INCLUDE_TBB=$(TBB_INC)
#INCLUDE_OMP=$(OMP_INC)
INCLUDE_OMP=-fopenmp
INCLUDE_MPI=$(MPI_INC)


LINK_TBB=$(TBB_SHLIB)
#LINK_OMP=$(OMP_SHLIB)
LINK_OMP=-fopenmp
#LINK_MPI=-lpthread -lrt -lmpich
LINK_MPI=



# Decide on compiler and flags depending on the environment variables [ARCHITECTURE]={Phi, CPU}, [CC]={gcc, Intel} and [MODE]={Debug, Profile, Release}
# -----------------------
ifeq ($(ARCHITECTURE),Phi)
    FC=ifort
    FCOMPILER_CFLAGS=-r8
    LINK_FORTRAN=-lifcore 
		CC=icpc
		ifeq ($(MODE),Debug)
			# Settings for the Intel Compiler (Debug Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DDebug -mmic -DAsserts -O0 -fstrict-aliasing -restrict -std=c++0x
			COMPILER_LFLAGS=-mmic
		else ifeq ($(MODE),Profile)
			# Settings for the GNU Compiler (Profile Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DPerformanceAnalysis -p -pg -fast -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -mmic -std=c++0x
			COMPILER_LFLAGS=-p -pg -mmic
		else ifeq ($(MODE),Asserts)
			# Settings for the GNU Compiler (Profile Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DAsserts -fast -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -mmic -std=c++0x
			COMPILER_LFLAGS=-mmic -lrt
		else
			# Settings for the Intel Compiler (Release Mode)
			# ----------------------------------------------
			COMPILER_CFLAGS=-fast -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -mmic -std=c++0x
			COMPILER_LFLAGS=-mmic -lrt
		endif
else
	ifeq ($(CC),gcc)
    FC=gfortran
    FCOMPILER_CFLAGS=-ffree-line-length-none
    LINK_FORTRAN=-lgfortran
		CC=g++
		ifeq ($(MODE),Debug)
			# Settings for the GNU Compiler (Debug Mode)
			# ------------------------------------------
			COMPILER_CFLAGS=-DDebug -DAsserts -O0 -pedantic -Wall -Wstrict-aliasing -fstrict-aliasing -ggdb -std=c++0x \
											-Drestrict=__restrict__ -D__assume_aligned=__builtin_assume_aligned -pipe
			COMPILER_LFLAGS=
		else ifeq ($(MODE),Asserts)
			# Settings for the GNU Compiler (Profile Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DAsserts -p -pg -O3 -pedantic -Wall -fstrict-aliasing -fno-rtti -fno-exceptions -std=c++0x -march=native -pipe \
											-Drestrict=__restrict__ -D__assume_aligned=__builtin_assume_aligned
			COMPILER_LFLAGS=-p -pg
		else ifeq ($(MODE),Profile)
			# Settings for the GNU Compiler (Profile Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DPerformanceAnalysis -p -pg -O3 -pedantic -Wall -fstrict-aliasing -fno-rtti -fno-exceptions -std=c++0x -march=native -pipe \
																	-Drestrict=__restrict__ -D__assume_aligned=__builtin_assume_aligned 
			COMPILER_LFLAGS=-p -pg

		else
			# Settings for the GNU Compiler (Release Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-O3 -pedantic -pedantic-errors -Wall -fstrict-aliasing -fno-rtti -fno-exceptions -std=c++0x -march=native -pipe \
											-Drestrict=__restrict__ -D__assume_aligned=__builtin_assume_aligned 
			COMPILER_LFLAGS=
		endif
	else
    FC=ifort
    FCOMPILER_CFLAGS=-r8
    LINK_FORTRAN=-lifcore 
		CC=icpc
		ifeq ($(MODE),Debug)
			# Settings for the Intel Compiler (Debug Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DDebug -DAsserts -O0 -fstrict-aliasing -restrict -std=c++0x
			COMPILER_LFLAGS=
		else ifeq ($(MODE),Profile)
			# Settings for the GNU Compiler (Profile Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DPerformanceAnalysis -p -pg -fast -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -xHost -std=c++0x
			COMPILER_LFLAGS=-p -pg
		else ifeq ($(MODE),Asserts)
			# Settings for the GNU Compiler (Profile Mode)
			# --------------------------------------------
			COMPILER_CFLAGS=-DAsserts -fast -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -xHost -std=c++0x
			COMPILER_LFLAGS=
		else
			# Settings for the Intel Compiler (Release Mode)
			# ----------------------------------------------
			COMPILER_CFLAGS=-fast -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -xHost -std=c++0x
			COMPILER_LFLAGS=
		endif
	endif
endif



# Assemble Compiler Flags depending on the environment variable [SHAREDMEM]={OMP, TBB, None}
# -----------------------
ifeq ($(SHAREDMEM),OMP)
	SYSTEM_CFLAGS = $(INCLUDE_OMP) 
	SYSTEM_LFLAGS = $(LINK_OMP) 
	COMPILER_CFLAGS += -DSharedOMP
else ifeq ($(SHAREDMEM),TBB)
	SYSTEM_CFLAGS = $(INCLUDE_TBB)
	SYSTEM_LFLAGS = $(LINK_TBB)
	COMPILER_CFLAGS += -DSharedTBB
else ifeq ($(SHAREDMEM),None)
	SYSTEM_LFLAGS = -lrt 
else
	SYSTEM_CFLAGS = $(INCLUDE_TBB) $(INCLUDE_MPI)
	SYSTEM_LFLAGS = $(LINK_TBB)    $(LINK_MPI)
endif



# Assemble Compiler Flags depending on the environment variable [DISTRIBUTEDMEM]={MPI, None}
# -----------------------
ifeq ($(DISTRIBUTEDMEM),MPI)
	COMPILER_CFLAGS += -DParallel -DMPICH_IGNORE_CXX_SEEK
	ifeq ($(CC),g++)
		CC = mpiCC
	else
		CC = mpiicpc
	endif
endif



#
# Linker Settings
# ---------------
# By default, I use the compiler command. But you might wanna modify it.
LL=$(CC)


OBJECTS=$(SOURCES:.cpp=.o)



all: header doFortran build

buildinfo:
	$(EXAHYPE_PATH)/generate-buildinfo.sh $(PROJECT_PATH)

files.mk:
	touch files.mk
	echo -n SOURCES= > files.mk
	find -H $(PEANO_PATH) -name '*.cpp' | tr '\n' ' ' >> files.mk
	find -H $(TARCH_PATH) -name '*.cpp' | tr '\n' ' ' >> files.mk
	find -H $(MULTISCALELINKEDCELL_PATH) -name '*.cpp' | tr '\n' ' ' >> files.mk
	find -H $(SHAREDMEMORYORACLES_PATH) -name '*.cpp' | tr '\n' ' ' >> files.mk
ifdef USE_OPTIMISED_KERNELS
	find -H $(EXAHYPE_PATH) -name '*.cpp' -not -path $(EXAHYPE_PATH)'/kernels/aderdg/generic/*' | tr '\n' ' ' >> files.mk
else
ifneq (,$(findstring Dim3, $(PROJECT_CFLAGS) )) 
	find -H $(EXAHYPE_PATH) -name '*.cpp' -not -path $(EXAHYPE_PATH)'/kernels/aderdg/generic/2D/*'  | tr '\n' ' ' >> files.mk
else
	find -H $(EXAHYPE_PATH) -name '*.cpp' -not -path $(EXAHYPE_PATH)'/kernels/aderdg/generic/3D/*'  | tr '\n' ' ' >> files.mk
endif
endif
	find -H $(PROJECT_PATH) -name '*.cpp' | tr '\n' ' ' >> files.mk


doFortran:
ifneq (,$(findstring Dim3, $(PROJECT_CFLAGS) ))
	$(FC) $(FCOMPILER_CFLAGS) -c typesDef.f90 
	$(FC) $(FCOMPILER_CFLAGS) -c spaceTimePredictor.f90 
	$(FC) $(FCOMPILER_CFLAGS) -c volumeIntegral.f90
	$(FC) $(FCOMPILER_CFLAGS) -c surfaceIntegral.f90
	$(FC) $(FCOMPILER_CFLAGS) -c riemannSolver.f90
	$(FC) $(FCOMPILER_CFLAGS) -c elementUpdate.f90
endif
 
header:
	@echo ================================
	@echo 
	@echo  www.exahype.eu 
	@echo  
	@echo ================================
	@echo  
	@echo The project has received funding from the European Union\'s 
	@echo Horizon 2020 research and innovation programme under grant 
	@echo agreement No 671698 \(ExaHyPE\). It is based upon the PDE 
	@echo framework Peano \(www.peano-framework.org\).


build: buildinfo files.mk doFortran $(OBJECTS)
ifneq (,$(findstring Dim3, $(PROJECT_CFLAGS) ))
	$(LL) $(OBJECTS) typesDef.o spaceTimePredictor.o volumeIntegral.o surfaceIntegral.o riemannSolver.o elementUpdate.o  $(LINK_FORTRAN) -o $(EXECUTABLE) $(COMPILER_LFLAGS) $(SYSTEM_LFLAGS)
else
	$(LL) $(OBJECTS) -o $(EXECUTABLE) $(COMPILER_LFLAGS) $(SYSTEM_LFLAGS)
endif
	@echo
	@echo build of ExaHyPE successful
	@echo run code with ./$(EXECUTABLE) and pass config file as argument


clean:
	rm -f $(EXECUTABLE)
	rm -f $(OBJECTS)
	rm -f files.mk


$(OBJECTS): %.o : %.cpp
	$(CC) $(PROJECT_CFLAGS) $(COMPILER_CFLAGS) $(SYSTEM_CFLAGS) -I$(PROJECT_PATH)  -I$(PEANO_PATH)/.. -I$(TARCH_PATH)/.. -I$(MULTISCALELINKEDCELL_PATH)/.. -I$(SHAREDMEMORYORACLES_PATH)/.. -I$(EXAHYPE_PATH) -I$(PROJECT_PATH)  -c $< -o $@
