/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

// included in ../../Kernels.h

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstring>

#include "../../../../KernelUtils.h"

namespace kernels {
namespace aderdg {
namespace generic {
namespace c {

template <void PDEEigenvalues(const double* const Q, const int normalNonZero,
                              double* lambda)>
void riemannSolverNonlinear(double* FL, double* FR, const double* const QL,
                            const double* const QR, const double dt,
                            const int normalNonZero,
                            const int numberOfVariables,
                            const int numberOfParameters, const int basisSize) {
  const int order = basisSize - 1;

  // Compute the average states from the left and the right, which we need to
  // compute the numerical dissipation
  double* QavL = new double[numberOfVariables];
  double* QavR = new double[numberOfVariables];
  {
    idx3 idx_QLR(basisSize, basisSize, numberOfVariables);
    std::memset(QavL, 0, numberOfVariables * sizeof(double));
    std::memset(QavR, 0, numberOfVariables * sizeof(double));
    for (int i = 0; i < basisSize; i++) {
      for (int j = 0; j < basisSize; j++) {
        const double weight = kernels::gaussLegendreWeights[order][i] *
                              kernels::gaussLegendreWeights[order][j];

        for (int k = 0; k < numberOfVariables; k++) {
          QavL[k] += weight * QL[idx_QLR(i, j, k)];
          QavR[k] += weight * QR[idx_QLR(i, j, k)];
        }
      }
    }
  }

  double* LL = new double[numberOfVariables];
  double* LR = new double[numberOfVariables];
  PDEEigenvalues(QavL, normalNonZero, LL);
  PDEEigenvalues(QavR, normalNonZero, LR);

  // Here, we implement a very simple Rusanov scheme with scalar dissipation
  // (smax*Id).
  // We can change this into a more sophisticated Osher or HLLEM Riemann solver
  // whenever needed!
  std::transform(LL, LL + numberOfVariables, LL,
                 [](double d) { return std::abs(d); });
  std::transform(LR, LR + numberOfVariables, LR,
                 [](double d) { return std::abs(d); });
  const double* smax_L = std::max_element(LL, LL + numberOfVariables);
  const double* smax_R = std::max_element(LR, LR + numberOfVariables);
  const double smax = std::max(*smax_L, *smax_R);

  // We now compute the numerical flux. Note that the scheme is at the moment
  // written in CONSERVATION FORM => no fluctuations, but real fluxes. Later,
  // this will be converted into the left and right fluctuations.

  {
    idx3 idx_FQLR(basisSize, basisSize, numberOfVariables);
    for (int i = 0; i < basisSize; i++) {
      for (int j = 0; j < basisSize; j++) {
        // Avoid diffusion of parameters
        for (int k = 0; k < numberOfVariables - numberOfParameters; k++) {
          FL[idx_FQLR(i, j, k)] =
              0.5 * (FR[idx_FQLR(i, j, k)] + FL[idx_FQLR(i, j, k)]) -
              0.5 * smax * (QR[idx_FQLR(i, j, k)] - QL[idx_FQLR(i, j, k)]);
          FR[idx_FQLR(i, j, k)] = FL[idx_FQLR(i, j, k)];
        }
      }
    }
  }

  delete[] QavL;
  delete[] QavR;
  delete[] LL;
  delete[] LR;
}

}  // namespace c
}  // namespace generic
}  // namespace aderdg
}  // namespace kernels
