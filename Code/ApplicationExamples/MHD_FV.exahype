/**

 Ideal Special Relativistic Magnetohydrodynamics.
 A custom ExaHype Kernel written in Fortran,
 currently only 3D,
 provided by Olindo and modified by Sven.

 Started 17. June, 2016.
 Based on srhd3dfortran.exahype

 */
exahype-project  MHDSolver

  peano-kernel-path          = ./Peano
  exahype-path               = ./ExaHyPE
  output-directory           = ./ApplicationExamples/MHD_FV/
  architecture               = noarch

  computational-domain
    dimension                = 2
    width                    = 1.0, 1.0
    offset                   = 0.0, 0.0
    end-time                 = 3.0
  end computational-domain



  shared-memory
    identifier               = dummy
    cores                    = 30
    properties-file          = sharedmemory.properties
  end shared-memory

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks_per_node:4}
    buffer-size              = 64
    timeout                  = 120
  end distributed-memory

  optimisation
    fuse-algorithmic-steps        = on
    fuse-algorithmic-steps-factor = 0.99
    timestep-batch-factor           = 0.0
    skip-reduction-in-batched-time-steps = on
    disable-amr-if-grid-has-been-stationary-in-previous-iteration = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end optimisation
  
  solver Finite-Volumes MHDSolver
    /* for field (=variables) descriptions, see code */
    variables          = 9
    parameters         = 0
    patch-size         = 14
    /* 27 grid points: 0.2327 */
    maximum-mesh-size  = 0.24
    time-stepping      = global
    kernel             = generic::Godunov
    /* we are using the new Fortran interface */
    language           = C
    /* choose your iniitial data here. Caveats on whitespace */
    constants = {initialdata:orsagtang}

    /* do not trust vtk::Cartesian::cells as it contains bugs */
    plot vtk::Cartesian::cells::ascii
      variables= 9
      time     = 0.0
      repeat   = 0.05
      output   = ./conserved
      select   = {}
    end plot
    
    plot vtk::Cartesian::cells::ascii
      variables = 0
      time = 0.0
      repeat = 0.05
      output = ./global-integrals
      select = {}
    end plot

    plot vtk::Cartesian::cells::ascii
      variables = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./primitive
      select = {}
    end plot

    plot vtk::Cartesian::cells::ascii
      variables = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./exact-primitive
      select = {}
    end plot

    plot vtk::Cartesian::cells::ascii
      variables = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./errors-conserved
      select = {}
    end plot

    plot vtk::Cartesian::cells::ascii
      variables = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./relative-errors-conserved
      select = {}
    end plot
  end solver

end exahype-project
