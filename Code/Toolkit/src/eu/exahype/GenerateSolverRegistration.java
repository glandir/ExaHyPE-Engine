package eu.exahype;

import eu.exahype.analysis.DepthFirstAdapter;
import eu.exahype.node.AProject;
import eu.exahype.node.PSolver;

public class GenerateSolverRegistration  extends DepthFirstAdapter {
  public Boolean valid = true;

  private java.io.BufferedWriter    _writer; 
  private java.io.StringWriter      _methodBodyWriter; 

  private DirectoryAndPathChecker   _directoryAndPathChecker;
  
  private int                       _kernelNumber;

  private String                    _projectName;

  public GenerateSolverRegistration(DirectoryAndPathChecker  directoryAndPathChecker) {
	_directoryAndPathChecker = directoryAndPathChecker;
	_kernelNumber            = 0;
  }

  @Override
  public void inAProject(AProject node) {
    _projectName = node.getName().toString().trim();
	  
	try {
      java.io.File logFile = new java.io.File(_directoryAndPathChecker.outputDirectory.getAbsolutePath() + "/KernelCalls.cpp");
      
      _writer = new java.io.BufferedWriter(new java.io.FileWriter(logFile));
      _methodBodyWriter = new java.io.StringWriter();
      
      _writer.write("// This file is generated by the ExaHyPE toolkit.\n");
      _writer.write("// Please do not modify - it will be overwritten by the next\n");
      _writer.write("// ExaHyPE toolkit call.\n");
      _writer.write("// \n");
      _writer.write("// ========================\n");
      _writer.write("//   www.exahype.eu\n");
      _writer.write("// ========================\n\n\n");
      
      _writer.write("#include \"kernels/KernelCalls.h\"\n");
      _writer.write("#include \"exahype/solvers/Plotter.h\"\n");
      _writer.write("#include \"exahype/plotters/Solver.h\"\n\n\n");
      
      _methodBodyWriter.write("void kernels::initSolvers() {\n");
      if (node.getSolver().size()==0) { 
        System.out.println( "no solvers specified - create empty kernel calls ... ok" );      
      }
	} 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
      valid = false;
	}
  }

  @Override
  public void inAAderdgSolver(eu.exahype.node.AAderdgSolver node) {
	try {
      String solverName = node.getName().toString().trim();

      _writer.write( "#include \"" + solverName + ".h\"\n" );		

      _methodBodyWriter.write("  exahype::solvers::RegisteredSolvers.push_back( new " + _projectName + "::" + solverName + "(" + _kernelNumber + ") ); \n");
      
      _kernelNumber++;
      
      System.out.println( "added creation of solver " + solverName + " ... ok" );      
	} 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
      valid = false;
	}
  };
  
  @Override
  public void inAPlotSolution(eu.exahype.node.APlotSolution node) {
	try {
      _methodBodyWriter.write("  exahype::plotters::RegisteredPlotters.push_back( new exahype::solvers::Plotter(" + (_kernelNumber-1) + ",\"" + node.getPlotterType().toString().trim() + "\"," + node.getTime().toString().trim() + "," + node.getRepeat().toString().trim() + ",\"" + node.getFilename().toString().trim() + "\")); \n");
      System.out.println( "added plotter ... ok" );      
	} 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
      valid = false;
	}
  };

  @Override
  public void outAProject(AProject node) {
	try {
      _methodBodyWriter.write("}\n");
      
      _writer.write("\n");
      _writer.write("\n");
      _writer.write("\n");
      _writer.write(_methodBodyWriter.toString());
      _writer.write("\n");

      System.out.println( "configured all solver solvers ... ok" );      
 
      _writer.write("\n\n");
      _writer.close();
	} 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
      valid = false;
	}
  }
}
