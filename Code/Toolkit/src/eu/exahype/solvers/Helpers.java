package eu.exahype.solvers;

import java.io.IOException;

public class Helpers {
  public static void writeMinimalADERDGSolverHeader(
    String                 solverName,
    java.io.BufferedWriter writer, String projectName
  ) throws IOException {
    writeHeaderCopyright(writer);
    writeHeaderIncludesAndDefines(writer,solverName,projectName);
    writeHeaderMinimalADERDGClassSignature(writer,solverName,projectName);
  }

  /**
   * Creates all the public operations that are mandatory for any solver.
   */
  private static void writeHeaderMinimalADERDGClassSignature( java.io.BufferedWriter writer, String solverName, String projectName ) throws IOException {
      writer.write("class " + projectName + "::" + solverName + ": public exahype::solvers::Solver {\n");
      writer.write("  public:\n");
      writer.write("    " + solverName + "(int kernelNumber); \n");
      writer.write("    virtual int getMinimumTreeDepth() const;\n");

      writer.write("    virtual void spaceTimePredictor(double* lQi, double* lFi, double* lQhi, double* lFhi, double* lQhbnd, double* lFhbnd, const double* const luh, const tarch::la::Vector<DIMENSIONS,double>& dx, const double dt ); \n");
      writer.write("    virtual void solutionUpdate(double* luh, const double* const lduh, const double dt);\n");
      writer.write("    virtual void volumeIntegral(double* lduh, const double* const lFhi, const tarch::la::Vector<DIMENSIONS,double>& dx);\n" );
      writer.write("    virtual void surfaceIntegral(double* lduh, const double* const lFhbnd, const tarch::la::Vector<DIMENSIONS,double>& dx);\n" );
      writer.write("    virtual void riemannSolver(double* FL, double* FR, const double* const QL, const double* const QR, const double dt, const int normalNonZeroIndex);\n" );
      writer.write("    virtual double stableTimeStepSize(const double* const luh, const tarch::la::Vector<DIMENSIONS,double>& dx );\n" );

      writer.write("    virtual void solutionAdjustment(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,double dt);\n" );
      writer.write("    virtual bool hasToAdjustSolution(const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t);\n" );
  }


  /**
   * Write header with ExaHyPE copyright. Should be inserted for any solver's 
   * header.
   */
  private static void writeHeaderCopyright( java.io.BufferedWriter writer ) throws IOException {
      writer.write("// This file is generated by the ExaHyPE toolkit.\n");
      writer.write("// Please do not modify - it will be overwritten by the next\n");
      writer.write("// ExaHyPE toolkit call.\n");
      writer.write("// \n");
      writer.write("// ========================\n");
      writer.write("//   www.exahype.eu\n");
      writer.write("// ========================\n");
  }

  /**
   * Adds all the default includes of any solver as well as the solver define. 
   * Is used by all solvers.
   */
  private static void writeHeaderIncludesAndDefines( java.io.BufferedWriter writer, String solverName, String projectName ) throws IOException {
      writer.write("\n\n\n");
      writer.write("#include \"exahype/solvers/Solver.h\"");
      writer.write("\n\n\n");

      writer.write("namespace " + projectName + "{\n");
      writer.write("  class " + solverName + ";\n");
      writer.write("}\n\n\n");
  }
  
  

  public static void writeMinimalADERDGSolverUserImplementation(
          String                 solverName,
          java.io.BufferedWriter writer,
          String                 projectName,
          int                    numberOfVariables,
          int                    order
          ) throws IOException {
      writer.write("#include \"" + solverName + ".h\"\n");
      writer.write("\n\n\n");
      writer.write(projectName + "::" + solverName + "::" + solverName + "( int kernelNumber):\n");
      writer.write("  exahype::solvers::Solver(\"" + solverName + "\",exahype::solvers::Solver::ADER_DG,kernelNumber," + numberOfVariables + "," + order + "+1,exahype::solvers::Solver::GlobalTimeStepping) {\n");
      writer.write("  // @todo Please implement/augment if required\n");
      writer.write("}\n");
      writer.write("\n\n\n");
      writer.write("int " + projectName + "::" + solverName + "::getMinimumTreeDepth() const {\n");
      writer.write("  // @todo Please implement\n");
      writer.write("  return 3;\n");
      writer.write("}\n");
      writer.write("\n\n\n");
      writer.write("bool " + projectName + "::" + solverName + "::hasToAdjustSolution(const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t) {\n");
      writer.write("  // @todo Please implement/augment if required\n");
      writer.write("  return false;\n");
      writer.write("}\n");
      writer.write("\n\n\n");
  }
}
