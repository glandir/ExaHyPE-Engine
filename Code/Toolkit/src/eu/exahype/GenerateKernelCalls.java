package eu.exahype;

import eu.exahype.analysis.DepthFirstAdapter;
import eu.exahype.node.AProject;

public class GenerateKernelCalls  extends DepthFirstAdapter {
  public Boolean valid = true;

  private java.io.BufferedWriter    _writer; 

  private DirectoryAndPathChecker   _directoryAndPathChecker;
  
  public GenerateKernelCalls(DirectoryAndPathChecker  directoryAndPathChecker) {
	_directoryAndPathChecker = directoryAndPathChecker;
  }

  public void inAProject(AProject node) {
	try {
      java.io.File logFile = new java.io.File(_directoryAndPathChecker.outputDirectory.getAbsolutePath() + "/KernelCalls.cpp");
      
      _writer = new java.io.BufferedWriter(new java.io.FileWriter(logFile));
      _writer.write("// This file is generated by the ExaHyPE toolkit.\n");
      _writer.write("// Please do not modify - it will be overwritten by the next\n");
      _writer.write("// ExaHyPE toolkit call.\n");
      _writer.write("// \n");
      _writer.write("// ========================\n");
      _writer.write("//   www.exahype.eu\n");
      _writer.write("// ========================\n\n\n");
      
      if (node.getSolver().size()==0) { 
        _writer.write("void initSolvers() {\n");
        _writer.write("}\n");
        _writer.write("\n");
        System.out.println( "no solvers specified - create empty kernel calls ... ok" );      

        _writer.write("int getMinimumTreeDepth() {\n");
        _writer.write("  return 4;\n");
        _writer.write("}\n");
        System.out.println("default spacetree depth set to 4 ... ok" );      
      }
      else {
    	  // @todo I need to know all the SolverDescriptions of this very project
    	  // loop in allen Funktionen ueber diese, bevor sie in initSolvers() aufgesetzt worden sind
        _writer.write("#error should not work yet");
      }
	} 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
      valid = false;
	}
  }


  public void outAProject(AProject node) {
	try {
      _writer.close();
	} 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
      valid = false;
	}
  }
}
