package eu.exahype;

import eu.exahype.analysis.DepthFirstAdapter;
import eu.exahype.node.AAderdgSolver;
import eu.exahype.node.AProject;

public class CreateSolverClasses extends DepthFirstAdapter {

  public Boolean valid = true;

  private DirectoryAndPathChecker   _directoryAndPathChecker;
  
  private String                    _projectName;

  public CreateSolverClasses(DirectoryAndPathChecker  directoryAndPathChecker) {
	_directoryAndPathChecker = directoryAndPathChecker;
  }

  @Override
  public void inAProject(AProject node) {
	_projectName = node.getName().toString().trim();
	
    if (node.getSolver().size()==0) { 
      System.out.println( "there are no solvers in the specification file ... nothing to be done" );      
    }
  }
  
  
  private void writeHeader(String solverName) {
	try {
	  java.io.BufferedWriter headerWriter = new java.io.BufferedWriter(new java.io.FileWriter(
		new java.io.File(_directoryAndPathChecker.outputDirectory.getAbsolutePath() + "/" + solverName + ".h")
	  ));

	  headerWriter.write("// This file is generated by the ExaHyPE toolkit.\n");
	  headerWriter.write("// Please do not modify - it will be overwritten by the next\n");
	  headerWriter.write("// ExaHyPE toolkit call.\n");
	  headerWriter.write("// \n");
	  headerWriter.write("// ========================\n");
	  headerWriter.write("//   www.exahype.eu\n");
	  headerWriter.write("// ========================\n");

	  headerWriter.write("\n\n\n");
	  headerWriter.write("#include \"exahype/solvers/Solver.h\"");
      headerWriter.write("\n\n\n");
	  
	  headerWriter.write("namespace " + _projectName + "{\n");
	  headerWriter.write("  class " + solverName + ";\n");
	  headerWriter.write("}\n\n\n");
	  
	  headerWriter.write("class " + _projectName + "::" + solverName + ": public exahype::solvers::Solver {\n");
	  headerWriter.write("  public:\n");
	  headerWriter.write("    " + solverName + "(int kernelNumber); \n");
	  headerWriter.write("    virtual int getMinimumTreeDepth() const;\n");
	  headerWriter.write("};\n\n\n");

	  
	  headerWriter.close();

      System.out.println( "create header of solver " + solverName + " ... ok" );      
    } 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
	  valid = false;
	}
  }
  
  
  @Override
  public void inAAderdgSolver(AAderdgSolver node) {
	String solverName = node.getName().toString().trim();
	writeHeader(solverName);

	try {
	  java.io.BufferedWriter cppWriter = new java.io.BufferedWriter(new java.io.FileWriter(
		new java.io.File(_directoryAndPathChecker.outputDirectory.getAbsolutePath() + "/" + solverName + ".cpp")
	  ));
	  
      cppWriter.write("#include \"" + solverName + ".h\"\n");

      cppWriter.write("\n\n\n");
      cppWriter.write(_projectName + "::" + solverName + "::" + solverName + "( int kernelNumber):\n");
      cppWriter.write("  exahype::solvers::Solver(\"" + solverName + "\",kernelNumber) {\n");
      cppWriter.write("  // @todo Please implement/augment if required\n");
      cppWriter.write("}\n");

      cppWriter.write("\n\n\n");
      cppWriter.write("int " + _projectName + "::" + solverName + "::getMinimumTreeDepth() const {\n");
      cppWriter.write("  // @todo Please implement\n");
      cppWriter.write("  return 3;\n");
      cppWriter.write("}\n");

      cppWriter.close();
      System.out.println( "create implementation template of solver " + solverName + " ... please implement dummy operations in cpp file" );      
    } 
	catch (Exception exc) {
      System.err.println( "ERROR: " + exc.toString() );
	  valid = false;
	}
  }
}
