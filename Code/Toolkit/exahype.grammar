//
// This file is part of the ExaHyPE project.
//
// (C) http://exahype.eu
//
// The project has received funding from the European Unionâ€™s Horizon // 2020 research and innovation programme under grant agreement
// No 671698. For copyrights and licensing, please consult the webpage.
//
Package eu.exahype;

Helpers
    all                 =   [ 0 .. 127 ];
    dot                 =   '.';
    digit               =   [ '0' .. '9' ];
    nondigit            =   [ '_' + [ [ 'a' .. 'z' ] + [ 'A' .. 'Z' ] ] ];
    nonzero_digit       =   [ '1' .. '9' ];
    not_star            =   [ all - '*' ];
    not_star_not_slash  =   [ not_star - '/' ];
    
    filename_element =  digit | nondigit | '-' | '/' | dot;

    cr                  =   13;   
    lf                  =   10;
    tab                 =   9;  
    line_terminator     = lf | cr | cr lf; 
    not_line_terminator = [[all - cr] - lf];
    
    
Tokens 
  token_end                   = 'end';

  token_project                   = 'exahype-project';
  token_shared_memory             = 'shared-memory';

  token_peano_path                = 'peano-path';
  token_tarch_path                = 'tarch-path';
  token_exahype_path              = 'exahype-path';
  token_multiscalelinkedcell_path = 'multiscalelinkedcell-path';
  token_output_directory          = 'output-directory';
  token_dimensions                = 'dimensions';
  
  token_cores                     = 'cores';
  token_properties_file           = 'properties-file';
  token_autotuning                = 'autotuning';
  
  token_on_off                    = 'on' | 'off';
  
  token_equals                = '=';
    
  blank                       = ( cr | lf | tab | ' ' ) +;
  identifier                  = nondigit ( digit | nondigit ) *;

  int_number                  = digit+;
  float_number                = (digit+ | digit+ '.' digit+);

  filename                    = '/' ? (filename_element + '/') * filename_element +;
  
  traditional_comment         = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
  documentation_comment       = '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';
  end_of_line_comment         = '//' not_line_terminator * line_terminator;


Ignored Tokens
  
  traditional_comment,
  documentation_comment,
  end_of_line_comment,
  blank;



Productions
  
  project {->project} = 
    {without_shared_mem}
      [begin_token]:token_project [name]:identifier 
        token_peano_path                 [peano_path_equals]:token_equals                       [peano_path]:filename  
        token_tarch_path                 [tarch_path_equals]:token_equals                       [tarch_path]:filename  
        token_multiscalelinkedcell_path  [multiscalelinkedcell_path_equals]:token_equals        [multiscalelinkedcell_path]:filename  
        token_exahype_path               [exahype_path_equals]:token_equals                     [exahype_path]:filename
        token_output_directory           [output_directory_equals]:token_equals                 [output_directory]:filename
        token_dimensions                 [dimensions_equals]:token_equals                       [dimensions]:int_number
      token_end [end_token]:token_project
        { -> New project( name, peano_path, tarch_path, multiscalelinkedcell_path, exahype_path, output_directory, dimensions, [] ) }
    |
    {with_shared_mem}
      [begin_token]:token_project [name]:identifier 
        token_peano_path                 [peano_path_equals]:token_equals                       [peano_path]:filename  
        token_tarch_path                 [tarch_path_equals]:token_equals                       [tarch_path]:filename  
        token_multiscalelinkedcell_path  [multiscalelinkedcell_path_equals]:token_equals        [multiscalelinkedcell_path]:filename  
        token_exahype_path               [exahype_path_equals]:token_equals                     [exahype_path]:filename
        token_output_directory           [output_directory_equals]:token_equals                 [output_directory]:filename
        token_dimensions                 [dimensions_equals]:token_equals                       [dimensions]:int_number
        shared_memory
      token_end [end_token]:token_project
        { -> New project( name, peano_path, tarch_path, multiscalelinkedcell_path, exahype_path, output_directory, dimensions, [shared_memory.shared_memory] ) }
        ;

  shared_memory {->shared_memory} =
    [begin_token]:token_shared_memory
      token_cores [cores_equals]:token_equals [cores]:int_number token_properties_file [properties_equals]:token_equals [properties_file]:filename token_autotuning [autotuning_equals]:token_equals [autotuning]:token_on_off
    token_end [end_token]:token_shared_memory
      { -> New shared_memory( cores,properties_file,autotuning ) };




Abstract Syntax Tree
   project = 
     [name]:identifier [peano_path]:filename [tarch_path]:filename [multiscalelinkedcell_path]:filename [exahype_path]:filename [output_directory]:filename [dimensions]:int_number
     shared_memory*    // grammar ensures that there is at most one
     
     ;
   
   shared_memory = 
     [cores]:int_number [properties_file]:filename [autotuning]:token_on_off;
   