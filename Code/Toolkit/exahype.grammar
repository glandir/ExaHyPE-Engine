//
// This file is part of the ExaHyPE project.
//
// (C) http://exahype.eu
//
// The project has received funding from the European Unionâ€™s Horizon // 2020 research and innovation programme under grant agreement
// No 671698. For copyrights and licensing, please consult the webpage.
//
Package eu.exahype;

Helpers
    all                 =   [ 0 .. 127 ];
    dot                 =   '.';
    digit               =   [ '0' .. '9' ];
    nondigit            =   [ '_' + [ [ 'a' .. 'z' ] + [ 'A' .. 'Z' ] ] ];
    nonzero_digit       =   [ '1' .. '9' ];
    not_star            =   [ all - '*' ];
    not_star_not_slash  =   [ not_star - '/' ];
    
    filename_element =  digit | nondigit | '-' | '/' | dot;

    cr                  =   13;   
    lf                  =   10;
    tab                 =   9;  
    line_terminator     = lf | cr | cr lf; 
    not_line_terminator = [[all - cr] - lf];
    
    
Tokens 
  token_end                   = 'end';

  token_project                   = 'exahype-project';

  token_peano_path                = 'peano-path';
  token_tarch_path                = 'tarch-path';
  token_exahype_path              = 'exahype-path';
  token_multiscalelinkedcell_path = 'multiscalelinkedcell-path';
  token_output_directory          = 'output-directory';


  token_computational_domain      = 'computational-domain';
  token_dimension                 = 'dimension';
  token_width                     = 'width';
  token_offset                    = 'offset';
  token_end_time                  = 'end-time';

  token_solver                    = 'solver';
  token_aderdg                    = 'ADER-DG';
  token_variables                 = 'variables';
  token_order                     = 'order';
  token_kernel                    = 'kernel';

  token_plot                      = 'plot';
  token_variable                  = 'variable';
  token_time                      = 'time';
  token_repeat                    = 'repeat';
  token_filename                  = 'filename';
  
  token_shared_memory             = 'shared-memory';
  token_cores                     = 'cores';
  token_properties_file           = 'properties-file';
  token_identifier                = 'identifier';

  token_optimisation              = 'optimisation';
  token_fuse_algorithm_steps      = 'fuse-algorithmic-steps';

  
  token_on_off                    = 'on' | 'off';
  
  token_equals                = '=';
  token_comma                 = ',';
    
  blank                       = ( cr | lf | tab | ' ' ) +;
  identifier                  = nondigit ( digit | nondigit ) *;

  int_number                  = digit+;
  float_number                = (digit+ | digit+ '.' digit+);

  filename                    = '/' ? (filename_element + '/') * filename_element +;
  
  traditional_comment         = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
  documentation_comment       = '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';


Ignored Tokens
  
  traditional_comment,
  documentation_comment,
  blank;



Productions
  
  project {->project} = 
      [begin_token]:token_project [name]:identifier 
        paths
        computational_domain
        plot_grid_list?
        solver_list?
        shared_memory?
        optimisation?
      token_end [end_token]:token_project
        { -> New project( name, paths.paths, computational_domain.computational_domain, [plot_grid_list.plot_grid], [solver_list.solver], optimisation.optimisation, shared_memory.shared_memory ) }
    ;    

  paths {->paths} =
        token_peano_path                 [peano_path_equals]:token_equals                       [peano_path]:filename  
        token_tarch_path                 [tarch_path_equals]:token_equals                       [tarch_path]:filename  
        token_multiscalelinkedcell_path  [multiscalelinkedcell_path_equals]:token_equals        [multiscalelinkedcell_path]:filename  
        token_exahype_path               [exahype_path_equals]:token_equals                     [exahype_path]:filename
        token_output_directory           [output_directory_equals]:token_equals                 [output_directory]:filename
     { -> New paths(peano_path, tarch_path, multiscalelinkedcell_path, exahype_path, output_directory) }
   ;
    
  shared_memory {->shared_memory} =
    [begin_token]:token_shared_memory
      token_identifier [identifier_equals]:token_equals [identifier]:identifier
      token_cores [cores_equals]:token_equals [cores]:int_number 
      token_properties_file [properties_equals]:token_equals [properties_file]:filename
    token_end [end_token]:token_shared_memory
      { -> New shared_memory( cores,properties_file,identifier ) };

  computational_domain {->computational_domain} = 
     {two_dimensional}
      [begin_token]:token_computational_domain
       token_dimension  [dimension_equals]:token_equals    [dimension]:int_number
       token_width      [width_equals]:token_equals        [width]:float_number
       token_offset     [offset_equals]:token_equals       [offset_x]:float_number [comma_xy]:token_comma [offset_y]:float_number
       token_end_time   [end_time_equals]:token_equals     [end_time]:float_number
      token_end [end_token]:token_computational_domain
       { -> New computational_domain.two_dimensional( dimension, width,offset_x,offset_y,end_time ) } |
     {three_dimensional}
      [begin_token]:token_computational_domain
       token_dimension  [dimension_equals]:token_equals    [dimension]:int_number
       token_width      [width_equals]:token_equals        [width]:float_number
       token_offset     [offset_equals]:token_equals       [offset_x]:float_number [comma_xy]:token_comma [offset_y]:float_number [comma_yz]:token_comma [offset_z]:float_number 
       token_end_time   [end_time_equals]:token_equals     [end_time]:float_number
      token_end [end_token]:token_computational_domain
       { -> New computational_domain.three_dimensional( dimension, width,offset_x,offset_y,offset_z,end_time ) };

   optimisation {->optimisation} = 
      [begin_token]:token_optimisation  
        token_fuse_algorithm_steps [token_fuse_algorithm_steps_equals]:token_equals [fuse_algorithm_steps]:token_on_off
      token_end [end_token]:token_optimisation
        { -> New optimisation(fuse_algorithm_steps) }
      ;

   plot_grid_list {->plot_grid*} = 
     [begin_token]:token_plot [plotter_type]:identifier 
       token_time      [time_equals]:token_equals     [time]:float_number 
       token_repeat    [repeat_equals]:token_equals   [repeat]:token_on_off 
       token_filename  [filename_equals]:token_equals filename
     token_end [end_token]:token_plot
     plot_grid_list?
       { -> [New plot_grid(plotter_type,time,repeat,filename),plot_grid_list.plot_grid] }
     ;

   plot_solution_list {->plot_solution*} = 
     [begin_token]:token_plot [plotter_type]:identifier 
       token_variable  [variable_equals]:token_equals [variable]:int_number 
       token_time      [time_equals]:token_equals     [time]:float_number 
       token_repeat    [repeat_equals]:token_equals   [repeat]:token_on_off 
       token_filename  [filename_equals]:token_equals filename
     token_end [end_token]:token_plot
     plot_solution_list?
       { -> [New plot_solution(plotter_type,variable,time,repeat,filename),plot_solution_list.plot_solution] }
     ;
     
   solver_list {->solver*} = 
     {aderdg} 
       [begin_token]:token_solver token_aderdg [name]:identifier
         token_variables [variables_equals]:token_equals [variables]:int_number
         token_order     [order_equals]:token_equals     [order]:int_number
         token_kernel    [kernel_equals]:token_equals    [kernel]:identifier
         plot_solution_list?
       token_end [end_token]:token_solver
       solver_list?
       { -> [New solver.aderdg(name,variables,order,kernel,[plot_solution_list.plot_solution]),solver_list.solver] }
     ;


Abstract Syntax Tree
   project = 
     [name]:identifier 
     paths
     computational_domain
     plot_grid*
     solver*
     optimisation?
     shared_memory?    
     ;
  
   paths = 
     [peano_path]:filename [tarch_path]:filename [multiscalelinkedcell_path]:filename [exahype_path]:filename [output_directory]:filename;
    
   shared_memory = 
     [cores]:int_number [properties_file]:filename [identifier]:identifier;

   computational_domain = 
     {two_dimensional}   [dimension]:int_number [width]:float_number [offset_x]:float_number [offset_y]:float_number [end_time]:float_number |
     {three_dimensional} [dimension]:int_number [width]:float_number [offset_x]:float_number [offset_y]:float_number [offset_z]:float_number [end_time]:float_number
     ;

   optimisation = 
     [fuse_algorithm_steps]:token_on_off;
    
   solver = 
     {aderdg} [name]:identifier [variables]:int_number [order]:int_number [kernel]:identifier plot_solution*
     ;
     
   plot_grid = 
     [plotter_type]:identifier [time]:float_number [repeat]:token_on_off filename;

   plot_solution = 
     [plotter_type]:identifier [variable]:int_number [time]:float_number [repeat]:token_on_off filename;
     