//
// This file is part of the ExaHyPE project.
//
// (C) http://exahype.eu
//
// The project has received funding from the European Unionâ€™s Horizon // 2020 research and innovation programme under grant agreement
// No 671698. For copyrights and licensing, please consult the webpage.
//
Package eu.exahype;

Helpers
    all                  =   [ 0 .. 127 ];
    dot                  =   '.';
    digit                =   [ '0' .. '9' ];
    nondigit             =   [ '_' + [ [ 'a' .. 'z' ] + [ 'A' .. 'Z' ] ] ];
    nonzero_digit        =   [ '1' .. '9' ];
    not_star             =   [ all - '*' ];
    not_star_not_slash   =   [ not_star - '/' ];

    filename_element     =  digit | nondigit | '-' | '/' | dot;

    identifier           = nondigit ( digit | nondigit ) *;

    cr                   =   13;
    lf                   =   10;
    tab                  =   9;
    line_terminator      = lf | cr | cr lf;
    not_line_terminator  = [[all - cr] - lf];

 
    digit_sequence          =   digit +;
    fractional_constant     =   digit_sequence ? '.' digit_sequence | digit_sequence '.';
    sign                    =   '+' | '-';
    exponent_part           =   ( 'e' | 'E' ) sign ? digit_sequence;


Tokens
  token_end                         = 'end';

  token_project                     = 'exahype-project';

  token_peano_kernel_path           = 'peano-kernel-path';
  token_peano_toolbox_path          = 'peano-toolbox-path';
  token_exahype_path                = 'exahype-path';
  token_libxsmm_path                = 'libxsmm-path';
  token_output_directory            = 'output-directory';
  token_architecture                = 'architecture';


  token_computational_domain        = 'computational-domain';
  token_dimension                   = 'dimension';
  token_width                       = 'width';
  token_offset                      = 'offset';
  token_maximum_mesh_size           = 'maximum-mesh-size';
  token_time_stepping               = 'time-stepping';
  token_end_time                    = 'end-time';

  token_solver                      = 'solver';
  token_aderdg                      = 'ADER-DG';
  token_finite_volumes              = 'Finite-Volumes';
  token_variables                   = 'variables';
  token_parameters                  = 'parameters';
  token_constants                   = 'constants';
  token_order                       = 'order';
  token_patch_size                  = 'patch-size';
  token_kernel                      = 'kernel';
  token_language                    = 'language';

  token_plot                        = 'plot';
  token_variable                    = 'variable';
  token_time                        = 'time';
  token_repeat                      = 'repeat';
  token_output                      = 'output';
  token_select                      = 'select';
  
  token_couple_solvers              = 'couple-solvers';

  token_shared_memory               = 'shared-memory';
  token_cores                       = 'cores';
  token_properties_file             = 'properties-file';
  token_identifier                  = 'identifier';

  token_distributed_memory          = 'distributed-memory';
  token_configure                   = 'configure';
  token_buffer_size                 = 'buffer-size';
  token_timeout                     = 'timeout';

  token_optimisation                = 'optimisation';
  token_fuse_algorithm_steps        = 'fuse-algorithmic-steps';
  token_fuse_algorithm_steps_factor = 'fuse-algorithmic-steps-factor';
  token_batch_timesteps             = 'timestep-batch-factor';
  token_skip_reduction              = 'skip-reduction-in-batched-time-steps';

  token_profiling                   = 'profiling';
  token_profiler                    = 'profiler';
  token_metrics                     = 'metrics';
  token_profiling_output            = 'profiling-output';
  token_likwid_inc                  = 'likwid_inc';
  token_likwid_lib                  = 'likwid_lib';
  token_ipcm_inc                    = 'ipcm_inc';
  token_ipcm_lib                    = 'ipcm_lib';

  token_on_off                      = 'on' | 'off';

  token_equals                      = '=';
  token_comma                       = ',';

  blank                             = ( cr | lf | tab | ' ' ) +;
  identifier                        = identifier;
  typename                          = nondigit ( digit | nondigit | '::' ) *;

  parameter_list                    = '{'
                                        (  (identifier ( ':' ( '-'? digit+ ('.' digit+)? ('e' '-'? digit+)? | identifier ) )? )
                                      (','
                                           (identifier ( ':' ( '-'? digit+ ('.' digit+)? ('e' '-'? digit+)? | identifier ) )? )
                                      )*)?
                                      '}';

  int_number                        = digit+;
  float_number                      = (digit+ | digit+ '.' digit+);

  filename                          = '/' ? (filename_element + '/') * filename_element +;

  traditional_comment               = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
  documentation_comment             = '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';


Ignored Tokens

  traditional_comment,
  documentation_comment,
  blank;



Productions

  project {->project} =
      [begin_token]:token_project [name]:identifier
        paths
        token_architecture token_equals [architecture]:identifier
        computational_domain
        shared_memory?
        distributed_memory?
        optimisation?
        profiling?
        solver_list?
        couple_solvers?
      token_end [end_token]:token_project
        { -> New project( name, paths.paths, architecture, computational_domain.computational_domain, shared_memory.shared_memory, distributed_memory.distributed_memory, optimisation.optimisation, profiling.profiling, couple_solvers.couple_solvers, [solver_list.solver] ) }
    ;

  paths {->paths} =
     {without}
        token_peano_kernel_path          [peano_kernel_path_equals]:token_equals                [peano_kernel_path]:filename
        token_exahype_path               [exahype_path_equals]:token_equals                     [exahype_path]:filename
        token_output_directory           [output_directory_equals]:token_equals                 [output_directory]:filename
     { -> New paths(peano_kernel_path, Null, exahype_path, Null, output_directory) }
     |
     {with_toolbox}
        token_peano_kernel_path          [peano_kernel_path_equals]:token_equals                [peano_kernel_path]:filename
        token_peano_toolbox_path         [peano_toolbox_path_equals]:token_equals               [peano_toolbox_path]:filename
        token_exahype_path               [exahype_path_equals]:token_equals                     [exahype_path]:filename
        token_output_directory           [output_directory_equals]:token_equals                 [output_directory]:filename
     { -> New paths(peano_kernel_path, peano_toolbox_path, exahype_path, Null, output_directory) }
     |
     {with_libxsmm}
        token_peano_kernel_path          [peano_kernel_path_equals]:token_equals                [peano_kernel_path]:filename
        token_peano_toolbox_path         [peano_toolbox_path_equals]:token_equals               [peano_toolbox_path]:filename
        token_exahype_path               [exahype_path_equals]:token_equals                     [exahype_path]:filename
        token_libxsmm_path               [libxsmm_path_equals]:token_equals                     [libxsmm_path]:filename
        token_output_directory           [output_directory_equals]:token_equals                 [output_directory]:filename
     { -> New paths(peano_kernel_path, peano_toolbox_path, exahype_path, libxsmm_path, output_directory) }
    ;

  distributed_memory {->distributed_memory} =
    [begin_token]:token_distributed_memory
      token_identifier   [identifier_equals]:token_equals [identifier]:identifier
      token_configure    [configure_equals]:token_equals  [configure]:parameter_list
      token_buffer_size  [buffersize_equals]:token_equals [buffersize]:int_number
      token_timeout      [timeout_equals]:token_equals    [timeout]:int_number
    token_end [end_token]:token_distributed_memory
      { -> New distributed_memory( identifier,configure,buffersize,timeout ) };

  shared_memory {->shared_memory} =
    [begin_token]:token_shared_memory
      token_identifier [identifier_equals]:token_equals [identifier]:identifier
      token_cores [cores_equals]:token_equals [cores]:int_number
      token_properties_file [properties_equals]:token_equals [properties_file]:filename
    token_end [end_token]:token_shared_memory
      { -> New shared_memory( identifier,cores,properties_file ) };

  computational_domain {->computational_domain} =
     {two_dimensional}
      [begin_token]:token_computational_domain
       token_dimension          [dimension_equals]:token_equals          [dimension]:int_number
       token_width              [width_equals]:token_equals              [width_x]:float_number [width_comma_xy]:token_comma [width_y]:float_number
       token_offset             [offset_equals]:token_equals             [offset_x]:float_number [offset_comma_xy]:token_comma [offset_y]:float_number
       token_end_time           [end_time_equals]:token_equals           [end_time]:float_number
      token_end [end_token]:token_computational_domain
       { -> New computational_domain( dimension, width_x, width_y, Null, offset_x, offset_y, Null, end_time ) }
       |
     {three_dimensional}
      [begin_token]:token_computational_domain
       token_dimension          [dimension_equals]:token_equals          [dimension]:int_number
       token_width              [width_equals]:token_equals              [width_x]:float_number [width_comma_xy]:token_comma [width_y]:float_number [width_comma_yz]:token_comma [width_z]:float_number
       token_offset             [offset_equals]:token_equals             [offset_x]:float_number  [offset_comma_xy]:token_comma [offset_y]:float_number [offset_comma_yz]:token_comma [offset_z]:float_number
       token_end_time           [end_time_equals]:token_equals           [end_time]:float_number
      token_end [end_token]:token_computational_domain
       { -> New computational_domain( dimension, width_x, width_y, width_z, offset_x, offset_y, offset_z, end_time ) };

   optimisation {->optimisation} =
      [begin_token]:token_optimisation
        token_fuse_algorithm_steps        [token_fuse_algorithm_steps_equals]:token_equals        [fuse_algorithm_steps]:token_on_off
        token_fuse_algorithm_steps_factor [token_fuse_algorithm_steps_factor_equals]:token_equals [fuse_algorithm_steps_factor]:float_number
        token_batch_timesteps             [token_batch_timesteps_equals]:token_equals             [batch_timesteps]:float_number 
        token_skip_reduction              [token_skip_reduction_equals]:token_equals              [skip_reduction]:token_on_off
      token_end [end_token]:token_optimisation
        { -> New optimisation(fuse_algorithm_steps, fuse_algorithm_steps_factor,batch_timesteps,skip_reduction) }
      ;

   profiling {->profiling} =
      {with_likwid}
       [begin_token]:token_profiling
         token_profiler [token_profiler_equals]:token_equals [profiler]:identifier
         token_metrics [token_metrics_equals]:token_equals [metrics]:parameter_list
         token_profiling_output [properties_equals]:token_equals [profiling_output]:filename
         token_likwid_inc [token_likwid_inc_equals]:token_equals [likwid_inc]:filename
         token_likwid_lib [token_likwid_lib_equals]:token_equals [likwid_lib]:filename
       token_end [end_token]:token_profiling
        { -> New profiling(profiler,metrics,likwid_inc,likwid_lib,Null,Null) }
      |
      {with_ipcm}
       [begin_token]:token_profiling
         token_profiler [token_profiler_equals]:token_equals [profiler]:identifier
         token_metrics [token_metrics_equals]:token_equals [metrics]:parameter_list
         token_profiling_output [properties_equals]:token_equals [profiling_output]:filename
         token_ipcm_inc [token_ipcm_inc_equals]:token_equals [ipcm_inc]:filename
         token_ipcm_lib [token_ipcm_lib_equals]:token_equals [ipcm_lib]:filename
       token_end [end_token]:token_profiling
        { -> New profiling(profiler,metrics,Null,Null,ipcm_inc,ipcm_lib)}
      |
      {default}
       [begin_token]:token_profiling
         token_profiler [token_profiler_equals]:token_equals [profiler]:identifier
         token_metrics [token_metrics_equals]:token_equals [metrics]:parameter_list
         token_profiling_output [properties_equals]:token_equals [profiling_output]:filename
       token_end [end_token]:token_profiling
        { -> New profiling(profiler,metrics,Null,Null,Null,Null) }
      ;

   couple_solvers {->couple_solvers} = 
     [begin_token]:token_couple_solvers
       identifier
       token_time      [time_equals]:token_equals     [time]:float_number
       token_repeat    [repeat_equals]:token_equals   [repeat]:float_number
     token_end [end_token]:token_couple_solvers
     { -> New couple_solvers(identifier,time,repeat)};
   
   plot_solution_list {->plot_solution*} =
     [begin_token]:token_plot [plotter_type]:typename
       token_variables [variables_equals]:token_equals [variables]:int_number
       token_time      [time_equals]:token_equals      [time]:float_number
       token_repeat    [repeat_equals]:token_equals    [repeat]:float_number
       token_output    [output_equals]:token_equals    [output]:filename
       token_select    [select_equals]:token_equals    [select]:parameter_list
     token_end [end_token]:token_plot
     plot_solution_list?
       { -> [New plot_solution(plotter_type,variables,time,repeat,output,select),plot_solution_list.plot_solution] }
     ;

   solver_list {->solver*} =
     {aderdg}
       [begin_token]:token_solver token_aderdg [name]:identifier
         token_variables          [variables_equals]:token_equals          [variables]:int_number
         token_parameters         [parameters_equals]:token_equals         [parameters]:int_number
         token_order              [order_equals]:token_equals              [order]:int_number
         token_maximum_mesh_size  [maximum_mesh_size_equals]:token_equals  [maximum_mesh_size]:float_number
         token_time_stepping      [time_stepping_equals]:token_equals      [time_stepping]:identifier
         token_kernel             [kernel_equals]:token_equals             [kernel]:typename
         token_language           [language_equals]:token_equals           [language]:identifier
         plot_solution_list?
       token_end [end_token]:token_solver
       solver_list?
       { -> [New solver.aderdg(name,variables,parameters,order,maximum_mesh_size,time_stepping,kernel,language,Null,[plot_solution_list.plot_solution]),solver_list.solver] }
     |  
     {aderdg_with_constants}
       [begin_token]:token_solver token_aderdg [name]:identifier
         token_variables          [variables_equals]:token_equals          [variables]:int_number
         token_parameters         [parameters_equals]:token_equals         [parameters]:int_number
         token_order              [order_equals]:token_equals              [order]:int_number
         token_maximum_mesh_size  [maximum_mesh_size_equals]:token_equals  [maximum_mesh_size]:float_number
         token_time_stepping      [time_stepping_equals]:token_equals      [time_stepping]:identifier
         token_kernel             [kernel_equals]:token_equals             [kernel]:typename
         token_language           [language_equals]:token_equals           [language]:identifier
         token_constants          [constants_equals]:token_equals          [constants]:parameter_list
         plot_solution_list?
       token_end [end_token]:token_solver
       solver_list?
       { -> [New solver.aderdg(name,variables,parameters,order,maximum_mesh_size,time_stepping,kernel,language,constants,[plot_solution_list.plot_solution]),solver_list.solver] }
     |  
     {finite_volumes}
       [begin_token]:token_solver token_finite_volumes [name]:identifier
         token_variables          [variables_equals]:token_equals          [variables]:int_number
         token_parameters         [parameters_equals]:token_equals         [parameters]:int_number
         token_patch_size         [patch_size_equals]:token_equals         [patch_size]:int_number
         token_maximum_mesh_size  [maximum_mesh_size_equals]:token_equals  [maximum_mesh_size]:float_number
         token_time_stepping      [time_stepping_equals]:token_equals      [time_stepping]:identifier
         token_kernel             [kernel_equals]:token_equals             [kernel]:typename
         token_language           [language_equals]:token_equals           [language]:identifier
         plot_solution_list?
       token_end [end_token]:token_solver
       solver_list?
       { -> [New solver.finite_volumes(name,variables,parameters,patch_size,maximum_mesh_size,time_stepping,kernel,language,Null,[plot_solution_list.plot_solution]),solver_list.solver] }
     |
     {finite_volumes_with_constants}
       [begin_token]:token_solver token_finite_volumes [name]:identifier
         token_variables          [variables_equals]:token_equals          [variables]:int_number
         token_parameters         [parameters_equals]:token_equals         [parameters]:int_number
         token_patch_size         [patch_size_equals]:token_equals         [patch_size]:int_number
         token_maximum_mesh_size  [maximum_mesh_size_equals]:token_equals  [maximum_mesh_size]:float_number
         token_time_stepping      [time_stepping_equals]:token_equals      [time_stepping]:identifier
         token_kernel             [kernel_equals]:token_equals             [kernel]:typename
         token_language           [language_equals]:token_equals           [language]:identifier
         token_constants          [constants_quals]:token_equals           [constants]:parameter_list
         plot_solution_list?
       token_end [end_token]:token_solver
       solver_list?
       { -> [New solver.finite_volumes(name,variables,parameters,patch_size,maximum_mesh_size,time_stepping,kernel,language,constants,[plot_solution_list.plot_solution]),solver_list.solver] };

Abstract Syntax Tree
   project =
     [name]:identifier
     paths
     [architecture]:identifier
     computational_domain
     shared_memory?
     distributed_memory?
     optimisation?
     profiling?
     couple_solvers?
     solver*
     ;

   paths =
     [peano_kernel_path]:filename [peano_toolbox_path]:filename? [exahype_path]:filename [libxsmm_path]:filename? [output_directory]:filename;

   shared_memory =
     [identifier]:identifier [cores]:int_number [properties_file]:filename;

   distributed_memory =
     [identifier]:identifier
     [configure]:parameter_list
     [buffersize]:int_number
     [timeout]:int_number;

   computational_domain =
     [dimension]:int_number [width_x]:float_number [width_y]:float_number [width_z]:float_number? [offset_x]:float_number [offset_y]:float_number [offset_z]:float_number? [end_time]:float_number;

   optimisation =
     [fuse_algorithm_steps]:token_on_off 
     [fuse_algorithm_steps_factor]:float_number
     [batch_timesteps]:float_number 
     [skip_reduction]:token_on_off
     ;

   profiling =
     [profiler]:identifier [metrics]:parameter_list [likwid_inc]:filename? [likwid_lib]:filename? [ipcm_inc]:filename? [ipcm_lib]:filename?;

   solver =
       {aderdg}         [name]:identifier [variables]:int_number [parameters]:int_number [order]:int_number [maximum_mesh_size]:float_number [time_stepping]:identifier [kernel]:typename [language]:identifier [constants]:parameter_list? plot_solution*
     | {finite_volumes} [name]:identifier [variables]:int_number [parameters]:int_number [patch_size]:int_number [maximum_mesh_size]:float_number [time_stepping]:identifier [kernel]:typename [language]:identifier [constants]:parameter_list? plot_solution*;

   plot_solution =
     [plotter_type]:typename [variables]:int_number [time]:float_number [repeat]:float_number [output]:filename [select]:parameter_list;

   couple_solvers =
     [identifier]:identifier [time]:float_number [repeat]:float_number;
     
