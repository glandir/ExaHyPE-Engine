// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// This file was generated by the ExaHyPE toolkit.
// It will not be overwritten.
//
// ========================
//   www.exahype.eu
// ========================
#ifndef POSTPROCESSING_GRMHDBenchmarkNormWriter_CLASS_HEADER_
#define POSTPROCESSING_GRMHDBenchmarkNormWriter_CLASS_HEADER_

#include "exahype/plotters/Plotter.h"
#include "exahype/solvers/LimitingADERDGSolver.h"


namespace GRMHD {
  
  class GRMHDBenchmarkNormWriter;

  /**
   * Forward declaration
   */
  class GRMHDSolver_ADERDG;
  class GRMHDSolver_FV;
}

#include "exahype/plotters/ascii/MultipleReductionsWriter.h"
#include "GRMHDSolver_ADERDG.h"
#include "GRMHDSolver_FV.h"

class GRMHD::GRMHDBenchmarkNormWriter : public exahype::plotters::Plotter::UserOnTheFlyPostProcessing {
public:
  bool plotForADERSolver;
  static const int nVar = GRMHD::AbstractGRMHDSolver_ADERDG::NumberOfVariables;
  exahype::plotters::ascii::MultipleReductionsWriter evolvedPrimitives;
  exahype::plotters::ascii::MultipleReductionsWriter errorPrimitives;

  GRMHDBenchmarkNormWriter();
  GRMHDBenchmarkNormWriter(exahype::solvers::LimitingADERDGSolver&  solver);
  GRMHDBenchmarkNormWriter(GRMHDSolver_ADERDG&  solver);
  GRMHDBenchmarkNormWriter(GRMHDSolver_FV&      solver);
  virtual ~GRMHDBenchmarkNormWriter();

  void startPlotting(double time) override;
  void finishPlotting() override;
  void mapQuantities(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& x,
    const tarch::la::Vector<DIMENSIONS, int>&    pos,
    double* Q,
    double* outputQuantities,
    double timeStamp) override;
};

#endif /* POSTPROCESSING_GRMHDBenchmarkNormWriter_CLASS_HEADER_ */
