// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// =============================---==============
#ifndef __EulerSolver_Variables_CLASS_HEADER__
#define __EulerSolver_Variables_CLASS_HEADER__

#include "AbstractEulerSolver.h"

#include <algorithm>

#include "tarch/la/Matrix.h"

/**
 * Positions of fields in the vector of unkonwns.
 *
 * With these constants, you can write Q[g11], Q[K22] and Q[B33] instead of
 * Q[0], Q[9] and Q[34]. Your code is meaningful in terms of physics while
 * you still access on a C-array level.
 *
 * You might want to use a typedef to shorten the notation or create 
 * an instance of this class.
 **/
class Euler::AbstractEulerSolver::VariableShortcuts {
public:
  static constexpr int _Q[] = { 0, 1, 4, -1 };

  static constexpr int  rho = 0;
  static constexpr int    j = 1;
  static constexpr int    E = 4;


  static const int* asArray() { return _Q; }
  int operator [] (int index) const { return _Q[index]; }
  int operator () (int index) const { return _Q[index]; }
}; // end of VariableShortcuts

/**
 * Variable names as strings as given in the toolkit.
 * 
 * These names might want to be used for plotting, output, etc.
 *
 **/
class Euler::AbstractEulerSolver::VariableNames {
public:
  static constexpr char const *_Q[] = { "rho", "j", "E", nullptr };

  static constexpr char const * rho = "rho";
  static constexpr char const *   j = "j";
  static constexpr char const *   E = "E";


  static const char* const* asArray() { return _Q; } // type: whatever
  const char* operator [] (int index) const { return _Q[index]; }
  const char* operator () (int index) const { return _Q[index]; }
}; // end of VariableNames

/*
 * NEW CLASS IDEA:
 * 
 * class ....::VariablePointers {
 *   private:   double* Q;
 *   public:
 *      double &varfoo;
 *      double &varbar;
 *      VariablePointers(double*Q) : varfoo(Q[0]), bar(Q[1]), ... {}
 * }
 * 
 * Advantages: Use as positions in Q.
 *
 */


class Euler::AbstractEulerSolver::ReadOnlyVariables {
  private:
    const double* const _Q;
  public:
    static constexpr int SizeVariables  = 5;
    static constexpr int SizeParameters = 0;
    static constexpr int Size           = 5+0;
    
    ReadOnlyVariables(const double* const Q) : _Q(Q) {}
    
    double operator [] (int index) const {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    double operator () (int index) const {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    const double* data() const {
      return _Q;
    }
    
    int size() const {
      return Size;
    }
    
    int variables() const {
      return SizeVariables;
    }
    
    int parameters() const {
      return SizeParameters;
    }
    

    double rho() const { return _Q[0]; }

    double j(int index) const {
      assertion(index >= 0 && index<3);
      return _Q[1+index];
    }

    tarch::la::Vector<3,double> j() const {
      tarch::la::Vector<3,double> values;
      values=_Q[1],_Q[2],_Q[3];
      return values;
    }

    double E() const { return _Q[4]; }


}; // end of ReadOnlyVariables


class Euler::AbstractEulerSolver::Variables {
  private:
    double* _Q;
  public:
    static constexpr int SizeVariables  = 5;
    static constexpr int SizeParameters = 0;
    static constexpr int Size           = 5+0;
  
    Variables(double* Q) : _Q(Q) {}
    
    void operator = (Variables& variables) {
      std::copy(variables.data(),variables.data()+Size,_Q);
    }
    
    void operator = (ReadOnlyVariables& variables) {
      assertion(variables.variables()==SizeVariables);
      assertion(variables.parameters()==SizeParameters);
      assertion(variables.size()==Size);
      std::copy(variables.data(),variables.data()+Size,_Q);
    }
    
    double& operator [] (int index) {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    double& operator () (int index) {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    double* data() {
      return _Q;
    }
    
    int size() const {
      return Size;
    }
    
    int variables() const {
      return SizeVariables;
    }
    
    int parameters() const {
      return SizeParameters;
    }
    

    double rho() const { return _Q[0]; }

    double j(int index) const {
      assertion(index >= 0 && index<3);
      return _Q[1+index];
    }

    tarch::la::Vector<3,double> j() const {
      tarch::la::Vector<3,double> values;
      values=_Q[1],_Q[2],_Q[3];
      return values;
    }

    double E() const { return _Q[4]; }



    double& rho() { return _Q[0]; }

    double& j(int index) { return _Q[1+index]; }

    void j(const tarch::la::Vector<3,double>& values) {
      *(_Q+1)=values[0];
      *(_Q+2)=values[1];
      *(_Q+3)=values[2];
    }

    void j(double j0,double j1,double j2) {
      *(_Q+1)=j0;
      *(_Q+2)=j1;
      *(_Q+3)=j2;
    }

    double& E() { return _Q[4]; }


}; // end of Variables


class Euler::AbstractEulerSolver::Fluxes {
  private:
    double** _F;
  public:
    static constexpr int SizeVariables = 5; 
    static constexpr int Dimensions    = DIMENSIONS;
  
    Fluxes(double** F) : _F(F) {}
    
    /** The rows of the flux tensor. */
    int variables() const {
      return SizeVariables;
    }
    
    /** The columns of the flux tensor. */
    int dimensions() const {
      return Dimensions;
    }
    

    double rho(int column) const {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][0];
    }

    tarch::la::Vector<DIMENSIONS,double> rho() const {
      #if DIMENSIONS==2
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][0],_F[1][0]);
      #elif DIMENSIONS==3
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][0],_F[1][0],_F[2][0]);
      #endif
      return values;
    }

    double j(int row, int column) const {
      assertion(row >= 0 && row<3);
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][1+row];
    }

    tarch::la::Vector<DIMENSIONS,double> j(int row) const {
      assertion(row >= 0 && row<3);
      #if DIMENSIONS==2
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][1+row],_F[1][1+row]);
      #elif DIMENSIONS==3
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][1+row],_F[1][1+row],_F[2][1+row]);
      #endif
      return values;
    }

    tarch::la::Matrix<3,DIMENSIONS,double> j() const {
      tarch::la::Matrix<3,DIMENSIONS,double> values;
      #if DIMENSIONS==2
      values = _F[0][1],_F[1][1],
               _F[0][2],_F[1][2],
               _F[0][3],_F[1][3];
      #elif DIMENSIONS==3
      values = _F[0][1],_F[1][1],
               _F[0][2],_F[1][2],
               _F[0][3],_F[1][3];
      #endif
      return values;
    }

    double E(int column) const {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][4];
    }

    tarch::la::Vector<DIMENSIONS,double> E() const {
      #if DIMENSIONS==2
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][4],_F[1][4]);
      #elif DIMENSIONS==3
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][4],_F[1][4],_F[2][4]);
      #endif
      return values;
    }



    double& rho(int column) {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][0];
    }

    void rho(const tarch::la::Vector<DIMENSIONS,double>& values) {
      _F[0][0]=values[0];
      _F[1][0]=values[1];
      #if DIMENSIONS==3
      _F[2][0]=values[2];
      #endif
    }
    #if DIMENSIONS==2
    /** Setter for 2.5D calculations. Third vector element is ignored.*/
    void rho(const tarch::la::Vector<3,double>& values) {
      _F[0][0]=values[0];
      _F[1][0]=values[1];
    }
    #endif

    /** Setter for 3D and 2.5D calculations. Third argument is ignored for the latter.*/
    void rho(double v0,double v1,double v2) {
      _F[0][0]=v0;
      _F[1][0]=v1;
      #if DIMENSIONS==3
      _F[2][0]=v2;
      #endif
    }
    #if DIMENSIONS==2
    void rho(double v0,double v1) {
      _F[0][0]=v0;
      _F[1][0]=v1;
    }
    #endif

    double& j(int row, int column) {
      assertion(row >= 0 && row<3);
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][1+row];
    }

    void j(int row, const tarch::la::Vector<DIMENSIONS,double>& values) {
      assertion(row >= 0 && row<3);
      _F[0][1+row]=values[0];
      _F[1][1+row]=values[1];
      #if DIMENSIONS==2
      _F[2][1+row]=values[2];
      #endif
    }
    #if DIMENSIONS==2
    /** Setter for 2.5D calculations. Third vector element is ignored.*/
    void j(int row, const tarch::la::Vector<3,double>& values) {
      assertion(row >= 0 && row<3);
      _F[0][1+row]=values[0];
      _F[1][1+row]=values[1];
    }
    #endif

    void j(const tarch::la::Matrix<3,DIMENSIONS,double>& values) {
      _F[0][1]=values(0,0);
      _F[0][2]=values(1,0);
      _F[0][3]=values(2,0);
      _F[1][1]=values(0,1);
      _F[1][2]=values(1,1);
      _F[1][3]=values(2,1);
      #if DIMENSIONS==3
      _F[2][1]=values(0,2);
      _F[2][2]=values(1,2);
      _F[2][3]=values(2,2);
      #endif
    }
    #if DIMENSIONS==2
    /** Setter for 2.5D calculations. Third matrix column is ignored.*/
    void j(const tarch::la::Matrix<3,3,double>& values) {
      _F[0][1]=values(0,0);
      _F[0][2]=values(1,0);
      _F[0][3]=values(2,0);
      _F[1][1]=values(0,1);
      _F[1][2]=values(1,1);
      _F[1][3]=values(2,1);
    }
    #endif

    /** Setter for 3D and 2.5D calculations. Third argument is ignored for the latter.*/
    void j(int row, double v0,double v1,double v2) {
      assertion(row >= 0 && row<3);
      _F[0][1+row]=v0;
      _F[1][1+row]=v1;
      #if DIMENSIONS==3
      _F[2][1+row]=v2;
      #endif
    }
    #if DIMENSIONS==2
    /** Setter for 2D calculations.*/
    void j(int row, double v0,double v1) {
      assertion(row >= 0 && row<3);
      _F[0][1+row]=v0;
      _F[1][1+row]=v1;
    }
    #endif

    /** Setter for 3D and 2.5D calculations. Third column values are ignored for the latter.*/
    void j(double v00, double v01, double v02,
           double v10, double v11, double v12,
           double v20, double v21, double v22) {
      _F[0][1]=v00;
      _F[0][2]=v10;
      _F[0][3]=v20;
      _F[1][1]=v01;
      _F[1][2]=v11;
      _F[1][3]=v21;
      #if DIMENSIONS==3
      _F[2][1]=v02;
      _F[2][2]=v12;
      _F[2][3]=v22;
      #endif
    }
    #if DIMENSIONS==2
    void j(double v00, double v01,
           double v10, double v11,
           double v20, double v21) {
      _F[0][1]=v00;
      _F[0][2]=v10;
      _F[0][3]=v20;
      _F[1][1]=v01;
      _F[1][2]=v11;
      _F[1][3]=v21;
    }
    #endif

    double& E(int column) {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][4];
    }

    void E(const tarch::la::Vector<DIMENSIONS,double>& values) {
      _F[0][4]=values[0];
      _F[1][4]=values[1];
      #if DIMENSIONS==3
      _F[2][4]=values[2];
      #endif
    }
    #if DIMENSIONS==2
    /** Setter for 2.5D calculations. Third vector element is ignored.*/
    void E(const tarch::la::Vector<3,double>& values) {
      _F[0][4]=values[0];
      _F[1][4]=values[1];
    }
    #endif

    /** Setter for 3D and 2.5D calculations. Third argument is ignored for the latter.*/
    void E(double v0,double v1,double v2) {
      _F[0][4]=v0;
      _F[1][4]=v1;
      #if DIMENSIONS==3
      _F[2][4]=v2;
      #endif
    }
    #if DIMENSIONS==2
    void E(double v0,double v1) {
      _F[0][4]=v0;
      _F[1][4]=v1;
    }
    #endif


}; // end of Fluxes

// NamingSchemes:


#endif
