{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

// Solve the volume integral 

#include <cstring>

#include <tarch/la/Vector.h>

#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/DGMatrices.h"
#include "{{pathToOptKernel}}/Quadrature.h"
{% if useLibxsmm and useFlux %}
#include "{{pathToOptKernel}}/gemmsCPP.h"
{% endif %}

void {{codeNamespace}}::volumeIntegral( 
  double* restrict lduh, 
  const double* restrict const lFhi,
  const double* restrict const lShi, //nullptr if not used
  const tarch::la::Vector<DIMENSIONS,double> &inverseDx
) {
  memset(lduh, 0, {{nVar*(nDof**nDim)}}*sizeof(double));

#ifdef __INTEL_COMPILER
{% if useFlux %}
  __assume_aligned(lFhi,     ALIGNMENT);
  __assume_aligned(Kxi_T,    ALIGNMENT);
  __assume_aligned(weights2, ALIGNMENT);
{% endif %}{# useFlux #}
  __assume_aligned(lduh,     ALIGNMENT); //lduh should be aligned, see Solver.h
{% if useSourceOrNCP %}
  __assume_aligned(weights3, ALIGNMENT);
  __assume_aligned(lShi,     ALIGNMENT);
{% endif %}
#endif
{% if useFlux %}
  double s_m[{{nDof*nDofPad}}] __attribute__((aligned(ALIGNMENT)));
  
  // Assume equispaced mesh, dx[0] == dx[1] == dx[2]
{% for j in j_seq %}{# if nDim == 2 then j_seq == [0] #}
{% for i in i_seq %}
  #pragma vector aligned
  for(int it=0; it<{{nDof*nDofPad}}; it++) 
    s_m[it] = weights2[{{i+j*nDof}}] * inverseDx[0] * Kxi_T[it];

{% if useLibxsmm %}
#ifdef USE_IPO
  #pragma forceinline
#endif
  {{gemm_x}}(&lFhi[{{(j*nDof+i)*nVarPad*nDof +0*nVarPad*(nDof**nDim)}}],&s_m[0],&lduh[{{(j*nDof+i)*nVar*nDof}}]);
#ifdef USE_IPO
  #pragma forceinline
#endif
  {{gemm_y}}(&lFhi[{{(j*nDof+i)*nVarPad*nDof +1*nVarPad*(nDof**nDim)}}],&s_m[0],&lduh[{{(j*nDof*nDof+i)*nVar}}]);
{% if nDim == 3 %} 
#ifdef USE_IPO
  #pragma forceinline
#endif
  {{gemm_z}}(&lFhi[{{(j*nDof+i)*nVarPad*nDof +2*nVarPad*(nDof**nDim)}}],&s_m[0],&lduh[{{(j*nDof+i)*nVar     }}]);
{% endif %} 
{% else %}
  //x 
  for(int l=0; l<{{nDof}}; l++) {
    for(int k=0; k<{{nDof}}; k++) {
      #pragma simd
      for(int n=0; n<{{nVar}}; n++) {
        lduh[{{(j*nDof+i)*nVar*nDof}}+l*{{nVar}}+n] += lFhi[{{(j*nDof+i)*nVarPad*nDof + 0*nVarPad*(nDof**nDim)}}+k*{{nVarPad}}+n] * s_m[{{nDof}}*l+k];
      }
    }
  }
  
  //y
  for(int l=0; l<{{nDof}}; l++) {
    for(int k=0; k<{{nDof}}; k++) {
      #pragma simd
      for(int n=0; n<{{nVar}}; n++) {
        lduh[{{(j*nDof*nDof+i)*nVar}}+l*{{nVar*nDof}}+n]+= lFhi[{{(j*nDof+i)*nVarPad*nDof + 1*nVarPad*(nDof**nDim)}}+k*{{nVarPad}}+n] * s_m[{{nDof}}*l+k];
      }
    }
  }
  
{% if nDim == 3 %}
  //z
  for(int l=0; l<{{nDof}}; l++) {
    for(int k=0; k<{{nDof}}; k++) {
      #pragma simd
      for(int n=0; n<{{nVar}}; n++) {
        lduh[{{(j*nDof+i)*nVar}}+l*{{nVar*nDof**2}}+n] += lFhi[{{(j*nDof+i)*nVarPad*nDof + 2*nVarPad*(nDof**nDim)}}+k*{{nVarPad}}+n] * s_m[{{nDof}}*l+k];
      }
    }
  }
  
{% endif %}{# dim3 #}
{% endif %}{# useLibxsmm #}
{% endfor %}
{% endfor %}
{% endif %}{# useFlux #}
{% if useSourceOrNCP %}
  // source
  for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
    // Fortran: lduh(:,k,j,i) += w * lShi(:,k,j,i)
    #pragma simd
    for (int n = 0; n < {{nVar}}; n++) {
      lduh[xyz*{{nVar}}+n] += weights3[xyz] * lShi[xyz*{{nVarPad}}+n];
    }
  }
  
{% endif %}
}

