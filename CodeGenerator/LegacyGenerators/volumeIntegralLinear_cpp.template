{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

// Solve the volume integral 

#include <cstring>

#include <tarch/la/Vector.h>

#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/Quadrature.h"

void {{codeNamespace}}::volumeIntegral(double* restrict lduh, 
  const double* restrict const lFhi,
  const double* restrict const lShi, //nullptr if not used
  const tarch::la::Vector<DIMENSIONS,double> &inverseDx
){
#ifdef __INTEL_COMPILER
{% if useFlux %}
  __assume_aligned(lFhi,     ALIGNMENT);
{% endif %}{# useFlux #}
  __assume_aligned(lduh,     ALIGNMENT); //lduh should be aligned, see Solver.h
{% if useSourceOrNCP %}
  __assume_aligned(weights3, ALIGNMENT);
  __assume_aligned(lShi,     ALIGNMENT);
{% endif %}
#endif
  // for linear non-conservative PDE, the volume integral is trivial, since it
  // only involves the element mass matrix, which later will cancel
  memset(lduh, 0, {{nVar*(nDof**nDim)}}*sizeof(double));

  for (int z = 0; z < {{nDof3D}}; z++) {
    for (int y = 0; y < {{nDof}}; y++) {
      for (int x = 0; x < {{nDof}}; x++) {
        #pragma simd
        for (int n = 0; n < {{nVar}}; n++) {
            lduh[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nVar}}+n] -= weights3[(z*{{nDof3D}}+y)*{{nDof}}+x] * 
                (
{% if useFlux %}
                    lFhi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{0*nVarPad*nDof**nDim}}] //x
                  + lFhi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{1*nVarPad*nDof**nDim}}] //y
{% if nDim==3 %}
                  + lFhi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{2*nVarPad*nDof**nDim}}] //z
{% endif %}
{% endif %}
{% if useSource %}
                  {{'+' if useFlux}} lShi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nVarPad}}+n] // source
{% endif %}
                );
        }
      }
    }
  }
}
