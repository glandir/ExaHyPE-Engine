/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include <cstring>
#include <algorithm>

#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/DGMatrices.h"
#include "{{pathToOptKernel}}/Quadrature.h"

{% if useLibxsmm %}
#include "{{pathToOptKernel}}/gemmsCPP.h"
{% endif %}

#include "{{solverHeader}}"

//NOTE JMG lFi/gradQ swap nDim to lowest coordinate


/*
 * For the linear kernels, we need the material parameters in the
 * space-time predictor lQi, time-averaged predictor lQhi,
 * and extrapolated predictor lQhbnd.
 * Currently we simply copy them over from the solution array.
 */
void {{codeNamespace}}::spaceTimePredictorLinear(
    {{solverName}}& solver,
    double* restrict lQhbnd, 
    double* restrict lFhbnd,
    double* restrict lQi,
    double* restrict lFi,
    double* restrict lSi,   // for NCP or Source
    double* restrict lQhi,
    double* restrict lFhi,
    double* restrict lShi,  // for NCP or Source
    double* restrict gradQ, // for NCP or Source
    double* restrict PSi,   // for pointSource
    double* restrict PSderivatives, // for pointSource
    const double* const restrict luh,
    const tarch::la::Vector<DIMENSIONS, double>& inverseDx,
    const double dt
) {
 
  const double invDt = 1. / dt;
  
  double* tmp_PSderivatives = lFi; // it's actually lFi used here as a temp array //TODO do something cleaner?
  
  std::memset(lQi, 0, {{(nDof+1)*(nDof**nDim)*nDataPad}}*sizeof(double));
  std::memset(lFi, 0, {{nDim*nDof*(nDof**nDim)*nVarPad}}*sizeof(double));
  
 
{% if useNCP %}
  std::memset(gradQ, 0, {{nDim*nDof*(nDof**nDim)*nVarPad}}*sizeof(double));
  std::memset(lSi  , 0, {{nDof*(nDof**nDim)*nVarPad}}*sizeof(double));
{% endif %}

  // local tmp array
{% if useFlux %}
  double fluxDerivative[{{nDof*nVarPad}}] __attribute__((aligned(ALIGNMENT)));
{% endif %}
{% if useNCP %}
  double ncpResult[{{nVar*nDim}}] __attribute__((aligned(ALIGNMENT))); 
{% endif %}
{% if useNCP or useMaterialParam %}
  double nVarXnDimNoPad[{{nVar*nDim}}] __attribute__((aligned(ALIGNMENT))); 
{% endif %}
  double dudxT_by_dx[{{nDof*nDofPad}}] __attribute__((aligned(ALIGNMENT)));
  static volatile double doNotOptimizeAway = 0.; // used to prevent the compiler from optimizing temp array away
  
  // 0. precompute 1/dx * dudx_T. Assume dx[0] == dx[1] == dx[2]
  #pragma simd
  for (int it = 0; it < {{nDof*nDofPad}}; it++) {
    dudxT_by_dx[it] = inverseDx[0] * dudx_T[it];
  }
  
  //***************************
  //**** Cauchy-Kovalewski ****
  //***************************
  
  
  // 1. Initialize time derivative
  // The zeroth time derivative (time dof number 1) is the initial condition
  for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
    std::copy_n(luh+xyz*{{nData}}, {{nData}}, lQi+xyz*{{nDataPad}});
  }
   
  //2. Add point source (if required) to the zeroth time derivative 
{% if usePointSources %}
  for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
    for (int t = 0; t < {{nDof}}; t++) {  
      #pragma simd
      for (int n = 0; n < {{nVar}}; n++) { //skip parameters
        lQi[xyz*{{nDataPad}}+n] += dt*weights1[t]*PSi[((t+1)*{{nDof**nDim}}+xyz)*{{nVarPad}}+n];
      }
    }
  }

  // copy the source vector at the quadrature nodes  into the temporary array PSderivatives (remove 0th time derivative)
  std::copy_n(PSi+{{(nDof**nDim)*nVarPad}}, {{(nDof**nDim)*nDof*nVarPad}}, PSderivatives);

  // Add point source to the first time derivative
  for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
    #pragma simd
    for (int n = 0; n < {{nVar}}; n++) { //skip parameters
      lQi[{{(nDof**nDim)*nDataPad}}+(xyz*{{nDataPad}}+n)] += PSi[xyz*{{nVarPad}}+n];
    }
  }

  for (int i = 2; i < {{nDof}}; i++) {
    std::memset(tmp_PSderivatives, 0, {{nDof*(nDof**nDim)*nVarPad}}*sizeof(double));
    // compute (t+1)-th derivative in time of point source
    for(int t = 0; t < {{nDof}}; t++ ){
     for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
        for (int s = 0; s < {{nDof}}; s++) {
          #pragma simd
          for (int n = 0; n < {{nVarPad}}; n++) {
            tmp_PSderivatives[(t*{{nDof**nDim}}+xyz)*{{nVarPad}}+n] += PSderivatives[(s*{{nDof**nDim}}+xyz)*{{nVarPad}}+n] * dudx_T[t*{{nDofPad}}+s] * invDt;
          }
        }
      } 
    }

    // project derivative on to t_n
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      for (int t = 0; t < {{nDof}}; t++) {
        #pragma simd
        for (int n = 0; n < {{nVarPad}}; n++) { //0 on the padding
          lQi[(i*{{nDof**nDim}}+xyz)*{{nDataPad}}+n] += tmp_PSderivatives[(t*{{nDof**nDim}}+xyz)*{{nVarPad}}+n]*FLCoeff[t];
        }
      }
    }

    // store (t+1)-th derivative in PSderivatives
    std::copy_n(tmp_PSderivatives, {{(nDof**nDim)*nDof*nVarPad}}, PSderivatives); 
    
  } // i
  std::memset(tmp_PSderivatives, 0, {{nDof*(nDof**nDim)*nVarPad}}*sizeof(double)); //Since we actually use lFi, TODO remove when clean solution   
{% endif %}
    
  // 3. Cauchy-Kovalewski procedure
  for (int i = 0; i < {{nDof}}; i++) {  // time DOFs

{% if useFlux %}
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      double* F[{{nDim}}];    
      F[0] = &lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}];
      F[1] = &lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{1*(nDof**nDim)*nDof*nVarPad}}];
{% if nDim == 3 %}
      F[2] = &lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{2*(nDof**nDim)*nDof*nVarPad}}];
{% endif %}
      solver.{{solverName}}::flux(lQi+(i*{{nDof**nDim}}+xyz)*{{nDataPad}}, F);
    }

    //dflux1 dx
    for (int yz = 0; yz < {{nDof3D*nDof}}; yz++) {    
{% if useLibxsmm %}
      {{gemm_flux_x}}(lFi+(i*{{nDof3D*nDof}}+yz)*{{nDof*nVarPad}}, dudxT_by_dx, fluxDerivative);
{% else %}
      std::memset(fluxDerivative, 0, {{nDof*nVarPad}}*sizeof(double));
      for (int l = 0; l < {{nDof}}; l++) {
        for (int n = 0; n < {{nVar}}; n++) {
          for (int x = 0; x < {{nDof}}; x++) {
            fluxDerivative[l*{{nVarPad}}+n] += lFi[((i*{{nDof3D*nDof}}+yz)*{{nDof}}+x)*{{nVarPad}}+n] * dudxT_by_dx[l*{{nDofPad}}+x];
          }
        }
      }
{% endif %}
      std::copy_n(fluxDerivative, {{nDof*nVarPad}}, lFi+(i*{{nDof3D*nDof}}+yz)*{{nDof*nVarPad}}); 
    }

    //dflux2 dy
    for (int z = 0; z < {{nDof3D}}; z++) {
      for (int x = 0; x < {{nDof}}; x++) {
{% if useLibxsmm %}
        {{gemm_flux_y}}(lFi+((i*{{nDof3D}}+z)*{{nDof*nDof}}+x)*{{nVarPad}}+{{1*(nDof**nDim)*nDof*nVarPad}}, dudxT_by_dx, fluxDerivative);
{% else %}
        std::memset(fluxDerivative, 0, {{nDof*nVarPad}}*sizeof(double));
        for (int l = 0; l < {{nDof}}; l++) {
          for (int n = 0; n < {{nVar}}; n++) {
            for (int y = 0; y < {{nDof}}; y++) {
              fluxDerivative[l*{{nVarPad}}+n] += lFi[(((i*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n +{{1*(nDof**nDim)*nDof*nVarPad}}] * dudxT_by_dx[l*{{nDofPad}}+y];
              
            }
          }
        }
{% endif %}
        for (int l = 0; l < {{nDof}}; l++) {
          #pragma simd
          for (int n = 0; n < {{nVarPad}}; n++) {
            lFi[(((i*{{nDof3D}}+z)*{{nDof}}+l)*{{nDof}}+x)*{{nVarPad}}+n +{{1*(nDof**nDim)*nDof*nVarPad}}] = fluxDerivative[l*{{nVarPad}}+n];
          }
        }
      }
    }
{% if nDim ==3 %}

    //dflux3 dz
    for (int xy = 0; xy < {{nDof*nDof}}; xy++) {
{% if useLibxsmm %}      
      {{gemm_flux_z}}(lFi+(i*{{nDof**3}}+xy)*{{nVarPad}}+{{2*(nDof**nDim)*nDof*nVarPad}}, dudxT_by_dx, fluxDerivative);
{% else %}
      std::memset(fluxDerivative, 0, {{nDof*nVarPad}}*sizeof(double));
      for (int l = 0; l < {{nDof}}; l++) {
        for (int n = 0; n < {{nVar}}; n++) {
          for (int z = 0; z < {{nDof}}; z++) {
            fluxDerivative[l*{{nVarPad}}+n] += lFi[((i*{{nDof3D}}+z)*{{nDof*nDof}}+xy)*{{nVarPad}}+n +{{2*(nDof**nDim)*nDof*nVarPad}}] * dudxT_by_dx[l*{{nDofPad}}+z]; 
          }
        }
      }
{% endif %}
      for (int l = 0; l < {{nDof}}; l++) {
        #pragma simd
        for (int n = 0; n < {{nVarPad}}; n++) {
          lFi[((i*{{nDof3D}}+l)*{{nDof*nDof}}+xy)*{{nVarPad}}+n +{{2*(nDof**nDim)*nDof*nVarPad}}] =  fluxDerivative[l*{{nVarPad}}+n];
        }
      }
    }
{% endif %}
{% endif %} {# useFlux #}

{% if useNCP %}
    // Compute the derivatives in x direction (independent from the y and z derivatives)
    for (int yz = 0; yz < {{nDof*nDof3D}}; yz++) {
{% if useLibxsmm %}
      {{gemm_gradQ_x}}(lQi+(i*{{nDof*nDof3D}}+yz)*{{nDof*nDataPad}}, dudxT_by_dx, gradQ+(i*{{nDof*nDof3D}}+yz)*{{nDof*nVarPad}});
{% else %}
      for (int x = 0; x < {{nDof}}; x++) {
        for (int n = 0; n < {{nVar}}; n++) { // Skip parameters
          for (int l = 0; l < {{nDof}}; l++) {
            gradQ[((i*{{nDof*nDof3D}}+yz)*{{nDof}}+x)*{{nVarPad}}+n] += lQi[((i*{{nDof*nDof3D}}+yz)*{{nDof}}+l)*{{nDataPad}}+n] * dudxT_by_dx[x*{{nDofPad}}+l];
          }
        }
      }
{% endif %}
    }

    // y direction (independent from the x and z derivatives)
    for (int z = 0; z < {{nDof3D}}; z++) {
      for (int x = 0; x < {{nDof}}; x++) {
{% if useLibxsmm %}
        {{gemm_gradQ_y}}(lQi+((i*{{nDof3D}}+z)*{{nDof*nDof}}+x)*{{nDataPad}}, dudxT_by_dx, gradQ+((i*{{nDof3D}}+z)*{{nDof*nDof}}+x)*{{nVarPad}}+{{1*(nDof**nDim)*nDof*nVarPad}});
{% else %}
        for (int y = 0; y < {{nDof}}; y++) {
          for (int n = 0; n < {{nVar}}; n++) { // Skip parameters
            for (int l = 0; l < {{nDof}}; l++) {
              gradQ[(((i*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n +{{1*(nDof**nDim)*nDof*nVarPad}}] += lQi[(((i*{{nDof3D}}+z)*{{nDof}}+l)*{{nDof}}+x)*{{nDataPad}}+n] * dudxT_by_dx[y*{{nDofPad}}+l];
            }
          }
        }
{% endif %}
      }
    }
{% if nDim ==3 %}

    // z direction (independent from the x and y derivatives)
    for (int xy = 0; xy < {{nDof*nDof}}; xy++) {
{% if useLibxsmm %}
      {{gemm_gradQ_z}}(lQi+(i*{{nDof3D*nDof*nDof}}+xy)*{{nDataPad}}, dudxT_by_dx, gradQ+(i*{{nDof3D*nDof*nDof}}+xy)*{{nVarPad}}+{{2*(nDof**nDim)*nDof*nVarPad}});
{% else %}
      for (int z = 0; z < {{nDof}}; z++) {     
        for (int n = 0; n < {{nVar}}; n++) {// Skip parameters
          for (int l = 0; l < {{nDof}}; l++) {
            gradQ[((i*{{nDof3D}}+z)*{{nDof*nDof}}+xy)*{{nVarPad}}+n +{{2*(nDof**nDim)*nDof*nVarPad}}] += lQi[((i*{{nDof3D}}+l)*{{nDof*nDof}}+xy)*{{nDataPad}}+n] * dudxT_by_dx[z*{{nDofPad}}+l];
          }
        }
      }
{% endif %}
    }
{% endif %}
  
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      std::memset(ncpResult, 0, {{nDim*nVar}}*sizeof(double)); // zero out ncpResult
      std::copy_n(gradQ+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}, {{nVar}}, nVarXnDimNoPad); //x
      std::copy_n(gradQ+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{1*(nDof**nDim)*nDof*nVarPad}}, {{nVar}}, nVarXnDimNoPad+{{1*nVar}}); //y
{% if nDim==3 %}
      std::copy_n(gradQ+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{2*(nDof**nDim)*nDof*nVarPad}}, {{nVar}}, nVarXnDimNoPad+{{2*nVar}}); //z
{% endif %}
      solver.{{solverName}}::nonConservativeProduct(lQi+(i*{{nDof**nDim}}+xyz)*{{nDataPad}}, nVarXnDimNoPad, ncpResult);
      for(int d = 0; d < {{nDim}}; d++) {
        #pragma simd
        for (int n = 0; n < {{nVar}}; n++) {
          lFi[((d*{{nDof}}+i)*{{nDof**nDim}}+xyz)*{{nVarPad}}+n] += ncpResult[d*{{nVar}}+n];
        }
      }
    }
{% endif %} {# useNCP #}

    doNotOptimizeAway = dudxT_by_dx[0]; // used to prevent the compiler from optimizing dudxT_by_dx away
  
{% if useMaterialParam %}
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {  //TODO JMG need to copy back and forth, change to same paradigm as flux
      std::copy_n(lFi+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}, {{nVar}}, nVarXnDimNoPad); //x
      std::copy_n(lFi+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{1*(nDof**nDim)*nDof*nVarPad}}, {{nVar}}, nVarXnDimNoPad+{{1*nVar}}); //y
{% if nDim == 3 %}
      std::copy_n(lFi+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{2*(nDof**nDim)*nDof*nVarPad}}, {{nVar}}, nVarXnDimNoPad+{{2*nVar}}); //z
{% endif %}
      solver.{{solverName}}::multiplyMaterialParameterMatrix(lQi+(i*{{nDof**nDim}}+xyz)*{{nDataPad}}, nVarXnDimNoPad);
      std::copy_n(nVarXnDimNoPad, {{nVar}}, lFi+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}); //x
      std::copy_n(nVarXnDimNoPad+{{1*nVar}}, {{nVar}}, lFi+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{1*(nDof**nDim)*nDof*nVarPad}}); //y
{% if nDim == 3 %}
      std::copy_n(nVarXnDimNoPad+{{2*nVar}}, {{nVar}}, lFi+(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+{{2*(nDof**nDim)*nDof*nVarPad}}); //z
{% endif %}
    }
{% endif %} {# useMaterialParam #}

{% if useSource %}
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      solver.{{solverName}}::algebraicSource(lQi+(i*{{nDof**nDim}}+xyz)*{{nDataPad}}, lSi+(i*{{nDof**nDim}}+xyz)*{{nVarPad}});
    }
{% endif %} {# useSource #}

    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      #pragma simd
      for (int n = 0; n < {{nVar}}; n++) { // Skip parameters
        lQi[((i+1)*{{nDof**nDim}}+xyz)*{{nDataPad}}+n] -= lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n];
        lQi[((i+1)*{{nDof**nDim}}+xyz)*{{nDataPad}}+n] -= lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n+{{1*(nDof**nDim)*nDof*nVarPad}}];
{% if nDim==3 %}
        lQi[((i+1)*{{nDof**nDim}}+xyz)*{{nDataPad}}+n] -= lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n+{{2*(nDof**nDim)*nDof*nVarPad}}];
{% endif %}
{% if useSource %}
        lQi[((i+1)*{{nDof**nDim}}+xyz)*{{nDataPad}}+n] -= lSi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n];
{% endif %}
      }
    }

{% if nPar > 0 %}
    // Copy parameters
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      std::copy_n(lQi+(i*{{nDof**nDim}}+xyz)*{{nDataPad}}+{{nVar}}, {{nPar}}, lQi+((i+1)*{{nDof**nDim}}+xyz)*{{nDataPad}}+{{nVar}});
    }
{% endif %}
    
  } //i

  
  //*****************************
  //**** Averaging over time ****
  //*****************************

  // Immediately compute the time-averaged space-time polynomials
  // Fortran: lQhi(:,:,:,:) = lQi(:,:,:,:,1)
  std::copy_n(lQi, {{(nDof**nDim)*nDataPad}}, lQhi); 

  double dtavFac = 0.5 * dt;
  for (int i = 1; i < {{nDof}}; i++) {
    // Fortran: lQhi(:,:,:,:) += dtavFac * lQi(:,i,:,:,:)
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      for (int n = 0; n < {{nVar}}; n++) { // skip parameters
        lQhi[xyz*{{nDataPad}}+n] += dtavFac * lQi[(i*{{nDof**nDim}}+xyz)*{{nDataPad}}+n];
      }
    }
    dtavFac *= dt / (i + 2);
  }

  std::copy_n(lFi, {{(nDof**nDim)*nVarPad}}, lFhi); //x
  std::copy_n(lFi+{{1*nDof*(nDof**nDim)*nVarPad}}, {{(nDof**nDim)*nVarPad}}, lFhi+{{1*(nDof**nDim)*nVarPad}}); //y
{% if nDim==3 %}
  std::copy_n(lFi+{{2*nDof*(nDof**nDim)*nVarPad}}, {{(nDof**nDim)*nVarPad}}, lFhi+{{2*(nDof**nDim)*nVarPad}}); //z
{% endif %}

{% if useSource %}
  std::copy_n(lSi, {{(nDof**nDim)*nVarPad}}, lShi); //source
{% endif %}

  dtavFac = 0.5 * dt;
  for (int i = 1; i < {{nDof}}; i++) {
    // Fortran: lFhi(n,m,l,k,j) += dtavFac*lFi(n,j,m,l,k,i)
    for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
      #pragma simd
      for (int n = 0; n < {{nVarPad}}; n++) {
        lFhi[xyz*{{nVarPad}}+n] += dtavFac * lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n]; //x
        lFhi[xyz*{{nVarPad}}+n+{{1*(nDof**nDim)*nVarPad}}] += dtavFac * lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n+{{1*nDof*(nDof**nDim)*nVarPad}}]; //y
{% if nDim==3 %}
        lFhi[xyz*{{nVarPad}}+n+{{2*(nDof**nDim)*nVarPad}}] += dtavFac * lFi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n+{{2*nDof*(nDof**nDim)*nVarPad}}]; //z
{% endif %}
{% if useSource %}
        lShi[xyz*{{nVarPad}}+n] += dtavFac * lSi[(i*{{nDof**nDim}}+xyz)*{{nVarPad}}+n]; //source
{% endif %}
      }
    }
    
    dtavFac *= dt / (i + 2);
  }

  // Add point source to the right hand side
{% if usePointSources %}
  for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
    for (int n = 0; n < {{nVar}}; n++) {
      double sum = 0.0;
      for (int n0 = 1; n0 < {{nDof+1}}; n0++) {    
        sum += weights1[n0-1]*PSi[(n0*{{nDof**nDim}}+xyz)*{{nVarPad}}+n];
      }
      lFhi[xyz*{{nVarPad}}+n] += sum/{{nDim}}; //x
      lFhi[xyz*{{nVarPad}}+n+{{1*(nDof**nDim)*nVarPad}}] += sum/{{nDim}}; //y
{% if nDim==3 %}
      lFhi[xyz*{{nVarPad}}+n+{{2*(nDof**nDim)*nVarPad}}] += sum/{{nDim}}; //z
{% endif %}
    }
  }
{% endif %}


  //***********************
  //**** Extrapolation ****
  //***********************
  
  std::memset(lQhbnd, 0, {{2*nDim*nDof*nDof3D*nDataPad}}*sizeof(double));
  std::memset(lFhbnd, 0, {{2*nDim*nDof*nDof3D*nVarPad }}*sizeof(double));

  // x-direction: face 1 (left) and face 2 (right)
  for (int yz = 0; yz < {{nDof*nDof3D}}; yz++) {
    for (int x = 0; x < {{nDof}}; x++) {
      #pragma simd
      for (int n = 0; n < {{nDataPad}}; n++) {
        // left
        lQhbnd[yz*{{nDataPad}}+n] += lQhi[(yz*{{nDof}}+x)*{{nDataPad}}+n] * FLCoeff[x];
        // right
        lQhbnd[yz*{{nDataPad}}+n+{{1*nDof*nDof3D*nDataPad}}] += lQhi[(yz*{{nDof}}+x)*{{nDataPad}}+n] * FRCoeff[x];
        }
      }
    for (int x = 0; x < {{nDof}}; x++) {
      #pragma simd
      for (int n = 0; n < {{nVarPad}}; n++) {
        // left
        lFhbnd[yz*{{nVarPad}}+n] += lFhi[(yz*{{nDof}}+x)*{{nVarPad}}+n] * FLCoeff[x];
        // right
        lFhbnd[yz*{{nVarPad}}+n+{{1*nDof*nDof3D*nVarPad}}] += lFhi[(yz*{{nDof}}+x)*{{nVarPad}}+n] * FRCoeff[x];
      }
    }
  }


  // y-direction: face 3 (left) and face 4 (right)
  for (int z = 0; z < {{nDof3D}}; z++) {
    for (int x = 0; x < {{nDof}}; x++) {
      for (int y = 0; y < {{nDof}}; y++) {
        #pragma simd
        for (int n = 0; n < {{nDataPad}}; n++) {
          // left
          lQhbnd[(z*{{nDof3D}}+x)*{{nDataPad}}+n+{{2*nDof*nDof3D*nDataPad}}] += lQhi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nDataPad}}+n] * FLCoeff[y];
          // right
          lQhbnd[(z*{{nDof3D}}+x)*{{nDataPad}}+n+{{3*nDof*nDof3D*nDataPad}}] += lQhi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nDataPad}}+n] * FRCoeff[y];
        }
      }
      for (int y = 0; y < {{nDof}}; y++) {
        #pragma simd
        for (int n = 0; n < {{nVarPad}}; n++) {
          // left
          lFhbnd[(z*{{nDof3D}}+x)*{{nVarPad}}+n+{{2*nDof*nDof3D*nVarPad}}] += lFhi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{1*(nDof**nDim)*nVarPad}}] * FLCoeff[y];
          // right
          lFhbnd[(z*{{nDof3D}}+x)*{{nVarPad}}+n+{{3*nDof*nDof3D*nVarPad}}] += lFhi[((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{1*(nDof**nDim)*nVarPad}}] * FRCoeff[y];
        }
      }
    }
  }
{% if nDim==3 %}

  // z-direction: face 5 (left) and face 6 (right)
  for (int xy = 0; xy < {{nDof*nDof3D}}; xy++) {
    for (int z = 0; z < {{nDof}}; z++) {
      #pragma simd
      for (int n = 0; n <{{nDataPad}}; n++) {
        // left
        lQhbnd[xy*{{nDataPad}}+n+{{4*nDof*nDof3D*nDataPad}}] += lQhi[(z*{{nDof*nDof}}+xy)*{{nDataPad}}+n] * FLCoeff[z];
        // right
        lQhbnd[xy*{{nDataPad}}+n+{{5*nDof*nDof3D*nDataPad}}] += lQhi[(z*{{nDof*nDof}}+xy)*{{nDataPad}}+n] * FRCoeff[z];
      }
    }
    for (int z = 0; z < {{nDof}}; z++) {
      #pragma simd
      for (int n = 0; n < {{nVarPad}}; n++) {
        // left
        lFhbnd[xy*{{nVarPad}}+n+{{4*nDof*nDof3D*nVarPad}}] += lFhi[(z*{{nDof*nDof}}+xy)*{{nVarPad}}+n+{{2*(nDof**nDim)*nVarPad}}] * FLCoeff[z];
        // right
        lFhbnd[xy*{{nVarPad}}+n+{{5*nDof*nDof3D*nVarPad}}] += lFhi[(z*{{nDof*nDof}}+xy)*{{nVarPad}}+n+{{2*(nDof**nDim)*nVarPad}}] * FRCoeff[z];
      }
    }
  }
{% endif %}
  
}
