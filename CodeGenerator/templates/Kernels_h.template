{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#ifndef _EXAHYPE_{{guardNamespace}}_KERNELS_H_
#define _EXAHYPE_{{guardNamespace}}_KERNELS_H_

#include "tarch/la/Vector.h"
#include "peano/utils/Globals.h"

{% if useDeepProfiler %}
#include "exahype/profilers/Profiler.h"
{% endif %}

#ifndef __INTEL_COMPILER
#include <mm_malloc.h>
#endif

//forward declaration of the user solver
namespace {{solverNamespace}} {
  class {{solverClass}};
}

#define NDEBUG
{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}
{% if isLinear %}
//TODO JMG
{% else %}
  void picardLoopNonlinear(
    {{solverName}}& solver,
    const double* restrict const luh, 
    const double dt,
    const tarch::la::Vector<DIMENSIONS, double>& inverseDx,
    double* restrict lQi, double* restrict rhs,
    double* restrict lFi,
    double* restrict lSi, double* restrict gradQ
{% if useDeepProfiler %}
    , exahype::profilers::Profiler* profiler
{% endif %}
  );

{% if noTimeAveraging %}
  void extrapolatorNonlinear(
    const double* restrict const lQi, 
    const double* restrict const lFi,
    double* restrict lQhbnd, 
    double* restrict lFhbnd);
{% else %}    
  void predictorNonlinear(
    const double* restrict const lQi, 
    const double* restrict const lFi,
    const double* restrict const lSi, //nullptr if not used
    double* restrict lQhi,
    double* restrict lFhi,
    double* restrict lShi //nullptr if not used
  );

  void extrapolatorNonlinear(
    const double* restrict const lQhi, 
    const double* restrict const lFhi,
    double* restrict lQhbnd, 
    double* restrict lFhbnd);
{% endif %}

{% endif %}

  void volumeIntegral( 
    double* restrict lduh, 
    const double* restrict const {{'lFhi' if isLinear else 'lFi'}},
    const double* restrict const {{'lShi' if isLinear else 'lSi'}}, //nullptr if not used
    const tarch::la::Vector<DIMENSIONS,double> &inverseDx
  );

  void solutionUpdate( 
    double* restrict luh, 
    const double* restrict const lduh, 
    const double dt
  );
  
  void surfaceIntegral( 
    double* restrict lduh, 
    const double* restrict const lFhbnd, 
    const tarch::la::Vector<DIMENSIONS,double> &inverseDx
  );

  void adjustPointSolution(
    {{solverName}}& solver,
    double* luh,
    const tarch::la::Vector<DIMENSIONS,double>& center,
    const tarch::la::Vector<DIMENSIONS,double>& dx,
    const double t,
    const double dt
  );

  void riemannSolver( 
    {{solverName}}& solver,
    double* restrict lFhbndL,
    double* restrict lFhbndR,
    const double* restrict const lQhbndL,
    const double* restrict const lQhbndR,
    const double dt,
    const int normalNonZero
{% if useDeepProfiler %}
    , exahype::profilers::Profiler* profiler
{% endif %}
  );

  double stableTimeStepSize(
    {{solverName}}& solver,
    const double* restrict const luh,
    const tarch::la::Vector<DIMENSIONS,double>& inverseDx
  );

  void boundaryConditions(
    {{solverName}}& solver,
    double* fluxOut, 
    double* stateOut, 
    const double* const fluxIn, 
    const double* const stateIn, 
    const tarch::la::Vector<DIMENSIONS, double>& cellCentre, 
    const tarch::la::Vector<DIMENSIONS,double>& cellSize, 
    const double t,const double dt, 
    const int faceIndex, 
    const int normalNonZero 
  );

{% if usePointSources %}
  void deltaDistribution(
    {{solverName}}& solver,
    const double t,
    const double dt,
    const tarch::la::Vector<DIMENSIONS, double>& center,
    const tarch::la::Vector<DIMENSIONS, double>& dx,
    double** pointForceSources //memory space for forceVector
  );
{% endif %}
  
//AMR Routines
//------------

  void faceUnknownsProlongation(
    double* restrict lQhbndFine,
    double* restrict lFhbndFine,
    const double* restrict lQhbndCoarse,
    const double* restrict lFhbndCoarse,
    const int coarseGridLevel,
    const int fineGridLevel,
    const tarch::la::Vector<DIMENSIONS-1, int>& subfaceIndex
  );

  void faceUnknownsRestriction(
    double* restrict lQhbndCoarse,
    double* restrict lFhbndCoarse,
    const double* restrict lQhbndFine,
    const double* restrict lFhbndFine,
    const int coarseGridLevel,
    const int fineGridLevel,
    const tarch::la::Vector<DIMENSIONS-1, int>& subfaceIndex
  );

  void volumeUnknownsProlongation(
    double* restrict luhFine,
    const double* restrict luhCoarse,
    const int coarseGridLevel,
    const int fineGridLevel,
    const tarch::la::Vector<DIMENSIONS, int>& subcellIndex
  );
  
  void volumeUnknownsRestriction(
    double* restrict luhCoarse,
    const double* restrict luhFine,
    const int coarseGridLevel,
    const int fineGridLevel,
    const tarch::la::Vector<DIMENSIONS, int>& subcellIndex
  );
  
{% for namespaceName in codeNamespaceList %}
}
{% endfor %}
{# //TODO JMG implement/remove
{% if isLinear %}
#include "{{pathToOptKernel}}/cauchyKovalewski.cpph"
{% endif %}
#}

#include "{{pathToOptKernel}}/ConfigurationParameters.cpph"

#endif // _EXAHYPE_{{guardNamespace}}_KERNELS_H_
