{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#ifndef EXAHYPE_KERNELS_OPTIMISED_KERNELS_H_
#define EXAHYPE_KERNELS_OPTIMISED_KERNELS_H_

#include "tarch/la/Vector.h"
#include "peano/utils/Globals.h"

{% if useDeepProfiler %}
#include "exahype/profilers/Profiler.h"
{% endif %}

#ifndef __INTEL_COMPILER
#include <mm_malloc.h>
#endif

#define NDEBUG
namespace kernels {
  namespace aderdg {
    namespace optimised {
      
      template <bool useSource, bool useNCP, void PDEflux(const double* const Q, double** F), void PDEsource(const double* const Q, double* S), void PDEncp(const double* const Q, const double* const gradQ, double* BgradQ)>
      void picardLoopNonlinear(
        const double* restrict const luh, 
        const double dt,
        const tarch::la::Vector<DIMENSIONS, double>& inverseDx,
        double* restrict lQi, double* restrict lQi_old, double* restrict rhs, double* restrict rhs_0,
        double* restrict lFi,
        double* restrict lSi, double* restrict gradQ, double* restrict BGradQ //source related term, nullptr if not used
{% if useDeepProfiler %}
        , exahype::profilers::Profiler* profiler
{% endif %}
      );
      
      template <bool useSourceOrNCP>
      void predictorNonlinear(
        const double* restrict const lQi, 
        const double* restrict const lFi,
        const double* restrict const lSi, //nullptr if not used
        double* restrict lQhi,
        double* restrict lFhi,
        double* restrict lShi //nullptr if not used
      );

      void extrapolatorNonlinear(
        const double* restrict const lQhi, 
        const double* restrict const lFhi,
        double* restrict lQhbnd, 
        double* restrict lFhbnd);


      void solutionUpdate( 
        double* restrict luh, 
        const double* restrict const lduh, 
        const double dt
      );
      
      template <bool useSourceOrNCP>
      void volumeIntegral( 
        double* restrict lduh, 
        const double* restrict const lFhi,
        const double* restrict const lShi, //nullptr if not used
        const tarch::la::Vector<DIMENSIONS,double> &inverseDx
      );
      
      void surfaceIntegral( 
        double* restrict lduh, 
        const double* restrict const lFbnd, 
        const tarch::la::Vector<DIMENSIONS,double> &inverseDx
      );
/*
      template <void PDEInitialValues(const double* const x,double* Q)>
      void initialCondition(
        double* restrict luh,
        const tarch::la::Vector<DIMENSIONS,double>& center,
        const tarch::la::Vector<DIMENSIONS,double>& dx
      );
*/
      template <void PDESolutionAdjustment(const double* const x,const double J_w,const double t,const double dt,double* Q)> 
      void adjustSolution(
      double* luh,
      const tarch::la::Vector<DIMENSIONS,double>& center,
      const tarch::la::Vector<DIMENSIONS,double>& dx,
      const double t,
      const double dt
      );

      template <bool useCoefficientMatrix, void PDEEigenvalues(const double* const Q, const int normalNonZero, double* lambda), void PDEmatrixb(const double* const Q, const int normalNonZero, double* Bn)>
      void riemannSolver( 
        double* restrict lFbndL,
        double* restrict lFbndR,
        const double* restrict const lQbndL,
        const double* restrict const lQbndR,
        const double dt,
        const int normalNonZero
{% if useDeepProfiler %}
        , exahype::profilers::Profiler* profiler
{% endif %}
      );

      template <void PDEEigenvalues(const double* const Q, const int normalNonZero, double* lambda)>
      double stableTimeStepSize(
        const double* restrict const luh,
        const tarch::la::Vector<DIMENSIONS,double>& inverseDx
      );

      template <void PDEboundaryValues(const double* const x, const double t, const double dt, const int faceIndex, const int normalNonZero, const double* const fluxIn, const double* const stateIn, double* fluxOut, double* stateOut)>
      void boundaryConditions(
        double* fluxOut, 
        double* stateOut, 
        const double* const fluxIn, 
        const double* const stateIn, 
        const tarch::la::Vector<DIMENSIONS, double>& cellCentre, 
        const tarch::la::Vector<DIMENSIONS,double>& cellSize, 
        const double t,const double dt, 
        const int faceIndex, 
        const int normalNonZero 
      );

    }
  }
}

#include "kernels/aderdg/optimised/adjustSolution.cpph"

#include "kernels/aderdg/optimised/stableTimeStepSize.cpph"

{% if isLinear %}
#include "kernels/aderdg/optimised/cauchyKovalewski.cpph"
{% else%}
#include "kernels/aderdg/optimised/picard.cpph"
{% endif %}

#include "kernels/aderdg/optimised/predictor.cpph"

#include "kernels/aderdg/optimised/volumeIntegral.cpph"

#include "kernels/aderdg/optimised/riemannSolver.cpph"

#include "kernels/aderdg/optimised/ConfigurationParameters.cpph"

#include "kernels/aderdg/optimised/boundaryConditions.cpph"

#endif // EXAHYPE_KERNELS_OPTIMISED_KERNELS_H_
