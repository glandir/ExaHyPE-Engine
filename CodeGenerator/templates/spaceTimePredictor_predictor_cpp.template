{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include <algorithm>
#include <cstring>
#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/Quadrature.h"

void {{codeNamespace}}::predictorNonlinear(
        const double* restrict const lQi, 
        const double* restrict const lFi,
        const double* restrict const lSi, //nullptr if not used
        double* restrict lQhi,
        double* restrict lFhi,
        double* restrict lShi //nullptr if not used
) {
  // Immediately compute the time - averaged space - time polynomials

#ifdef __INTEL_COMPILER
  __assume_aligned(lQi, ALIGNMENT);
  __assume_aligned(lQhi, ALIGNMENT);
{% if useFlux %}
  __assume_aligned(lFi, ALIGNMENT);
  __assume_aligned(lFhi, ALIGNMENT);
{% endif %}
  __assume_aligned(weights1, ALIGNMENT);
{% if useSourceOrNCP %}
  __assume_aligned(lSi, ALIGNMENT);
  __assume_aligned(lShi, ALIGNMENT);
{% endif %}
#endif  

  std::memset(lQhi, 0, {{(nDof**nDim)*nDataPad    }} * sizeof(double));
{% if useFlux %}
  std::memset(lFhi, 0, {{nDim*(nDof**nDim)*nVarPad}} * sizeof(double));
{% endif %}
{% if useSourceOrNCP %}
  std::memset(lShi, 0, {{(nDof**nDim)*nVarPad     }} * sizeof(double));
{% endif %}

  for (int z=0; z<{{nDof3D}}; z++) {
    for (int y=0; y<{{nDof}}; y++) {
      for (int x=0; x<{{nDof}}; x++) {
        
        // Matrix-Vector Products
        for (int m=0; m<{{nDof}}; m++) {
          #pragma simd
          for (int n=0; n<{{nDataPad}}; n++) {
            // Fortran: lQhi(:,x,y,z) = lQi(:,:,x,y,z) * wGPN(:)
            lQhi[((z*{{nDof}}+y)*{{nDof}}+x)*{{nDataPad}}+n] += weights1[m] *
                lQi[(((z*{{nDof3D}}+y)*{{nDof}}+x)*{{nDof}}+m)*{{nDataPad}}+n];
          }
{% if useFlux %}
          #pragma simd
          for (int n=0; n<{{nVarPad}}; n++) {
            // Fortran: lFhi_x(:,x,y,z) = lFh(:,1,x,y,z,:) * wGPN(:)
            lFhi[((z*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{0*nVarPad*(nDof**nDim)}}] += weights1[m] *
                lFi[(((m*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{0*(nDof**nDim)*nDof*nVarPad}}];
          }  
          #pragma simd
          for (int n=0; n<{{nVarPad}}; n++) {
            // Fortran: lFhi_y(:,y,x,z) = lFh(:,2,:x,y,z,:) * wGPN(:)
            lFhi[((z*{{nDof}}+x)*{{nDof}}+y)*{{nVarPad}}+n+{{1*nVarPad*(nDof**nDim)}}] += weights1[m] *
                lFi[(((m*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{1*(nDof**nDim)*nDof*nVarPad}}];
          }  
{% if nDim == 3%}
          #pragma simd
          for (int n=0; n<{{nVarPad}}; n++) {
            // Fortran: lFhi_z(:,z,x,y) = lFh(:,3,x,y,z,:) * wGPN(:)
            lFhi[((y*{{nDof}}+x)*{{nDof}}+z)*{{nVarPad}}+n+{{2*nVarPad*(nDof**nDim)}}] += weights1[m] *
                lFi[(((m*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n+{{2*(nDof**nDim)*nDof*nVarPad}}];
          }
{% endif %}
{% endif %} {# useFlux #}
            
{% if useSourceOrNCP %}
          #pragma simd
          for (int n=0; n<{{nVarPad}}; n++) {
            // Fortran: lFhi_S(:,x,y,z) = lSh(:,x,y,z,:) * wGPN(:)
            lShi[((z*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n] += weights1[m] *
              lSi[(((m*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n];
          }
{% endif %}
        }
      
      }
    }
  }
}