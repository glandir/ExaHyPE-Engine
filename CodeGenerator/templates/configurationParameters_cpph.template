{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}
 
{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

  // Global configuration 
  constexpr int getNumberOfVariable()        {return {{nVar}};}
  constexpr int getNumberOfVariablePadded()  {return {{nVarPad}};}
  
  constexpr int getNumberOfParameter()       {return {{nPar}};}
  
  constexpr int getNumberOfData()            {return {{nData}};}
  constexpr int getNumberOfDataPadded()      {return {{nDataPad}};}
  
  constexpr int getBasisSize()               {return {{nDof}};}
  constexpr int getBasisSizePadded()         {return {{nDofPad}};}
  
  constexpr int getDimension()               {return {{nDim}};}

  constexpr bool isLinear()                  {return {{isLinearCText}};}
  
{% if useLimiter %}
  // Limiter configuration
  constexpr int getBasisSizeLimiter()        {return {{nDofLim}};}
  constexpr int getBasisSizeLimiterPadded()  {return {{nDofLimPad}};}
  constexpr int getGhostLayerWidth()         {return {{ghostLayerWidth}};}
{% endif %}

{% if isLinear %}  
  {% set lQiSize = nDataPad*(nDof**nDim)*(1+nDof) %}
  {% set lFiSize = nVarPad*(nDof**(nDim+1))*(2*nDim+1) %}
{% else %}
  {% set lQiSize = nDataPad*(nDof**(nDim+1)) %}
{% if useFlux %}
  {% set lFiSize = nVarPad*(nDof**(nDim+1))*nDim %}
{% else %}
  {% set lFiSize = -1 %}
{% endif %}
{% endif %}
{% if (not isLinear and useNCP) or useSource %}
  {% set lSiSize = nVarPad*(nDof**(nDim+1)) %}
{% else %}
  {% set lSiSize = -1 %}
{% endif %}
{% if useNCP %}
  {% set gradQSize = nVarPad*(nDof**(nDim+1))*(nDim+1) %}
{% else %}
  {% set gradQSize = -1 %}
{% endif %}
  {% set lQhiSize = nDataPad*(nDof**nDim) %}
{% if useFlux %}
  {% set lFhiSize = nVarPad*(nDof**nDim)*nDim %}
{% else %}
  {% set lFhiSize = -1 %}
{% endif %}
{% if (not isLinear and useNCP) or useSource %}
  {% set lShiSize = nVarPad*(nDof**nDim) %}
{% else %}
  {% set lShiSize = -1 %}
{% endif %}
{% if usePointSources %}
  {% set PSiSize = (nDof+1)*(nDof**nDim)*nVarPad %}
{% else%}
  {% set PSiSize = -1 %}
{% endif %}
  {% set BndFaceSize = nDataPad*(nDof*nDof3D) %}
  {% set BndFaceTotalSize = 2*nDim*nDataPad*(nDof*nDof3D) %}
  {% set BndFluxSize = nVarPad*(nDof*nDof3D) %}
  {% set BndFluxTotalSize = 2*nDim*nVarPad*(nDof*nDof3D) %}

  // Array sizes
  constexpr int getlQiSize()   {return {{lQiSize}};}
{# //TODO JMG check useFlux and fix for linear #}
  constexpr int getlFiSize()   {return {{lFiSize}};} 
  constexpr int getlSiSize()   {return {{lSiSize}};}
  constexpr int getgradQSize() {return {{gradQSize}};}
  constexpr int getlQhiSize()  {return {{lQhiSize}};}
  constexpr int getlFhiSize()  {return {{lFhiSize}};}
  constexpr int getlShiSize()  {return {{lShiSize}};}
  constexpr int getPSiSize()   {return {{PSiSize}};}

  constexpr int getBndFaceSize()      {return {{BndFaceSize}};} // == QR/QL size
  constexpr int getBndFaceTotalSize() {return {{BndFaceTotalSize}};} // == lQhbnd size
  constexpr int getBndFluxSize()      {return {{BndFluxSize}};} // == FR/FL size
  constexpr int getBndFluxTotalSize() {return {{BndFluxTotalSize}};} // == lFhbnd size

  //Shifts for fusedSTPVI local memory
{% set shift = 0 %}  
  constexpr int getlQiShift()   {return {{shift}};}
{% set shift = shift+lQiSize %}  
{%- if useFlux %}
  constexpr int getlFiShift()   {return {{shift}};}
{% set shift = shift+lFiSize %} 
{%- endif %}
{%- if (not isLinear and useNCP) or useSource %}
  constexpr int getlSiShift()   {return {{shift}};}
{% set shift = shift+lSiSize %} 
{%- endif %}
  constexpr int getlQhiShift()  {return {{shift}};}
{% set shift = shift+lQhiSize %}
{%- if useFlux %}
  constexpr int getlFhiShift()  {return {{shift}};}
{% set shift = shift+lFhiSize %}
{%- endif %}
{%- if (not isLinear and useNCP) or useSource %}
  constexpr int getlShiShift()  {return {{shift}};}
{% set shift = shift+lShiSize %}
{%- endif %}
{%- if useNCP %}
  constexpr int getgradQShift() {return {{shift}};}
{% set shift = shift+gradQSize %}
{%- endif %}
{%- if not isLinear %}
  constexpr int getrhsShift()   {return {{shift}};} //Same size as lQi
{% set shift = shift+lQiSize %} 
{% endif %}
{%- if usePointSources %} 
  constexpr int getPSiShift()   {return {{shift}};}
{% set shift = shift+PSiSize %}
  constexpr int getPSderivativesShift() {return {{shift}};} //same size as PSi
{% set shift = shift+PSiSize %} 
{%- endif %}

  constexpr int getFusedSTPVISize() {return {{shift}};}
  
  //Shifts for BoundaryConditions
{% set shift2 = 0 %} 
  constexpr int getBndFaceShift() {return {{shift2}};}
{% set shift2 = shift2+BndFaceSize %}   
  constexpr int getBndFluxShift()  {return {{shift2}};}
{% set shift2 = shift2+BndFluxSize %}  
  
  constexpr int getBoundaryConditionsSize() {return {{shift2}};}

{% for namespaceName in codeNamespaceList %}
}
{% endfor %}
