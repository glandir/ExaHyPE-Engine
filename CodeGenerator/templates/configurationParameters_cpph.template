{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}
 
{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

  constexpr int getNumberOfVariable()        {return {{nVar}};}
  constexpr int getNumberOfVariablePadded()  {return {{nVarPad}};}
  
  constexpr int getNumberOfParameter()       {return {{nPar}};}
  
  constexpr int getNumberOfData()            {return {{nData}};}
  constexpr int getNumberOfDataPadded()      {return {{nDataPad}};}
  
  constexpr int getBasisSize()               {return {{nDof}};}
  constexpr int getBasisSizePadded()         {return {{nDofPad}};}
  
  constexpr int getDimension()               {return {{nDim}};}

  constexpr bool isLinear()                  {return {{isLinearCText}};}

{% if isLinear %}  
  constexpr int getlQiSize()      {return {{nDataPad*(nDof**nDim)*(1+nDof)}};} // == lQi size
  constexpr int getlFiSize()      {return {{nVarPad*(nDof**(nDim+1))*(2*nDim+1)}};} // == lFi size //TODO JMG check useFlux and fix
{% else %}
  constexpr int getlQiSize()      {return {{nDataPad*(nDof**(nDim+1))}};} // == lQi size
{% if useFlux %}
  constexpr int getlFiSize() {return {{nVarPad*(nDof**(nDim+1))*nDim}};} // == lFi size
{% else %}
  constexpr int getlFiSize() {return -1;} // == lFi size
{% endif %}
{% endif %}
  constexpr int getlSiSize() {return {{nVarPad*(nDof**(nDim+1))}};} // == lSi size
{% if useNCP %}
  constexpr int getgradQSize() {return {{nVarPad*(nDof**(nDim+1))*(nDim+1)}};} // == gradQ size
{% else %}
  constexpr int getgradQSize() {return -1;} // == gradQ size, unused because !useNCP so -1 to not allocate
{% endif %}
{% if noTimeAveraging %}
  constexpr int getlQhiSize()               {return -1;} // == lQhi size, unused because noTimeAveraging so -1 to not allocate
  constexpr int getlFhiSize()           {return -1;} // == lFhi size, unused because noTimeAveraging so -1 to not allocate
{% else %}
  constexpr int getlQhiSize()               {return {{nDataPad*(nDof**nDim)}};}  // == lQhi size
{% if useFlux %}
  constexpr int getlFhiSize()           {return {{nVarPad*(nDof**nDim)*nDim}};} // == lFhi size
{% else %}
  constexpr int getlFhiSize()           {return -1;} // == lFhi size, unused
{% endif %}
  constexpr int getlShiSize()           {return  {{nVarPad*(nDof**nDim)}};} // == lShi size
{% endif %}
{% if usePointSources %}
  constexpr int getPSiSize()      {return {{(nDof+1) * (nDof ** nDim) * nVarPad}};} // == PSi (and forceVectorSourceN) size
{% else%}
  constexpr int getPSiSize()      {return -1;} //unused, not allocated
{% endif %}

  constexpr int getBndFaceSize()                    {return {{nDataPad*(nDof*nDof3D)}};} // == QR/QL size
  constexpr int getBndTotalSize()                   {return {{2*nDim*nDataPad*(nDof*nDof3D)}};} // == lQhbnd size
  constexpr int getBndFluxSize()                    {return {{nVarPad*(nDof*nDof3D)}};} // == FR/FL size
  constexpr int getBndFluxTotalSize()               {return {{2*nDim*nVarPad*(nDof*nDof3D)}};} // == lFhbnd size

{% for namespaceName in codeNamespaceList %}
}
{% endfor %}
