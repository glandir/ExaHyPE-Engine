{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}
 
{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

  constexpr int getNumberOfVariable()        {return {{nVar}};}
  constexpr int getNumberOfVariablePadded()  {return {{nVarPad}};}
  
  constexpr int getNumberOfParameter()       {return {{nPar}};}
  
  constexpr int getBasisSize()               {return {{nDof}};}
  constexpr int getBasisSizePadded()         {return {{nDofPad}};}
  
  constexpr int getDimension()               {return {{nDim}};}

  constexpr bool isLinear()                  {return {{isLinearCText}};}

{% if isLinear %}  
  //TODO JMG initialize correct size for linear case
{% else %}
  constexpr int getTempSpaceTimeUnknownsSize()      {return {{nVarPad*(nDof**(nDim+1))}};} // == lQh size
  constexpr int getTempSpaceTimeFluxUnknowns0Size() {return {{nVarPad*(nDof**(nDim+1))*(nDim+1)}};} // == lFh size
{% if useNCP %}
  constexpr int getTempSpaceTimeFluxUnknowns1Size() {return {{nVarPad*(nDof**(nDim+1))*(nDim+1)}};} // == gradQ size
{% else %}
  constexpr int getTempSpaceTimeFluxUnknowns1Size() {return -1;} // == gradQ size, unused because !useNCP so -1 to not allocate
{% endif %}
{% endif %}
{% if noTimeAveraging %}
  constexpr int getTempUnknownsSize()               {return -1;} // == lQhi size, unused because noTimeAveraging so -1 to not allocate
  constexpr int getTempFluxUnknownsSize()           {return -1;} // == lFhi size, unused because noTimeAveraging so -1 to not allocate
{% else %}
  constexpr int getTempUnknownsSize()               {return {{nVarPad*(nDof**nDim)}};}  // == lQhi size
  constexpr int getTempFluxUnknownsSize()           {return {{nVarPad*(nDof**nDim)*(nDim+1)}};} // == lFhi size
{% endif %}
{% if usePointSource %}
  constexpr int getTempPointForceSourcesSize()      {return {{nVarPad*(nDof**(nDim+1))*(nDim+1)}};} //same size as lFh
{% else%}
  constexpr int getTempPointForceSourcesSize()      {return -1;} //unused, not allocated
{% endif %}

  constexpr int getBndFaceSize()                    {return {{nVarPad*(nDof*nDof3D)}};} // == FR/FL, QR/QL size
  constexpr int getBndTotalSize()                   {return {{2*nDim*nVarPad*(nDof*nDof3D)}};} // == lFhbnd/lQhbnd size
  constexpr int getTempStateSizedVectorsSize()      {return {{nVarWithParPad}};}

{% for namespaceName in codeNamespaceList %}
}
{% endfor %}

