{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}
 
namespace kernels {
  namespace aderdg {
    namespace optimised {

      constexpr int getNumberOfVariable()        {return {{nVar}};}
      constexpr int getNumberOfVariablePadded()  {return {{nVarPad}};}
      
      constexpr int getNumberOfParameter()       {return {{nPar}};}
      
      constexpr int getBasisSize()               {return {{nDof}};}
      constexpr int getBasisSizePadded()         {return {{nDofPad}};}
      
      constexpr int getDimension()               {return {{nDim}};}
	  
      constexpr bool isLinear()                  {return {{isLinearCText}};}

{% if isLinear %}  
      //TODO JMG initialize correct size for linear case
{% else %}
      constexpr int getTempSpaceTimeUnknownsSize()     {return {{nVarPad*(nDof**(nDim+1))}};} // == lQh size
      constexpr int getTempSpaceTimeFluxUnknownsSize() {return {{nVarPad*(nDof**(nDim+1))*(nDim+1)}};} // == lFh size
{% endif %}
      constexpr int getTempUnknownsSize()              {return {{nVarPad*(nDof**nDim)}};}  // == lQhi size
      constexpr int getTempFluxUnknownsSize()          {return {{nVarPad*(nDof**nDim)*(nDim+1)}};} // == lFhi size
      constexpr int getBndFaceSize()                   {return {{nVar*bndBlockSize}};} // == FR/FL, QR/QL size
      constexpr int getBndTotalSize()                  {return {{2*nDim*nVar*bndBlockSize}};} // == lFbnd/lQbnd size
    }
  }
}

