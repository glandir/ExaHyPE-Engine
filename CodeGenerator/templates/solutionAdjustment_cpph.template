{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include "kernels/aderdg/optimised/Kernels.h"
#include "kernels/aderdg/optimised/GaussLegendreQuadrature.h"

template <void PDESolutionAdjustment(const double* const x,const double J_w,const double t,const double dt,double* Q)> 
  void kernels::aderdg::optimised::solutionAdjustment(
  double* luh,
  const tarch::la::Vector<DIMENSIONS,double>& center,
  const tarch::la::Vector<DIMENSIONS,double>& dx,
  const double t,
  const double dt
) {
  double x[{{nDimPad}}];
  int pos = 0;

{% if nDim == 2 %} 
  for(int j=0;j<{{nDof}};j++) {
    x[1] = center[1] + dx[1] * (gaussLegendreNodes[{{order}}][j] - 0.5);
    for(int i=0;i<{{nDof}};i++) {
      x[0] = center[0] + dx[0] * (gaussLegendreNodes[{{order}}][i] - 0.5);

      PDESolutionAdjustment(x, weights3[pos], t, dt, &luh[pos*{{nVar}}]);
      pos++;
    }
  }
{% endif %}
{% if nDim == 3 %} 
  for(int k=0;k<{{nDof}};k++) {
    x[2] = center[2] + dx[2] * (gaussLegendreNodes[{{order}}][k] - 0.5);
    for(int j=0;j<{{nDof}};j++) {
      x[1] = center[1] + dx[1] * (gaussLegendreNodes[{{order}}][j] - 0.5);
      for(int i=0;i<{{nDof}};i++) {
        x[0] = center[0] + dx[0] * (gaussLegendreNodes[{{order}}][i] - 0.5);

        PDESolutionAdjustment(x, weights3[pos], t, dt, &luh[pos*{{nVar}}]);
        pos++;
      }
    }
  }
{% endif %}
}

