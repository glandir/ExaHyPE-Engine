{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include <cstring>
 
#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/Quadrature.h"
#include "{{pathToOptKernel}}/DGMatrices.h"
//#include "kernels/aderdg/optimised/asm_extrapolatedPredictor.c"
 
void {{codeNamespace}}::extrapolatorNonlinear(
        const double* restrict const lQi, 
        const double* restrict const lFi,
        double* restrict lQhbnd, 
        double* restrict lFhbnd) {
  // Compute the boundary-extrapolated values for Q and F*n

#ifdef __INTEL_COMPILER
  __assume_aligned(lQhbnd, ALIGNMENT);
  __assume_aligned(lFhbnd, ALIGNMENT);
  __assume_aligned(lQi, ALIGNMENT);
  __assume_aligned(lFi, ALIGNMENT);
  __assume_aligned(FRCoeff, ALIGNMENT);
  __assume_aligned(FLCoeff, ALIGNMENT);
#endif
  
  std::memset(lQhbnd, 0, {{2*nDim*nDataPad*nDof*nDof3D}} * sizeof(double));
  std::memset(lFhbnd, 0, {{2*nDim*nVarPad*nDof*nDof3D }} * sizeof(double));

  // x-direction: face 1 (left) and face 2 (right)
  for (int yz = 0; yz < {{nDof*nDof3D}}; yz++) {
    // Matrix-Vector Products
    for (int x = 0; x < {{nDof}}; x++) {
      for (int m = 0; m < {{nDof}}; m++) {
        #pragma simd
        for (int n = 0; n < {{nDataPad}}; n++) {    
          // Fortran: lQhbnd(:,j,i,1) = lQhi(:,:,j,i) * FLCoeff(:)
          lQhbnd[n+{{nDataPad}}*yz+{{0*nDataPad*nDof*nDof3D}}] +=
              FLCoeff[x] * weights1[m] * lQi[n+{{nDataPad}}*(m+{{nDof}}*(x+{{nDof}}*yz))];

          // Fortran: lQhbnd(:,j,i,2) = lQhi(:,:,j,i) * FRCoeff(:)
          lQhbnd[n+{{nDataPad}}*yz+{{1*nDataPad*nDof*nDof3D}}] +=
              FRCoeff[x] * weights1[m] * lQi[n+{{nDataPad}}*(m+{{nDof}}*(x+{{nDof}}*yz))];
{% if nDataPad != nVarPad %}
        }
        #pragma simd
        for (int n = 0; n < {{nVarPad}}; n++) {  
{% endif %}
          // Fortran: lFhbnd(:,j,i,1) = lFhi_x(:,:,j,i) * FLCoeff(:)
          lFhbnd[n+{{nVarPad}}*yz+{{0*nVarPad*nDof*nDof3D}}] +=
              FLCoeff[x] * weights1[m] * lFi[n+{{nVarPad}}*(x+{{nDof}}*(yz+{{nDof*nDof3D}}*m))];

          // Fortran: lFhbnd(:,j,i,2) = lFhi_x(:,:,j,i) * FRCoeff(:)
          lFhbnd[n+{{nVarPad}}*yz+{{1*nVarPad*nDof*nDof3D}}] +=
              FRCoeff[x] * weights1[m] * lFi[n+{{nVarPad}}*(x+{{nDof}}*(yz+{{nDof*nDof3D}}*m))];
        }
      }
    }
  }

  // y-direction: face 3 (left) and face 4 (right)
  for (int xz = 0; xz < {{nDof*nDof3D}}; xz++) {  
    // Matrix-Vector Products
    for (int y = 0; y < {{nDof}}; y++) {
      {% if nDim==3 %}
      const int z = xz / {{nDof}};
      const int x = xz % {{nDof}};
      {% else %}
      const int z = 0;
      const int x = xz;
      {% endif %}
      for (int m = 0; m < {{nDof}}; m++) {
        #pragma simd
        for (int n = 0; n < {{nDataPad}}; n++) {
          // Fortran: lQhbnd(:,j,i,3) = lQhi(:,j,:,i) * FLCoeff(:)
          lQhbnd[n+{{nDataPad}}*xz+{{2*nDataPad*nDof*nDof3D}}] +=
              FLCoeff[y]* weights1[m] * lQi[n+{{nDataPad}}*(m+{{nDof}}*(x+{{nDof}}*(y+{{nDof3D}}*z)))];

          // Fortran: lQhbnd(:,j,i,4) = lQhi(:,j,:,i) * FRCoeff(:)
          lQhbnd[n+{{nDataPad}}*xz+{{3*nDataPad*nDof*nDof3D}}] +=
              FRCoeff[y]* weights1[m] * lQi[n+{{nDataPad}}*(m+{{nDof}}*(x+{{nDof}}*(y+{{nDof3D}}*z)))];
{% if nDataPad != nVarPad %}
        }
        #pragma simd
        for (int n = 0; n < {{nVarPad}}; n++) {  
{% endif %}
          // Fortran: lFhbnd(:,j,i,3) = lFhi_y(:,:,j,i) * FLCoeff(:)
          lFhbnd[n+{{nVarPad}}*xz+{{2*nVarPad*nDof*nDof3D}}] +=
              FLCoeff[y] * weights1[m] * lFi[n+{{nVarPad}}*(x+{{nDof}}*(y+{{nDof}}*(z+{{nDof3D}}*m)))+{{1*(nDof**nDim)*nDof*nVarPad}}];

          // Fortran: lFhbnd(:,j,i,4) = lFhi_y(:,:,j,i) * FRCoeff(:)
          lFhbnd[n+{{nVarPad}}*xz+{{3*nVarPad*nDof*nDof3D}}] +=
              FRCoeff[y] * weights1[m] * lFi[n+{{nVarPad}}*(x+{{nDof}}*(y+{{nDof}}*(z+{{nDof3D}}*m)))+{{1*(nDof**nDim)*nDof*nVarPad}}];
        }
      }
    }
  } 
{% if nDim==3 %}

  // z-direction: face 5 (left) and face 6 (right)
  for (int xy = 0; xy < {{nDof*nDof}}; xy++) {
    // Matrix-Vector Products
    for (int z = 0; z < {{nDof}}; z++) {
      for (int m = 0; m < {{nDof}}; m++) {
        #pragma simd
        for (int n = 0; n < {{nDataPad}}; n++) {
          // Fortran: lQhbnd(:,j,i,5) = lQhi(:,j,i,:) * FLCoeff(:)
          lQhbnd[n+{{nDataPad}}*xy+{{4*nDataPad*nDof*nDof3D}}] +=
              FLCoeff[z] * weights1[m] * lQi[n+{{nDataPad}}*(m+{{nDof}}*(xy+{{nDof*nDof}}*z))];

          // Fortran: lQhbnd(:,j,i,6) = lQhi(:,j,i,:) * FRCoeff(:)
          lQhbnd[n+{{nDataPad}}*xy+{{5*nDataPad*nDof*nDof3D}}] +=
              FRCoeff[z] * weights1[m] * lQi[n+{{nDataPad}}*(m+{{nDof}}*(xy+{{nDof*nDof}}*z))];
{% if nDataPad != nVarPad %}
        }
        #pragma simd
        for (int n = 0; n < {{nVarPad}}; n++) {  
{% endif %}
          // Fortran: lFhbnd(:,j,i,5) = lFhi_z(:,:,j,i) * FLCoeff(:)
          lFhbnd[n+{{nVarPad}}*xy+{{4*nVarPad*nDof*nDof3D}}] +=
              FLCoeff[z] * weights1[m] * lFi[n+{{nVarPad}}*(xy+{{nDof*nDof}}*(z+{{nDof}}*m))+{{2*(nDof**nDim)*nDof*nVarPad}}];

          // Fortran: lFhbnd(:,j,i,6) = lFhi_z(:,:,j,i) * FRCoeff(:)
          lFhbnd[n+{{nVarPad}}*xy+{{5*nVarPad*nDof*nDof3D}}] +=
              FRCoeff[z] * weights1[m] * lFi[n+{{nVarPad}}*(xy+{{nDof*nDof}}*(z+{{nDof}}*m))+{{2*(nDof**nDim)*nDof*nVarPad}}];
        }
      }
    }
  }
{% endif %} 
}