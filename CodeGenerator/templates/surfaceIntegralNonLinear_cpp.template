{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include <tarch/la/Vector.h>

#include <cstring>
#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/DGMatrices.h"
#include "{{pathToOptKernel}}/Quadrature.h"


void {{codeNamespace}}::surfaceIntegral( 
  double* restrict lduh, 
  const double* restrict const lFhbnd, 
  const tarch::la::Vector<DIMENSIONS,double> &inverseDx
) {

#ifdef __INTEL_COMPILER
  __assume_aligned(FRCoeff, ALIGNMENT);
  __assume_aligned(FLCoeff, ALIGNMENT);
  __assume_aligned(weights2, ALIGNMENT);
  __assume_aligned(lFhbnd, ALIGNMENT);
  __assume_aligned(lduh, ALIGNMENT);
#endif

  // x faces
  for (int yz = 0; yz < {{nDof*nDof3D}}; yz++) {
    const double weight = weights2[yz] * inverseDx[0];
    for (int x = 0; x < {{nDof}}; x++) {
      #pragma simd
      for (int n = 0; n < {{nVar}}; n++) {
        // left flux minus right flux
        lduh[n+{{nVar}}*(x+{{nDof}}*yz)] -= weight *
            (lFhbnd[n+{{nVarPad}}*yz+{{bndFaceSize*1}}] * FRCoeff[x] -
             lFhbnd[n+{{nVarPad}}*yz+{{bndFaceSize*0}}] * FLCoeff[x]);
      }
    }
  }

  // y faces
  
  for (int xz = 0; xz < {{nDof*nDof3D}}; xz++) {
    const double weight = weights2[xz] * inverseDx[1];
{% if nDim == 3 %} {# // xz in [0..nDof*nDof-1], need to extract x and z to compute the correct shift for luh #}
    const int xzLuhIndex = ((xz/{{nDof}})*{{nDof*nDof}} + xz % {{nDof}}) *{{nVar}};
{% else %}
    const int xzLuhIndex = xz*{{nVar}};
{% endif %} {# // ik in [0..nDof-1] <=> k=ik, i=0 #}
    for (int y = 0; y < {{nDof}}; y++) {
      #pragma simd
      for (int n = 0; n < {{nVar}}; n++) {
        // back flux minus front flux
        lduh[n+xzLuhIndex+y*{{nDof*nVar}}] -= weight *
            (lFhbnd[n+{{nVarPad}}*xz+{{bndFaceSize*3}}] * FRCoeff[y] -
             lFhbnd[n+{{nVarPad}}*xz+{{bndFaceSize*2}}] * FLCoeff[y]);
        }
      }
  }
{% if nDim == 3 %}
  // z faces
  for (int xy = 0; xy < {{nDof*nDof}}; xy++) {
    const double weight = weights2[xy] * inverseDx[2];
    for (int z = 0; z < {{nDof}}; z++) {
      #pragma simd
      for (int n = 0; n < {{nVar}}; n++) {
        // bottom flux minus top flux
        lduh[n+{{nVar}}*(xy+{{nDof*nDof}}*z)] -= weight *
            (lFhbnd[n+{{nVarPad}}*xy+{{bndFaceSize*5}}] * FRCoeff[z] -
             lFhbnd[n+{{nVarPad}}*xy+{{bndFaceSize*4}}] * FLCoeff[z]);
      }
    }
  }
{% endif %}
}

