{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include <cstring>
 
#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/Quadrature.h"
#include "{{pathToOptKernel}}/DGMatrices.h"

#include "{{solverHeader}}"

#include "kernels/DGBasisFunctions.h"

void {{codeNamespace}}::deltaDistribution(
    {{solverName}}& solver,
    const double t,
    const double dt,
    const tarch::la::Vector<DIMENSIONS, double>& center,
    const tarch::la::Vector<DIMENSIONS, double>& dx,
    double** pointForceSources //memory space for forceVector
) { 
  double x0[{{nDim}}];
  double x1[{{nDim}}];
  
  const double dxProd = dx[0] * dx[1]{{' * dx[2]' if nDim==3}};
  const double inDx[{{nDim}}] = {1./dx[0], 1./dx[1]{{', 1./dx[2]' if nDim==3}}};

  double* PSi                = pointForceSources[0]; 
  double* forceVectorSourceN = pointForceSources[1];

  std::memset(PSi,0 , {{(nDof+1)*(nDof**nDim)*nVarPad}}*sizeof(double));
  
  //loop over all point sources
  for (int m =0 ; m < {{nPointSources}} ; m++){
    std::memset(forceVectorSourceN, 0, {{(nDof+1)*(nDof**nDim)*nVarPad}}*sizeof(double));      
    //loop over all quadrature point
    for (int tl = 0; tl < {{nDof+1}}; tl++) { // time loop
      double tn;
      if (tl == 0){
        tn = t;
      }
      else {
        tn = dt* nodes[tl-1] + t;
      }
{% if nDim==3 %}
      for (int z = 0; z < {{nDof}}; z++) {   //z loop
        double node = nodes[z];       
        x1[2] = center[2] + dx[2] * (node - 0.5);
{% else %}  
      const int z = 0;
{% endif %}
        for (int y = 0; y < {{nDof}}; y++) {  //y loop

          double node = nodes[y];      

          x1[1] = center[1] + dx[1] * (node - 0.5);
          for (int x = 0; x < {{nDof}}; x++) {  //x loop
            double node = nodes[x];      
            x1[0] = center[0] + dx[0] * (node - 0.5);

            // get the source vector located at x0 = (x,y,z) and at tn = t; and at the quadrature nodes tn
            solver.{{solverName}}::pointSource(x1, tn, dt, &forceVectorSourceN[(((tl*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}], &x0[0], m);

            // position the source inside the dG cell
            const double xRef[{{nDim}}] = {
                                            inDx[0]*(x0[0] - center[0]) + 0.5
                                            , inDx[1]*(x0[1] - center[1]) + 0.5
{% if nDim==3 %}
                                            , inDx[2]*(x0[2] - center[2]) + 0.5
{% endif %}
                                           };
            if (   xRef[0] >= 0. && xRef[0] <= 1.0
                && xRef[1] >= 0. && xRef[1] <= 1.0 
{% if nDim==3 %}
                && xRef[2] >= 0. && xRef[2] <= 1.0
{% endif %}
            ) {

              const double basisFunc = kernels::basisFunctions[{{nDof-1}}][x](xRef[0])
                               * kernels::basisFunctions[{{nDof-1}}][y](xRef[1])
{% if nDim==3 %}
                               * kernels::basisFunctions[{{nDof-1}}][z](xRef[2])
{% endif %}
                               / (weights3[(z*{{nDof3D}}+y)*{{nDof}}+x]*dxProd);       
              #pragma simd
              for (int n = 0; n < {{nVarPad}}; n++) {
                PSi[(((tl*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n] += basisFunc*forceVectorSourceN[(((tl*{{nDof3D}}+z)*{{nDof}}+y)*{{nDof}}+x)*{{nVarPad}}+n];                                             
              } // n loop
            }  // endif xRef inside the domain
          }// x loop
        }// y loop
{% if nDim==3 %}
      }// z loop
{% endif %}
    }// time loop
  }
}
