{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include <cstring>
#include <cmath>
#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/DGMatrices.h"
#include "{{pathToOptKernel}}/GaussLegendreQuadrature.h"

#include "{{solverHeader}}"

void {{codeNamespace}}::riemannSolver( 
  {{solverName}}& solver,
  double* restrict lFhbndL,
  double* restrict lFhbndR,
  const double* restrict const lQhbndL,
  const double* restrict const lQhbndR,
  const double dt,
  const int normalNonZero
{% if useDeepProfiler %}
  , exahype::profilers::Profiler* profiler
{% endif %}
) {

#ifdef __INTEL_COMPILER
  __assume_aligned(weights2, ALIGNMENT);
  __assume_aligned(lFhbndL, ALIGNMENT);
  __assume_aligned(lFhbndR, ALIGNMENT);
  __assume_aligned(lQhbndL, ALIGNMENT);
  __assume_aligned(lQhbndR, ALIGNMENT);
#endif

  double tmp_bnd[{{nVarPad*nDof*nDof3D}}] __attribute__((aligned(ALIGNMENT)));
  double QavL[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.};
  double QavR[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.};
  
  for(int i=0;i<{{nDof*nDof3D}};i++) {
    #pragma simd
    for(int n=0; n<{{nVarPad}}; n++) {
      QavL[n] += weights2[i] * lQhbndL[n+{{nVarPad}}*i];
    }
    #pragma simd
    for(int n=0; n<{{nVarPad}}; n++) {
      QavR[n] += weights2[i] * lQhbndR[n+{{nVarPad}}*i];
    }
  }
  
  
  double lambdaL[{{nVarPad}}] __attribute__((aligned(ALIGNMENT)));
#ifdef USE_IPO
  #pragma forceinline recursive
#endif
  solver.{{solverName}}::eigenvalues(&QavL[0], normalNonZero, &lambdaL[0]);
  double lambdaR[{{nVarPad}}] __attribute__((aligned(ALIGNMENT)));
#ifdef USE_IPO
  #pragma forceinline recursive
#endif
  solver.{{solverName}}::eigenvalues(&QavR[0], normalNonZero, &lambdaR[0]);
  
  double smax = 0.;
  for (int ivar = 0; ivar < {{nVar}}; ivar++) {
    smax = std::max(smax, std::max(fabs(lambdaL[ivar]), fabs(lambdaR[ivar])));
  }
  
  
  #pragma simd
  for(int i=0; i<{{nVarPad*nDof*nDof3D}}; i++) {
    tmp_bnd[i] = smax * (lQhbndL[i]-lQhbndR[i]);
  }
  
  #pragma simd
  for(int i=0; i<{{nVarPad*nDof*nDof3D}}; i++) {
    lFhbndL[i] += lFhbndR[i];
  }
  
  #pragma simd
  for(int i=0; i<{{nVarPad*nDof*nDof3D}}; i++) {
    lFhbndL[i] = 0.5 * (lFhbndL[i] + tmp_bnd[i]) ;
  }
  std::memcpy(lFhbndR, lFhbndL, {{nVarPad*nDof*nDof3D}} * sizeof(double));   
  
{% if useNCP %}
  //add non-conservative product part
  double Qavg[{{nVar}}] __attribute__((aligned(ALIGNMENT))) = {0.};
  double gradQ[{{nDim*nVar}}] __attribute__((aligned(ALIGNMENT))) = {0.};
  double ncp[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.0};
  
  for(int ij=0; ij<{{nDof*nDof3D}}; ij++) {
    #pragma simd
    for(int n=0; n < {{nVar}}; n++) {
       Qavg[n] = 0.5 * (lQhbndL[n+{{nVarPad}}*ij] + lQhbndR[n+{{nVarPad}}*ij]);
       gradQ[n+{{nVar}}*normalNonZero] = lQhbndR[n+{{nVarPad}}*ij] - lQhbndL[n+{{nVarPad}}*ij];
    }
#ifdef USE_IPO
    #pragma forceinline recursive
#endif
    solver.{{solverName}}::nonConservativeProduct(Qavg, gradQ, ncp);
    #pragma simd
    for(int n=0; n < {{nVarPad}}; n++) {
      lFhbndR[n+{{nVarPad}}*ij] -= 0.5*ncp[n];
      lFhbndL[n+{{nVarPad}}*ij] += 0.5*ncp[n];
    }
  }
{% endif %}

}