{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include <algorithm>
#include <cstring>
#include <cmath>

#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/DGMatrices.h"
#include "{{pathToOptKernel}}/Quadrature.h"

#include "{{solverHeader}}"

void {{codeNamespace}}::riemannSolver( 
  {{solverName}}& solver,
  double* restrict FL, double* restrict FR,
  const double* restrict const QL, const double* restrict const QR,
  const double dt,
  const int direction
{% if useDeepProfiler %}
  , exahype::profilers::Profiler* profiler
{% endif %}
) {

#ifdef __INTEL_COMPILER
  __assume_aligned(weights2, ALIGNMENT);
  __assume_aligned(FL, ALIGNMENT);
  __assume_aligned(FR, ALIGNMENT);
  __assume_aligned(QL, ALIGNMENT);
  __assume_aligned(QR, ALIGNMENT);
#endif

  double tmp_bnd[{{nVarPad*nDof*nDof3D}}] __attribute__((aligned(ALIGNMENT)));
  double QavL[{{nDataPad}}] __attribute__((aligned(ALIGNMENT))) = {0.0};
  double QavR[{{nDataPad}}] __attribute__((aligned(ALIGNMENT))) = {0.0};
  
  for (int ij = 0; ij < {{nDof*nDof3D}}; ij++) {
    #pragma simd
    for (int n = 0; n < {{nDataPad}}; n++) {
      QavL[n] += weights2[ij] * QL[ij*{{nDataPad}}+n];
      QavR[n] += weights2[ij] * QR[ij*{{nDataPad}}+n];
    }
  }
  
  double lambdaL[{{nVarPad}}] __attribute__((aligned(ALIGNMENT)));
#ifdef USE_IPO
  #pragma forceinline recursive
#endif
  solver.{{solverName}}::eigenvalues(&QavL[0], direction, &lambdaL[0]);
  double lambdaR[{{nVarPad}}] __attribute__((aligned(ALIGNMENT)));
#ifdef USE_IPO
  #pragma forceinline recursive
#endif
  solver.{{solverName}}::eigenvalues(&QavR[0], direction, &lambdaR[0]);
  
  double smax = 0.;
  for (int ivar = 0; ivar < {{nVar}}; ivar++) {
    smax = std::max(smax, std::max(fabs(lambdaL[ivar]), fabs(lambdaR[ivar])));
  }
  
  
  for (int ij = 0; ij < {{nDof*nDof3D}}; ij++){
    #pragma simd
    for (int n = 0; n < {{nVar}}; n++) { //skip parameters
      tmp_bnd[ij*{{nVarPad}}+n] = smax * (QL[ij*{{nVarPad}}+n]-QR[ij*{{nVarPad}}+n]);
    }
  }
  
  #pragma simd
  for (int ijn = 0; ijn < {{nVarPad*nDof*nDof3D}}; ijn++) {
    FL[ijn] = 0.5 * (FL[ijn] + FR[ijn] + tmp_bnd[ijn]);
  }
  std::copy_n(FL, {{nVarPad*nDof*nDof3D}}, FR);   
  
{% if useNCP %}
  //add non-conservative product part
  double Qavg[{{nData}}] __attribute__((aligned(ALIGNMENT))) = {0.0};  {# TODO JMG fix Qavg sized nData but initialized nVar when generic fixed#}
  double gradQ[{{nDim*nVar}}] __attribute__((aligned(ALIGNMENT))) = {0.0};
  double ncp[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.0};

  for (int ij = 0; ij < {{nDof*nDof3D}}; ij++) {
    #pragma simd
    for (int n = 0; n < {{nVar}}; n++) {
       Qavg[n] = 0.5 * (QL[ij*{{nDataPad}}+n] + QR[ij*{{nDataPad}}+n]);
       gradQ[direction*{{nVar}}+n] = QR[ij*{{nDataPad}}+n] - QL[ij*{{nDataPad}}+n];
    }
#ifdef USE_IPO
    #pragma forceinline recursive
#endif
    solver.{{solverName}}::nonConservativeProduct(Qavg, gradQ, ncp);
    #pragma simd
    for (int n = 0; n < {{nVarPad}}; n++) {
      FR[ij*{{nVarPad}}+n] -= 0.5*ncp[n];
      FL[ij*{{nVarPad}}+n] += 0.5*ncp[n];
    }
  }
{% endif %}

}