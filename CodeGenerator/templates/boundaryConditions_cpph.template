{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

//#include "kernels/aderdg/generic/Kernels.h"

#include <algorithm>

#include "kernels/aderdg/optimised/Kernels.h"
#include "kernels/aderdg/optimised/GaussLegendreQuadrature.h"
#include "kernels/aderdg/optimised/DGMatrices.h"

template <void PDEboundaryValues(const double* const x, const double t, const double dt, const int faceIndex, const int normalNonZero, const double* const fluxIn, const double* const stateIn, double* fluxOut, double* stateOut)>
void kernels::aderdg::optimised::boundaryConditions(
                        double* fluxOut,
                        double* stateOut,
                        const double* const fluxIn,
                        const double* const stateIn,
                        const tarch::la::Vector<DIMENSIONS, double>& cellCentre,
                        const tarch::la::Vector<DIMENSIONS,double>& cellSize,
                        const double t,const double dt,
                        const int faceIndex,
                        const int normalNonZero) {
  // Compute if face is "left" (0,2,4) or "right" face (1,2,3).
  const int f = faceIndex-2*normalNonZero;

  // Determine the free directions from the non-zero normal entry.
  int d1 = (3 ^ normalNonZero) / 3; //0->1, 1->0, 2->0 , ^ is bitwise XOR
{% if nDim == 3 %}
  int d2 = 2 - (normalNonZero/2);   //0->2, 1->2, 2->1 
{% endif %}
  
  double x[{{nDim}}];
  x[normalNonZero] = cellCentre[normalNonZero] + (-0.5 + f)*cellSize[normalNonZero];
  double f_in[{{nVar}}];
  double f_out[{{nVar}}];
  double q_in[{{nVar}}];
  double q_out[{{nVar}}];
  
{% if nDim == 2 %}  
  for (int ii = 0; ii < {{nDof}}; ii++) {  // loop over dof
    x[d1] = cellCentre[d1] + cellSize[d1] * (kernels::aderdg::optimised::gaussLegendreNodes[{{nDof-1}}][ii] - 0.5);
{% for iVar in iVar_range_0_nVar %}
    f_in[{{iVar}}] = fluxIn[{{iVar*blockSize}}+ii];
{% endfor %}
{% for iVar in iVar_range_0_nVar %}
    q_in[{{iVar}}] = stateIn[{{iVar*blockSize}}+ii];
{% endfor %}
    PDEboundaryValues(x,t,dt,faceIndex,normalNonZero,
                          &f_in[0],&q_in[0],
                          &f_out[0],&q_out[0]);
{% for iVar in iVar_range_0_nVar %}
    fluxOut[{{iVar*blockSize}}+ii] = f_out[{{iVar}}];
{% endfor %}
{% for iVar in iVar_range_0_nVar %}
    stateOut[{{iVar*blockSize}}+ii] = q_out[{{iVar}}];
{% endfor %}                            
  }
  
{% else %} {# nDim == 3 #}
  for (int jj = 0; jj < {{nDof}}; jj++) {  // loop over dof
    x[d2] = cellCentre[d2] + cellSize[d2] * (kernels::aderdg::optimised::gaussLegendreNodes[{{nDof-1}}][jj] - 0.5);
    for (int ii = 0; ii < {{nDof}}; ii++) {  // loop over dof
      x[d1] = cellCentre[d1] + cellSize[d1] * (kernels::aderdg::optimised::gaussLegendreNodes[{{nDof-1}}][ii] - 0.5); 
{% for iVar in iVar_range_0_nVar %}
    f_in[{{iVar}}] = fluxIn[{{iVar*blockSize}}+jj*{{nDof}}+ii];
{% endfor %}
{% for iVar in iVar_range_0_nVar %}
    q_in[{{iVar}}] = stateIn[{{iVar*blockSize}}+jj*{{nDof}}+ii];
{% endfor %}
    PDEboundaryValues(x,t,dt,faceIndex,normalNonZero,
                            &f_in[0],&q_in[0],
                            &f_out[0],&q_out[0]);
{% for iVar in iVar_range_0_nVar %}
    fluxOut[{{iVar*blockSize}}+jj*{{nDof}}+ii] = f_out[{{iVar}}];
{% endfor %}
{% for iVar in iVar_range_0_nVar %}
    stateOut[{{iVar*blockSize}}+jj*{{nDof}}+ii] = q_out[{{iVar}}];
{% endfor %}  
    }
  }
{% endif %}
}


