{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

// Solve the volume integral 

#include <cstring>

#include "kernels/aderdg/optimised/Kernels.h"
#include "kernels/aderdg/optimised/DGMatrices.h"
#include "kernels/aderdg/optimised/GaussLegendreQuadrature.h"
#include "kernels/aderdg/optimised/CpphGemms.h"

void kernels::aderdg::optimised::volumeIntegral( 
  double* restrict lduh, 
  const double* restrict const lFhi,
  const double* restrict const lShi, //nullptr if not used
  const tarch::la::Vector<DIMENSIONS,double> &inverseDx
) {
  memset(lduh, 0, sizeof(lduh)*{{nVar*(nDof**nDim)}});

#ifdef __INTEL_COMPILER
  __assume_aligned(lFhi, ALIGNMENT);
  __assume_aligned(Kxi_T, ALIGNMENT);
  __assume_aligned(weights3, ALIGNMENT);
  __assume_aligned(weights2, ALIGNMENT);
  __assume_aligned(lduh, ALIGNMENT); //lduh should be aligned, see Solver.h
{% if useSourceOrNCP %}
  __assume_aligned(lShi, ALIGNMENT);
{% endif %}
#endif

  double s_m[{{nDof*nDofPad}}] __attribute__((aligned(ALIGNMENT)));
  
  // Assume equispaced mesh, dx[0] == dx[1] == dx[2]
{% for j in j_seq%} {# if nDim == 2 then j_seq == [0] #}
{% for i in i_seq%}
  #pragma vector aligned
  for(int it=0;it<{{nDof*nDofPad}};it++) 
    s_m[it] = weights2[{{i+j*nDof}}] * inverseDx[0] * Kxi_T[it];

  {{gemm_x}}(&lFhi[{{(j*nDof+i) * nVarPad * nDof}}],&s_m[0],&lduh[{{(j*nDof+i) * nVar * nDof}}]);
  {{gemm_y}}(&lFhi[{{(j*nDof+i) * nVarPad * nDof + lFhi_padY}}],&s_m[0],&lduh[{{(j*nDof*nDof+i) * nVar}}]);
{% if nDim == 3 %} 
  {{gemm_z}}(&lFhi[{{(j*nDof+i) * nVarPad * nDof + lFhi_padZ}}],&s_m[0],&lduh[{{(j*nDof+i) * nVar}}]);
{% endif %}  
{% endfor%}
{% endfor%}

{% if useSourceOrNCP %}
  // source
  for (int ijk = 0; ijk < {{nDof**nDim}}; ijk++) {
    // Fortran: lduh(:,k,j,i) += w * lShi(:,k,j,i)
    #pragma simd
    for (int n = 0; n < {{nVar}}; n++) {
      lduh[n+{{nVar}}*ijk] += weights3[ijk] * lShi[n+{{nVarPad}}*ijk]; //weights3[ijk] = weights1[i] * weights1[j] * (dim==3 ? weights1[k]: 1)
    }
  }
{% endif %}
}

