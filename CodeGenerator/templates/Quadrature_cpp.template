{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include "{{pathToOptKernel}}/Quadrature.h"
#include <mm_malloc.h> //g++


// Use {{quadratureType}} quadrature
double* {{codeNamespace}}::weights1;
double* {{codeNamespace}}::weights2;
double* {{codeNamespace}}::weights3;
double* {{codeNamespace}}::nodes;

void {{codeNamespace}}::freeQuadratureNodesAndWeights(const std::set<int>& orders) {
  _mm_free(weights1);
  _mm_free(weights2);
  _mm_free(weights3);
  _mm_free(nodes);
}

void {{codeNamespace}}::initQuadratureNodesAndWeights(const std::set<int>& orders) {
  weights1 = (double *) _mm_malloc(sizeof(double)*{{w1Size }}, ALIGNMENT); //nDofPad
  weights2 = (double *) _mm_malloc(sizeof(double)*{{w2Size }}, ALIGNMENT); //2D: nDofPad (==weight1), 3D: (nDof*nDof)Pad (== w1[i]*w1[j])
  weights3 = (double *) _mm_malloc(sizeof(double)*{{w3Size }}, ALIGNMENT); //2D: (nDof*nDof)Pad (== w1[i]*w1[j]), 3D: (nDof*nDof*nDof)Pad (== w1[i]*w1[j]*w1[k])
  nodes    = (double *) _mm_malloc(sizeof(double)*{{nDofPad}}, ALIGNMENT);
  
{% for i in w1_seq %}
  weights1[{{i}}] = {{"{:.12e}".format(weights1[i])}};
{% endfor %}
  
{% for i in w2_seq %}
  weights2[{{i}}] = {{"{:.12e}".format(weights2[i])}};
{% endfor %}

{% for i in w3_seq %}
  weights3[{{i}}] = {{"{:.12e}".format(weights3[i])}};
{% endfor %}
  
{% for i in GPN_seq[i] %}
  nodes[{{i}}]   = {{"{:.12e}".format(xGPN[i])}};
{% endfor %}

}
