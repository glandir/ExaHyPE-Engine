{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include "{{pathToOptKernel}}/GaussLegendreQuadrature.h"
#include <mm_malloc.h> //g++

double** kernels::aderdg::optimised::gaussLegendreWeights;
double** kernels::aderdg::optimised::gaussLegendreNodes;
double* kernels::aderdg::optimised::weights1;
double* kernels::aderdg::optimised::weights2;
double* kernels::aderdg::optimised::weights3;

void kernels::aderdg::optimised::freeGaussLegendreNodesAndWeights(const std::set<int>& orders) {
  _mm_free(weights1);
  _mm_free(weights2);
  _mm_free(weights3);
  constexpr int MAX_ORDER=9;

  for (int i = 0; i < MAX_ORDER + 1; i++) {
    delete [] gaussLegendreNodes[i];
    delete [] gaussLegendreWeights[i];
  }

  delete [] gaussLegendreNodes;
  delete [] gaussLegendreWeights;
}

void kernels::aderdg::optimised::initGaussLegendreNodesAndWeights(const std::set<int>& orders) {
  weights1 = (double *) _mm_malloc(sizeof(double)*{{w1Size}}, ALIGNMENT); //nDofPad
  weights2 = (double *) _mm_malloc(sizeof(double)*{{w2Size}}, ALIGNMENT); //2D: nDofPad (==weight1), 3D: (nDof*nDof)Pad (== w1[i]*w1[j])
  weights3 = (double *) _mm_malloc(sizeof(double)*{{w3Size}}, ALIGNMENT); //2D: (nDof*nDof)Pad (== w1[i]*w1[j]), 3D: (nDof*nDof*nDof)Pad (== w1[i]*w1[j]*w1[k])
  
{% for i in w1_seq %}
  weights1[{{i}}] = {{"{:.12e}".format(weights1[i])}};
{% endfor %}
  
{% for i in w2_seq %}
  weights2[{{i}}] = {{"{:.12e}".format(weights2[i])}};
{% endfor %}

{% for i in w3_seq %}
  weights3[{{i}}] = {{"{:.12e}".format(weights3[i])}};
{% endfor %}

  gaussLegendreNodes = new double* [{{maxOrder+1}}];
  gaussLegendreWeights = new double* [{{maxOrder+1}}];
  for (int i = 0; i < {{maxOrder+1}}; i++) {
    gaussLegendreNodes[i] = new double[i + 1];
    gaussLegendreWeights[i] = new double[i + 1];
  }
  
{% for i in GL_seq %}
{% for j in GPN_seq[i] %}
  gaussLegendreWeights[{{i-1}}][{{j}}] = {{"{:.12e}".format(wGPN[i][j])}};
{% endfor %}
{% for j in GPN_seq[i] %}
  gaussLegendreNodes[{{i-1}}][{{j}}]   = {{"{:.12e}".format(xGPN[i][j])}};
{% endfor %}

{% endfor %}
}

