{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#ifndef EXAHYPE_{{guardNamespace}}_CONVERTER_H_
#define EXAHYPE_{{guardNamespace}}_CONVERTER_H_
#include <cstring>

#include "kernels/KernelUtils.h"

{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}
namespace converter {

//TODO JMG adapt to parameters and fix

  // constexpr int getLuhArraySize()        { return {{(nDof**nDim)*nVar}};}

  // constexpr int getBndGenArraySize()     { return {{2 * nDim * nDof * nDof3D * nVar}};}
  // constexpr int getBndOptArraySize()     { return {{2 * nDim * nDof * nDof3D * nVarPad}};}

  // constexpr int getBndFaceGenArraySize() { return {{nDof * nDof3D * nVar}};}
  // constexpr int getBndFaceOptArraySize() { return {{nDof * nDof3D * nVarPad}};}

  // constexpr int getFhiGenArraySize()     { return {{(nDof ** nDim) * nVar * (nDim+1)}};}
  // constexpr int getFhiOptArraySize()     { return {{(nDof ** nDim) * nVarPad * (nDim+1)}};}

  // constexpr int getQhiGenArraySize()     { return {{(nDof ** nDim) * nVar}};}
  // constexpr int getQhiOptArraySize()     { return {{(nDof ** nDim) * nVarPad}};}

  // void Bnd_optimised2generic(const double* const opt, double* gen);
  // void Bnd_generic2optimised(const double* const gen, double* opt);

  // void BndFace_optimised2generic(const double* const opt, double* gen);
  // void BndFace_generic2optimised(const double* const gen, double* opt);

  // void Fhi_optimised2generic(const double* const opt, double* gen);
  // void Fhi_generic2optimised(const double* const gen, double* opt);

  // void Qhi_optimised2generic(const double* const opt, double* gen);
  // void Qhi_generic2optimised(const double* const gen, double* opt);

}
{% for namespaceName in codeNamespaceList %}
}
{% endfor %}

#endif //EXAHYPE_{{guardNamespace}}_CONVERTER_H_

