/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
#include <cstring>


void aderPredictorNonlinear(const double* lQi, const double* lFi,
                            int numberOfVariables, int basisSize, double* lQhi,
                            double* lFhi_x, double* lFhi_y, double* lFhi_z) {
  const int basisSize2 = basisSize * basisSize;
  const int basisSize3 = basisSize2 * basisSize;
  const int order = basisSize - 1;

  //std::memset(lQhi, 0, basisSize3 * numberOfVariables * sizeof(double));
  //std::memset(lFhi_x, 0, basisSize3 * numberOfVariables * sizeof(double));
  //std::memset(lFhi_y, 0, basisSize3 * numberOfVariables * sizeof(double));
  //std::memset(lFhi_z, 0, basisSize3 * numberOfVariables * sizeof(double));

  for (int i = 0; i < basisSize; i++) {
    for (int j = 0; j < basisSize; j++) {
      for (int k = 0; k < basisSize; k++) {
        // Matrix-Vector Products
        for (int l = 0; l < numberOfVariables; l++) {
          for (int m = 0; m < basisSize; m++) {
            // Fortran: lQhi(:,k,j,i) = lQi(:,:,k,j,i) * wGPN(:)
            lQhi[i * basisSize2 * numberOfVariables +
                 j * basisSize * numberOfVariables + k * numberOfVariables +
                 l] += lQi[i * basisSize3 * numberOfVariables +
                           j * basisSize2 * numberOfVariables +
                           k * basisSize * numberOfVariables +
                           m * numberOfVariables + l] *
                       weights1[m];

            // Fortran: lFhi_x(:,k,j,i) = lFh(:,1,k,j,i,:) * wGPN(:)
            lFhi_x[i * basisSize2 * numberOfVariables +
                   j * basisSize * numberOfVariables + k * numberOfVariables +
                   l] +=
                lFi[m * basisSize3 * 3 * numberOfVariables +
                    i * basisSize2 * 3 * numberOfVariables +
                    j * basisSize * 3 * numberOfVariables +
                    k * 3 * numberOfVariables + 0 * numberOfVariables + l] *
                weights1[m];

            // Fortran: lFhi_y(:,j,k,i) = lFh(:,2,:k,j,i,:) * wGPN(:)
            lFhi_y[i * basisSize2 * numberOfVariables +
                   k * basisSize * numberOfVariables + j * numberOfVariables +
                   l] +=
                lFi[m * basisSize3 * 3 * numberOfVariables +
                    i * basisSize2 * 3 * numberOfVariables +
                    j * basisSize * 3 * numberOfVariables +
                    k * 3 * numberOfVariables + 1 * numberOfVariables + l] *
                weights1[m];

            // Fortran: lFhi_z(:,i,k,j) = lFh(:,3,k,j,i,:) * wGPN(:)
            lFhi_z[j * basisSize2 * numberOfVariables +
                   k * basisSize * numberOfVariables + i * numberOfVariables +
                   l] +=
                lFi[m * basisSize3 * 3 * numberOfVariables +
                    i * basisSize2 * 3 * numberOfVariables +
                    j * basisSize * 3 * numberOfVariables +
                    k * 3 * numberOfVariables + 2 * numberOfVariables + l] *
                weights1[m];
          }
        }
      }
    }
  }
}

