/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
#include <cstring>


extern double** KXI;

void PDEFlux3D(const double* const Q, double** F) {
  // Dimensions             = 2/3
  // Number of variables    = 5 (#unknowns + #parameters)

  const double GAMMA = 1.4;

  const double irho = 1.0 / Q[0];
  const double p =
      (GAMMA - 1) * (Q[4] - 0.5 * (Q[1] * Q[1] + Q[2] * Q[2]) * irho);

  double* f = F[0];
  double* g = F[1];

  // @todo Please implement
  // f
  f[0] = Q[1];
  f[1] = irho * Q[1] * Q[1] + p;
  f[2] = irho * Q[1] * Q[2];
  f[3] = irho * Q[1] * Q[3];
  f[4] = irho * Q[1] * (Q[4] + p);
  // g
  // @todo Please implement
  g[0] = Q[2];
  g[1] = irho * Q[2] * Q[1];
  g[2] = irho * Q[2] * Q[2] + p;
  g[3] = irho * Q[2] * Q[3];
  g[4] = irho * Q[2] * (Q[4] + p);
  
  double* h = F[2];
  // h
  // @todo Please implement
  h[0] = Q[3];
  h[1] = irho * Q[3] * Q[1];
  h[2] = irho * Q[3] * Q[2];
  h[3] = irho * Q[3] * Q[3] + p;
  h[4] = irho * Q[3] * (Q[4] + p);

}


void aderPicardLoopNonlinear(const double* luh, const double dt,
                             const double* dx,
                             int numberOfVariables, int basisSize, double* lQi,
                             double* lFi) {
  const int order = basisSize - 1;
  const int basisSize2 = basisSize * basisSize;
  const int basisSize3 = basisSize2 * basisSize;
  const int basisSize4 = basisSize2 * basisSize2;


  // 1. Trivial initial guess
  for (int i = 0; i < basisSize; i++) {
    for (int j = 0; j < basisSize; j++) {
      for (int k = 0; k < basisSize; k++) {
        for (int l = 0; l < basisSize; l++) {
          for (int m = 0; m < numberOfVariables; m++) {
            // Fortran: lQi(m,:,k,j,i) = luh(m,k,j,i)
            lQi[i * basisSize3 * numberOfVariables +
                j * basisSize2 * numberOfVariables +
                k * basisSize * numberOfVariables + l * numberOfVariables + m] =
                luh[i * basisSize2 * numberOfVariables +
                    j * basisSize * numberOfVariables + k * numberOfVariables +
                    m];
          }
        }
      }
    }
  }

  // 2. Compute the contribution of the initial condition uh to the time update
  double* rhs0 = new double[basisSize4 * numberOfVariables];
  for (int i = 0; i < basisSize; i++) {
    for (int j = 0; j < basisSize; j++) {
      for (int k = 0; k < basisSize; k++) {
        const double weight = weights2[i] *
                              weights2[j] *
                              weights2[k];
        for (int l = 0; l < numberOfVariables; l++) {
          for (int m = 0; m < basisSize; m++) {
            rhs0[m * basisSize3 * numberOfVariables +
                 i * basisSize2 * numberOfVariables +
                 j * basisSize * numberOfVariables + k * numberOfVariables +
                 l] = weight * F0[m] *
                      luh[i * basisSize2 * numberOfVariables +
                          j * basisSize * numberOfVariables +
                          k * numberOfVariables + l];
          }
        }
      }
    }
  }

  // 3. Discrete Picard iterations
  double* lQi_old = new double[basisSize4 * numberOfVariables];
  double* rhs = new double[basisSize4 * 3 * numberOfVariables];

  for (int iter = 0; iter < order + 1; iter++) {
    // Save old space-time DOF
    std::memcpy(lQi_old, lQi, basisSize4 * numberOfVariables * sizeof(double));

    for (int i = 0; i < basisSize; i++) {  // time DOF
      // Compute the fluxes
      for (int j = 0; j < basisSize; j++) {
        for (int k = 0; k < basisSize; k++) {
          for (int l = 0; l < basisSize; l++) {
            // Call PDE fluxes
            const double* Q =
                &lQi[j * basisSize3 * numberOfVariables +
                     k * basisSize2 * numberOfVariables +
                     l * basisSize * numberOfVariables + i * numberOfVariables];
            double* F[3];
            F[0] = &lFi[i * basisSize3 * 3 * numberOfVariables +
                        j * basisSize2 * 3 * numberOfVariables +
                        k * basisSize * 3 * numberOfVariables +
                        l * 3 * numberOfVariables + 0 * numberOfVariables];
            F[1] = F[0] + numberOfVariables;
            F[2] = F[0] + 2 * numberOfVariables;
            //PDEFlux3D(Q, F);
          }
        }
      }

      // Compute the "derivatives" (contributions of the stiffness matrix)
      // x direction (independent from the y and z derivatives)
      for (int j = 0; j < basisSize; j++) {
        for (int k = 0; k < basisSize; k++) {
          
          const double weight = weights2[i] *
                                weights2[j] *
                                weights2[k];
          const double updateSize = weight * dt / dx[0];

          // Copy rhs0 -> rhs
          // TODO(guera): Move out?!
          for (int l = 0; l < basisSize; l++) {
            for (int m = 0; m < numberOfVariables; m++) {
              rhs[i * basisSize3 * numberOfVariables +
                  j * basisSize2 * numberOfVariables +
                  k * basisSize * numberOfVariables + l * numberOfVariables +
                  m] = rhs0[i * basisSize3 * numberOfVariables +
                            j * basisSize2 * numberOfVariables +
                            k * basisSize * numberOfVariables +
                            l * numberOfVariables + m];
            }
          }
          // Matrix operation
          for (int l = 0; l < basisSize; l++) {
            for (int m = 0; m < numberOfVariables; m++) {
              for (int n = 0; n < basisSize; n++) {
                rhs[i * basisSize3 * numberOfVariables +
                    j * basisSize2 * numberOfVariables +
                    k * basisSize * numberOfVariables + l * numberOfVariables +
                    m] -=
                    updateSize *
                    lFi[i * basisSize3 * 3 * numberOfVariables +
                        j * basisSize2 * 3 * numberOfVariables +
                        k * basisSize * 3 * numberOfVariables +
                        n * 3 * numberOfVariables + 0 * numberOfVariables + m] *
                    KXI[n][l];
              }
            }
          }
        }
      }
      // y direction (independent from the x and z derivatives)
      for (int j = 0; j < basisSize; j++) {
        for (int k = 0; k < basisSize; k++) {
          const double weight = weights2[i] *
                                weights2[j] *
                                weights2[k];
          const double updateSize = weight * dt / dx[1];

          // Matrix operation
          for (int l = 0; l < basisSize; l++) {
            for (int m = 0; m < numberOfVariables; m++) {
              for (int n = 0; n < basisSize; n++) {
                rhs[i * basisSize3 * numberOfVariables +
                    j * basisSize2 * numberOfVariables +
                    l * basisSize * numberOfVariables + k * numberOfVariables +
                    m] -=
                    updateSize *
                    lFi[i * basisSize3 * 3 * numberOfVariables +
                        j * basisSize2 * 3 * numberOfVariables +
                        n * basisSize * 3 * numberOfVariables +
                        k * 3 * numberOfVariables + 1 * numberOfVariables + m] *
                    KXI[n][l];
              }
            }
          }
        }
      }

      // z direction (independent from the x and y derivatives)
      for (int j = 0; j < basisSize; j++) {
        for (int k = 0; k < basisSize; k++) {
          const double weight = weights2[i] *
                                weights2[j] *
                                weights2[k];
          const double updateSize = weight * dt / dx[2];

          // Matrix operation
          for (int l = 0; l < basisSize; l++) {
            for (int m = 0; m < numberOfVariables; m++) {
              for (int n = 0; n < basisSize; n++) {
                rhs[i * basisSize3 * numberOfVariables +
                    l * basisSize2 * numberOfVariables +
                    j * basisSize * numberOfVariables + k * numberOfVariables +
                    m] -=
                    updateSize *
                    lFi[i * basisSize3 * 3 * numberOfVariables +
                        n * basisSize2 * 3 * numberOfVariables +
                        j * basisSize * 3 * numberOfVariables +
                        k * 3 * numberOfVariables + 2 * numberOfVariables + m] *
                    KXI[n][l];
              }
            }
          }
        }
      }
    }

    // 4. Multiply with (K1)^(-1) to get the discrete time integral of the
    // discrete Picard iteration
    std::memset(lQi, 0, basisSize4 * numberOfVariables * sizeof(double));
    for (int i = 0; i < basisSize; i++) {
      for (int j = 0; j < basisSize; j++) {
        for (int k = 0; k < basisSize; k++) {
          const double weight = weights2[i] *
                                weights2[j] *
                                weights2[k];
          const double iweight = 1.0 / weight;

          // Matrix operation
          for (int l = 0; l < basisSize; l++) {
            for (int m = 0; m < numberOfVariables; m++) {
              for (int n = 0; n < basisSize; n++) {
                lQi[i * basisSize3 * numberOfVariables +
                    j * basisSize2 * numberOfVariables +
                    k * basisSize * numberOfVariables + l * numberOfVariables +
                    m] += iweight * rhs[n * basisSize3 * numberOfVariables +
                                        i * basisSize2 * numberOfVariables +
                                        j * basisSize * numberOfVariables +
                                        k * numberOfVariables + m] *
                          iK1[n];//kernels::iK1[order][l][n];
              }
            }
          }
        }
      }
    }

    // TODO(guera): Is step 4 ill-conditioned?! max(abs(...) Fortran vs. C is ~
    // 1e-11 after one iteration, but >1e-7 after 3 more iterations

    // 5. Exit condition
    // TODO(guera): Stability of sum? -> Kahan, reduction?
    // TODO(guera): Is there something like kernels::tol?
    //    const double tol = 1e-7;
    //    double sq_res = 0.0;
    //    for (int i = 0; i < basisSize4 * numberOfVariables; i++) {
    //      sq_res += (lQi_old[i] - lQi[i]) * (lQi_old[i] - lQi[i]);
    //    }
  }

  // Delete heap-allocated arrays
  delete[] rhs0;
  delete[] lQi_old;
  delete[] rhs;
}


