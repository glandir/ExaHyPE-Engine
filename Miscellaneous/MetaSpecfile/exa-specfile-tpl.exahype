{#
  This is a specfile template for mexa in the jinja2 templating language.
  
  We need this circumvention of a template due to the specific order
  of the parameters needed in an ExaHyPE specfile as well as the
  weird non-treeish language features.
  
  Some paradigms of this template are the following:
  
   * Template data are given as nested dictionaries.
   * Some special filters are used for convenience.
   * No superflucious comments are made.

  Some Jinja tipps:
  
   * To debug a variable, write {{ something|pprint }}

  (c) 2017, 2018 SvenK for exahype.eu (GPL/BSD)

-#}
{%- for project in exahype_projects|tolist -%}
{#-
  The following is a way to allow comments about the spec file to be embedded
  directly in the generating mexa file. It produces a multiline comment in the
  specification file. You may want to choose to single line comment syntax
   // foo bar
  instead if you experience problems with the "**/" character.
  Note also that you can specify comments at other places:
    - specfile_end_comment
    - specfile_constants_comment
-#}
{%- if project.specfile_top_comment is defined -%}
/**
 {%- for line in project.specfile_top_comment|tolist %}
 * {{line}}
 {%- endfor %}
 **/
{% endif -%}
exahype-project {{ project.project_name }}

  peano-kernel-path const  = {{ project.peano_kernel_path }}
  exahype-path const       = {{ project.exahype_path }}
  output-directory const   = {{ project.output_directory }}
  architecture const       = {{ project.architecture }}
  log-file                 = {{ project.log_file }}
  
  computational-domain
    dimension const  = {{ project.computational_domain.dimension }}
    width            = {{ project.computational_domain.width|tolist|asfloat|join(", ") }}
    offset           = {{ project.computational_domain.offset|tolist|asfloat|join(", ") }}
    end-time         = {{ project.computational_domain.end_time }}
  end computational-domain

  shared-memory
    identifier       = {{ project.shared_memory.identifier }}
    configure        = {}
    cores            = {{ project.shared_memory.cores }}
    properties-file  = {{ project.shared_memory.properties_file }}
  end shared-memory  
  
  distributed-memory
    identifier       = {{ project.distributed_memory.identifier }}
    configure        = {{ project.distributed_memory.configure }}
    buffer-size      = {{ project.distributed_memory.buffer_size }}
    timeout          = {{ project.distributed_memory.timeout }}
  end distributed-memory

  global-optimisation
    fuse-algorithmic-steps          = {{ project.optimisation.fuse_algorithmic_steps }}
    fuse-algorithmic-steps-factor   = {{ project.optimisation.fuse_algorithmic_steps_factor }}
    timestep-batch-factor           = {{ project.optimisation.batch_timesteps }}
    skip-reduction-in-batched-time-steps = {{ project.optimisation.skip_reduction }}
    disable-amr-if-grid-has-been-stationary-in-previous-iteration = {{
	project.optimisation.disable_amr_if_grid_has_been_stationary_in_previous_iteration }}
    double-compression = {{ project.optimisation.double_compression }}
    spawn-double-compression-as-background-thread = {{ project.optimisation.spawn_double_compression }}
  end global-optimisation

  {% for solver in project.solvers|tolist -%}
  solver {{solver.type}} {{solver.name}}
    variables const    = {{ solver.variables }}

    {%-  if solver.type == "Finite-Volumes" %}
    patch-size const   = {{ solver.patch_size }}
    {% elif solver.type == "ADER-DG" %}
    order const        = {{ solver.order }}
    {% elif solver.type == "Limiting-ADER-DG" %}
    order const        = {{ solver.order }}
    {% else %}
       {{ error("Invalid solver.type: " ~ solver.type) }}
    {% endif -%}
    {# #}
    maximum-mesh-size  = {{ solver.maximum_mesh_size|as_float }}
    maximum-mesh-depth = {{ solver.maximum_mesh_depth }}
    time-stepping      = {{ solver.time_stepping}} 
    type const         = {{ solver.kernel.type }}
    terms const        = {{ solver.kernel.terms }}
    optimisation const = {{ solver.kernel.opt }}
    language const     = {{ solver.kernel.language }}

    {%- if solver.type == "Limiting-ADER-DG" %}
    limiter-type const             = {{ solver.limiter.kernel.type }}
    limiter-optimisation const     = {{ solver.limiter.kernel.opt }}
    limiter-language const         = {{ solver.limiter.kernel.language }}
    dmp-observables                = {{ solver.limiter.observables }}
    dmp-relaxation-parameter       = {{ solver.limiter.relaxation_parameter }}
    dmp-difference-scaling         = {{ solver.limiter.difference_scaling }}
    steps-till-cured               = {{ solver.limiter.steps_till_cured }}
    {% endif -%}
    {# #}

    {% if "constants" in solver -%}
    {#- We had this kind of generic comment here before:
    // Note, if this constant string does not run throught the toolkit, try to remove parts of it
    // until it runs. Then try to replace these parts. For instance, you must not use certain keywords
    // for identifiers or values, such as the keyword "parameters".
    // You can also choose to encode all constants as BASE64 or similar to avoid problems with the
    // restrictive toolkit specfile grammar.
    Instead, support any kind of user-given comment:
    -#}
    {%- if project.specfile_constants_comment is defined -%}
    {%- for line in project.specfile_constants_comment|tolist -%}
    // {{line}}
    {% endfor %}
    {% endif -%}
    constants          = {{ solver.constants|link_in_list|indent(width=25) }}
    {% endif -%}

    {% for plotter in solver.plotters|tolist %}
    plot {{plotter.type}} {{plotter.name}}
      variables const = {{plotter.variables|count_variables }}
      time      = {{plotter.time}}
      repeat    = {{plotter.repeat}}
      output    = {{plotter.output}}
      {%- if "parameters" in plotter %}
      select    = {{ plotter.parameters|link_in_list|indent(width=18) }}
      {%- elif "select" in plotter %}
      select    = {{plotter.select}}
      {%- endif %}
    end plot
    {% endfor %}
  end solver
  {%- endfor %}
end exahype-project

{%- if project.specfile_end_comment is defined %}
/**
 {%- for line in project.specfile_end_comment|tolist %}
 * {{line}}
 {%- endfor %}
 **/
{% endif %}
{% endfor %}
