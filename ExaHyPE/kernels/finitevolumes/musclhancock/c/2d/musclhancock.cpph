/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
#include <cassert>
#include <cmath>
#include <limits>
#include <utility>
#include <vector>
#include <algorithm>

#include "tarch/la/Vector.h"
#include "kernels/KernelUtils.h"

#include "kernels/finitevolumes/riemannsolvers/c/riemannsolvers.h"

#if DIMENSIONS == 2

double kernels::finitevolumes::musclhancock::c::minmod(double a, double b) {
  assert(std::isfinite(a));
  assert(std::isfinite(b));

  if (a * b < 0.0) {  // sign is different (alternative: std::signbit and xor)
    return 0.0;
  } else {
    if (std::abs(a) < std::abs(b)) {
      return a;
    } else {
      return b;
    }
  }
}


// TODO(Dominic): Work in progress
/**
 * Solves all the Riemann problems that do only require
 * internal data and add the result directly onto the
 * new solution.
 * Finally add the source terms.
 */
template <bool useSource, bool useNCP, bool useFlux, typename SolverType>
double kernels::finitevolumes::musclhancock::c::solutionUpdate(
    SolverType& solver,
    double* luh_new, const double* luh,
    double** tempStateSizedVectors,double** tempUnknowns,
    const tarch::la::Vector<DIMENSIONS, double>& dx,double dt) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int patchSize          = SolverType::PatchSize;
  constexpr int ghostLayerWidth    = SolverType::GhostLayerWidth;
  constexpr int patchBegin         = ghostLayerWidth; // patchBegin cell is inside domain
  constexpr int patchEnd           = patchBegin+patchSize; // patchEnd cell is outside domain
  constexpr double cflFactor       = SolverType::CFL;

  const double cellSize[2] = {dx[0]/patchSize, dx[1]/patchSize};

  // 1. Gather data from neighbouring cells; already done.

  // 2. Compute slopes TODO(Dominic): Make sure to only consider parameters in luh
  idx3 idx(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,numberOfData);
  idx4 idx_slope(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,DIMENSIONS,numberOfVariables);
  constexpr int variablesPerPatch = (patchSize+2*ghostLayerWidth)*(patchSize+2*ghostLayerWidth)*numberOfVariables;
  //double slopex[variablesPerPatch] = {0.0};
  //double slopey[variablesPerPatch] = {0.0};
  double slope[variablesPerPatch*DIMENSIONS] = {0.0};

  // This musclhancock does not yet use 2. ghostlayer.

  // slopex
  for (int j = patchBegin; j < patchEnd; j++) { // y
    for (int k = patchBegin-1; k < patchEnd+1; k++) { // x
      for (int l = 0; l < numberOfVariables; l++) {
        slope[idx_slope(j, k, 0, l)] = 
            minmod(luh[idx(j, k + 1, l)] - luh[idx(j, k, l)],
                luh[idx(j, k, l)] - luh[idx(j, k - 1, l)]) / cellSize[0];
      }
    }
  }
  // slopey
  for (int j = patchBegin-1; j < patchEnd+1; j++) { // y
    for (int k = patchBegin; k < patchEnd; k++) { // x
      for (int l = 0; l < numberOfVariables; l++) {
        slope[idx_slope(j, k, 1, l)] = 
            minmod(luh[idx(j + 1, k, l)] - luh[idx(j, k, l)],
                luh[idx(j, k, l)] - luh[idx(j - 1, k, l)]) / cellSize[1];
      }
    }
  }

  // 3.Boundary extrapolation (left and right value per face)
  idx3 idx_w(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,numberOfVariables);
  double wLx[variablesPerPatch] = {0.0};
  double wRx[variablesPerPatch] = {0.0};
  double wLy[variablesPerPatch] = {0.0};
  double wRy[variablesPerPatch] = {0.0};

  // wx
  for (int j = patchBegin; j < patchEnd; j++) {
    for (int k = patchBegin-1; k < patchEnd+1; k++) {
      for (int l = 0; l < numberOfVariables; l++) {
        wLx[idx_w(j, k, l)] = luh[idx(j, k, l)] - 0.5 * cellSize[0] * slope[idx_slope(j, k, 0, l)];
        wRx[idx_w(j, k, l)] = luh[idx(j, k, l)] + 0.5 * cellSize[0] * slope[idx_slope(j, k, 0, l)];
      }
    }
  }
  // wy
  for (int j = patchBegin-1; j < patchEnd+1; j++) {
    for (int k = patchBegin; k < patchEnd; k++) {
      for (int l = 0; l < numberOfVariables; l++) {
        wLy[idx_w(j, k, l)] = luh[idx(j, k, l)] - 0.5 * cellSize[1] * slope[idx_slope(j, k, 1, l)];
        wRy[idx_w(j, k, l)] = luh[idx(j, k, l)] + 0.5 * cellSize[1] * slope[idx_slope(j, k, 1, l)];
      }
    }
  }

  // 4. Source evaluation, half time step evolution increment
  double flx[numberOfVariables * DIMENSIONS] = {0.0};
  double* F[2] = {flx, flx + numberOfVariables};

  double slopet[variablesPerPatch] = {0.0};

  // wx
  for (int j = patchBegin; j < patchEnd; j++) {
    for (int k = patchBegin; k < patchEnd; k++) {
      double* Qt = slopet + idx(j, k, 0);
      double* gradQ = slope + idx_slope(j, k, 0, 0);
      if(useSource || useNCP) {
        solver.fusedSource(luh + idx(j,k,0), gradQ, Qt);
      }

      if(useFlux) {
        // x fluxes
        solver.flux(wLx + idx_w(j, k, 0), F); // FLx
        for (int l = 0; l < numberOfVariables; l++) {
          Qt[l] += F[0][l] / cellSize[0];
        }
        solver.flux(wRx + idx_w(j, k, 0), F); // FRx
        for (int l = 0; l < numberOfVariables; l++) {
          Qt[l] -= F[0][l] / cellSize[0];
        }
        // y fluxes
        solver.flux(wLy + idx_w(j, k, 0), F); // FLy
        for (int l = 0; l < numberOfVariables; l++) {
          Qt[l] += F[1][l] / cellSize[1];
        }
        solver.flux(wRy + idx_w(j, k, 0), F); // FRy
        for (int l = 0; l < numberOfVariables; l++) {
          Qt[l] -= F[1][l] / cellSize[1];
        }
      }

      // evolve boundary states
      for (int l = 0; l < numberOfVariables; l++) {
        wLx[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
        wRx[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
        wLy[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
        wRy[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
      }
    }
  }


  // 4. Solve Riemann problems
  double fL[numberOfVariables], fR[numberOfVariables];
  double dt_max_allowed = std::numeric_limits<double>::max();

  // x edges
  for (int j = patchBegin; j < patchEnd; j++) {
    for (int k = patchBegin-1; k < patchEnd; k++) {
      double s_max_x =
          riemannsolvers::c::rusanov<useNCP, useFlux, SolverType>(solver,
              fL, fR,
              wRx + idx_w(j, k, 0),
              wLx + idx_w(j, k+1, 0),
              0
          );
      dt_max_allowed = std::min(
          dt_max_allowed, cflFactor / DIMENSIONS * cellSize[0] / s_max_x);

      for (int l=0; l<numberOfVariables; ++l) {
        luh_new[idx(j, k, l)]   -= dt / cellSize[0] * fL[l];  
        luh_new[idx(j, k+1, l)] += dt / cellSize[0] * fR[l];
      }
    }
  }

  // y edges
  for (int j = patchBegin-1; j < patchEnd; j++) {
    for (int k = patchBegin; k < patchEnd; k++) {
      double s_max_y = riemannsolvers::c::rusanov<useNCP, useFlux, SolverType>(solver,
          fL, fR,
          wRy + idx_w(j, k, 0),
          wLy + idx_w(j+1, k, 0),
          1
      );
      dt_max_allowed = std::min(
          dt_max_allowed, cflFactor / DIMENSIONS * cellSize[1] / s_max_y);

      for (int l=0; l<numberOfVariables; ++l) {
        luh_new[idx(j, k, l)]   -= dt / cellSize[1] * fL[l];  
        luh_new[idx(j+1, k, l)] += dt / cellSize[1] * fR[l];
      }
    }
  }

  // TODO(guera): Early exit if dt > dt_max_allowed?!

  // 5. Evolve, evaluate source, update cells
  if(useNCP || useSource) {
    double ws[numberOfVariables]  = {0.0};
    double src[numberOfVariables] = {0.0};

    for (int j = patchBegin; j < patchEnd; j++) {
      for (int k = patchBegin; k < patchEnd; k++) {
        for (int l = 0; l < numberOfVariables; l++) {
          ws[l] = luh[idx(j,k,l)] + 0.5 * dt * slopet[idx_w(j,k,l)]; // idx_w ~ idx_slopet
        }

        double* gradQ = slope + idx_slope(j, k, 0, 0); // const in time
        solver.fusedSource(ws, gradQ, src);

        for(int l = 0; l < numberOfVariables; l++) {
          luh_new[idx(j, k, l)] += dt * src[l];
        }
      }
    }
  }

  return dt_max_allowed;
}

#endif  // DIMENSIONS == 2
