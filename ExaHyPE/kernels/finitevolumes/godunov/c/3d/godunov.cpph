/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 *
 * @authors: Dominic E. Charrier, Sven Koeppel, Fabian Guera, Tobias Weinzierl, Michael Dumbser
 **/
#include <cassert>
#include <cmath>
#include <limits>
#include <utility>
#include <vector>
#include <algorithm>

#include "tarch/la/Vector.h"
#include "kernels/KernelUtils.h"

#include "kernels/finitevolumes/riemannsolvers/c/riemannsolvers.h"

#if DIMENSIONS == 3

namespace kernels {
namespace finitevolumes {
namespace godunov {
namespace c {

/**
 * Solves all the Riemann problems that do only require
 * internal data and add the result directly onto the
 * new solution. 
 * Finally add the source terms.
 */
template <typename SolverType>
double solutionUpdate(
    SolverType& solver,
    double* luh_new, const double* luh,
    double** tempStateSizedVectors,double** tempUnknowns,
    const tarch::la::Vector<DIMENSIONS, double>& dx,double dt) {
  constexpr int numberOfVariables = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int patchSize = SolverType::PatchSize;
  
  constexpr int patchBegin=1;
  constexpr int patchEnd=patchSize;
  idx4 idx(patchSize+2,patchSize+2,patchSize+2,numberOfVariables+numberOfParameters);
  
  const double cellSize[3] = {dx[0]/patchSize, dx[1]/patchSize, dx[2]/patchSize};
  
  // Solve Riemann problems
  constexpr double cflFactor = 0.99; // We use a factor closer to 1 here.
  double dt_max_allowed = std::numeric_limits<double>::max();
  
  // x edges 
  double *fL = tempStateSizedVectors[0];
  double  fR[numberOfVariables];
  for (int i = patchBegin; i < patchEnd+1; i++) {
  for (int j = patchBegin; j < patchEnd+1; j++) {
  for (int k = patchBegin-1; k < patchEnd+1; k++) {  // We have patchSize+1 faces in each coordinate direction
    const double s_max_x = 
        riemannsolvers::c::rusanov<SolverType>(
            solver,
            fL, fR,
            luh + idx(i,j, k, 0),
            luh + idx(i,j, k+1, 0), 
            0/*x-axis*/, tempStateSizedVectors + 1);
    // TODO(guera): Improve. I'm quite sure this is not the correct/best
    // formula. TODO(Dominic): The division by DIMENSIONS might make sure that C_x+C_y < 1
    dt_max_allowed = std::min(
        dt_max_allowed, cflFactor / DIMENSIONS * cellSize[0] / s_max_x); // TODO(Dominic): Ignore this for a while
    
    for (int l=0; l<numberOfVariables; ++l) {
      luh_new[idx(i,j, k, l)]   -= dt / cellSize[0] * fL[l];  
      luh_new[idx(i,j, k+1, l)] += dt / cellSize[0] * fR[l];
    }
  }
  }
  }

  // y edges
  for (int i = patchBegin; i < patchEnd+1; i++) {
  for (int j = patchBegin-1; j < patchEnd+1; j++) {
  for (int k = patchBegin; k < patchEnd+1; k++) {
    const double s_max_y =
      riemannsolvers::c::rusanov<SolverType>(
        solver,
        fL, fR,
        luh + idx(i, j, k,0),
        luh + idx(i, j+1, k,0), 
        1/*y-axis*/, tempStateSizedVectors + 1);
    dt_max_allowed = std::min(
        dt_max_allowed, cflFactor / DIMENSIONS * cellSize[1] / s_max_y);
    
    for (int l=0; l<numberOfVariables; ++l) {
      luh_new[idx(i, j, k,l)]   -= dt / cellSize[1] * fL[l];  
      luh_new[idx(i, j+1, k,l)] += dt / cellSize[1] * fR[l];
    }
  }
  }
  }
  
  // z edges
  for (int i = patchBegin-1; i < patchEnd+1; i++) {
  for (int j = patchBegin; j < patchEnd+1; j++) {
  for (int k = patchBegin; k < patchEnd+1; k++) {
    const double s_max_z =
      riemannsolvers::c::rusanov<SolverType>(
        solver,
        fL, fR,
        luh + idx(i, j,k,0),
        luh + idx(i+1, j,k,0), 
        2/*z-axis*/, tempStateSizedVectors + 1);
    dt_max_allowed = std::min(
        dt_max_allowed, cflFactor / DIMENSIONS * cellSize[2] / s_max_z);
    
    for (int l=0; l<numberOfVariables; ++l) {
      luh_new[idx(i, j,k,l)]   -= dt / cellSize[2] * fL[l];  
      luh_new[idx(i+1, j,k,l)] += dt / cellSize[2] * fR[l];
    }
  }
  }
  }

  // 5. Add the source terms 
  if (solver.useSource()) {
    double* source = tempStateSizedVectors[0]; // temp var; state sized vector
    for (int i = patchBegin; i < patchEnd+1; i++) {
    for (int j = patchBegin; j < patchEnd+1; j++) {
    for (int k = patchBegin; k < patchEnd+1; k++) {
      solver.source(&luh[idx(i,j,k,0)], source);
      for (int l = 0; l < numberOfVariables; l++) {
        // No BgradQ contribution as this is first order, cf. 2D godunov.
        luh_new[idx(i,j,k,l)] += dt * source[l];
      }
    }
    }
    }
  }
  
  return dt_max_allowed;
}
  
template <typename SolverType>
double stableTimeStepSize(SolverType& solver,
                          const double* const luh,
                          double* tempEigenvalues,
                          const tarch::la::Vector<DIMENSIONS, double>& dx) {  
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int patchSize          = SolverType::PatchSize;

  double dt_max_stable = std::numeric_limits<double>::max();
  constexpr double EXAHYPE_CFL_FACTOR = 0.9; // TODO externalize
  
  constexpr int patchBegin = 1;
  constexpr int patchEnd   = patchSize;
  idx4 idx_luh(patchSize+2,patchSize+2,patchSize+2,numberOfVariables+numberOfParameters);
  
  double* lambda = tempEigenvalues;
  
  for (int i = patchBegin; i < patchEnd+1; i++) {
  for (int j = patchBegin; j < patchEnd+1; j++) {
  for (int k = patchBegin; k < patchEnd+1; k++) {
    // x
    solver.eigenvalues(luh + idx_luh(i,j,k,0), 0/*x-axis*/, lambda);
    std::transform(lambda, lambda + numberOfVariables, lambda,
                   std::abs<double>);
    double s_max_x = *std::max_element(lambda, lambda + numberOfVariables);
    dt_max_stable = std::min(
        dt_max_stable, EXAHYPE_CFL_FACTOR / DIMENSIONS * (dx[0]/patchSize) / s_max_x);

    // y
    solver.eigenvalues(luh + idx_luh(i,j,k,0), 1/*y-axis*/, lambda);
    std::transform(lambda, lambda + numberOfVariables, lambda,
                   std::abs<double>);
    double s_max_y = *std::max_element(lambda, lambda + numberOfVariables);
    dt_max_stable = std::min(
        dt_max_stable, EXAHYPE_CFL_FACTOR / DIMENSIONS * (dx[1]/patchSize) / s_max_y);
    
    // z
    solver.eigenvalues(luh + idx_luh(i,j,k,0), 2/*z-axis*/, lambda);
    std::transform(lambda, lambda + numberOfVariables, lambda,
        std::abs<double>);
    double s_max_z = *std::max_element(lambda, lambda + numberOfVariables);
    dt_max_stable = std::min(
        dt_max_stable, EXAHYPE_CFL_FACTOR / DIMENSIONS * (dx[2]/patchSize) / s_max_z);
  }
  }
  }

  return dt_max_stable;
}

template <typename SolverType>
void solutionAdjustment(
    SolverType& solver,
    double* luh, const tarch::la::Vector<DIMENSIONS, double>& center,
    const tarch::la::Vector<DIMENSIONS, double>& dx, const double t,const double dt) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int patchSize          = SolverType::PatchSize;
  
  double x[DIMENSIONS];
  
  constexpr int patchBegin = 1;
  constexpr int patchEnd   = patchSize;
  idx4 idx_luh(patchSize+2,patchSize+2,patchSize+2,numberOfVariables+numberOfParameters);

  for (int k = patchBegin; k < patchEnd+1; k++) {  
    const double qt = (2.0*(k-patchBegin)+1.0)/(2.0*patchSize); //linspace; 
    x[2] = center[2] + dx[2] * (qt - 0.5);
    
    for (int j = patchBegin; j < patchEnd+1; j++) {  
      const double qs = (2.0*(j-patchBegin)+1.0)/(2.0*patchSize); //linspace; 
      x[1] = center[1] + dx[1] * (qs - 0.5);
      
      for (int i = patchBegin; i < patchEnd+1; i++) {
        const double qr = (2.0*(i-patchBegin)+1.0)/(2.0*patchSize); //linspace; 
        x[0] = center[0] + dx[0] * (qr - 0.5);
        // read initial condition
        solver.adjustSolution(x, 0, t, dt, luh+idx_luh(k,j,i,0));
      }
    }
  }
}

template <typename SolverType>
void boundaryConditions(
    SolverType& solver,
    double* stateOut,
    const double* const stateIn,
    const tarch::la::Vector<DIMENSIONS, double>& cellCentre,
    const tarch::la::Vector<DIMENSIONS,double>& cellSize,
    const double t,const double dt,
    const int faceIndex,
    const int normalNonZero) {
  constexpr int numberOfVariables = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int patchSize         = SolverType::PatchSize;
  // Determine if face is "left" (=0 for faceIndex=0,2,4) or "right" face (=1 for faceIndex=1,2,3).
  const int f = faceIndex-2*normalNonZero;

  idx3 idx(patchSize,patchSize,numberOfVariables + numberOfParameters);
  // Determine the free direction from the non-zero normal entry.
  int d1=0;
  int d2=0;
  switch(normalNonZero) {
    case 0:
      d2=2; // direction with larger stride; see boundaryLayerExtraction
      d1=1;
      break;
    case 1:
      d2=2;
      d1=0;
      break;
    case 2:
      d2=1;
      d1=0;
      break;
    default:
      assertionMsg(false,"normalNonZero must be either 0, 1, or 2.");
      break;
  }

 
  double x[DIMENSIONS];
  x[normalNonZero] = cellCentre[normalNonZero] + 
      (-0.5 + (double) f) * cellSize[normalNonZero] * ( 1.0 + 1.0/(2.0*patchSize) ); // cell center of the outside cell (not the patch center). TODO(Dominic): Verify!
  for (int i2 = 0; i2 < patchSize; i2++) {  // loop over dof
    const double q2 = (2.0*i2+1.0)/(2.0*patchSize); //linspace
    x[d2] = cellCentre[d2] + cellSize[d2] * (q2 - 0.5);
  
    for (int i1 = 0; i1 < patchSize; i1++) {  // loop over dof
      const double q1 = (2.0*i1+1.0)/(2.0*patchSize); //linspace
      x[d1] = cellCentre[d1] + cellSize[d1] * (q1 - 0.5);
    
      solver.boundaryValues(x,t,dt,faceIndex,normalNonZero,
          stateIn + idx(i2,i1,0),stateOut + idx(i2,i1,0));
    }
  }
}

}  // namespace c
}  // namespace godunov
}  // namespace finitevolumes
}  // namespace kernels

#endif  // DIMENSIONS == 2
