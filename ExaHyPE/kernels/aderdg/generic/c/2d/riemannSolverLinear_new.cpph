/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include <algorithm>

#include "../../../../KernelUtils.h"

namespace kernels {
namespace aderdg {
namespace generic {
namespace c {

template <bool useNCP, typename SolverType>
void riemannSolverLinear(SolverType& solver, double* FL, double* FR,
                         const double* const QL,
			 const double* const QR,
                         double*  tempFaceUnknowns,
                         double** tempStateSizedVectors,
                         double** tempStateSizedSquareMatrices,
                         const double dt,
                         const int direction) {
  /*
   * For the linear kernels, we need the material parameters in the
   * extrapolated predictor.
   * We compute the averages of the material parameters but
   * do not use them in the max eigenvalue calculation.
   * 
   * Consider numberOfParameters in:
   * QL,QR,QavL,QavR,Qav,
   * 
   * Not necessary to consider numberOfParameters in
   * FL,FR,LL,LR,Bn,BnMinusIdSmax,BnPlusIdSmax
   */
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfVariables2 = numberOfVariables*numberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int basisSize          = SolverType::Order+1;
  constexpr int order              = basisSize - 1;

  // Compute the average variables and parameters from the left and the right
  double QavL[numberOfData] = {0.0}; // size: numberOfVariables+numberOfParameters
  double QavR[numberOfData] = {0.0}; // size: numberOfVariables+numberOfParameters
  {
    idx2 idx_QLR(basisSize, numberOfVariables+numberOfParameters);
    for (int j = 0; j < basisSize; j++) {
      const double weight = kernels::gaussLegendreWeights[order][j];

      for (int k = 0; k < numberOfVariables+numberOfParameters; k++) {
        QavL[k] += weight * QL[idx_QLR(j, k)];
        QavR[k] += weight * QR[idx_QLR(j, k)];
      }
    }
  }

  double LL[numberOfVariables]; // size: numberOfVariables
  double LR[numberOfVariables]; // size: numberOfVariables

  solver.eigenvalues(QavL, direction, LL);
  solver.eigenvalues(QavR, direction, LR);

  // Here, we implement a very simple Rusanov scheme with scalar dissipation
  // (smax*Id).
  // We can change this into a more sophisticated Osher or HLLEM Riemann solver
  // whenever needed!
  // skip parameters
  std::transform(LL, LL + numberOfVariables, LL, std::abs<double>);
  std::transform(LR, LR + numberOfVariables, LR, std::abs<double>);
  const double* smax_L = std::max_element(LL, LL + numberOfVariables);
  const double* smax_R = std::max_element(LR, LR + numberOfVariables);
  const double smax    = std::max(*smax_L, *smax_R);

  // We now compute the numerical flux. Note that the scheme is at the moment
  // written in CONSERVATION FORM => no fluctuations, but real fluxes. Later,
  // this will be converted into the left and right fluctuations.

  // evaluate the system matrix just once in the averaged state
  double Qavg[numberOfData]; // size: numberOfVariables+numberOfParameters

  std::transform(QavL, QavL + (numberOfVariables+numberOfParameters), QavR, Qavg,
               [](double a, double b) { return 0.5 * (a + b); });


  double BnMinusIdSmax[numberOfVariables][numberOfVariables] = {0.0}; // size: numberOfVariables * numberOfVariables
  double BnPlusIdSmax[numberOfVariables][numberOfVariables] = {0.0}; // size: numberOfVariables * numberOfVariables
  {
    // skip parameters
    std::copy_n (Bn[0], numberOfVariables2, BnMinusIdSmax[0]);
    std::copy_n (Bn[0], numberOfVariables2, BnPlusIdSmax[0]);
    for (int i = 0; i < numberOfVariables; i++) {
      BnMinusIdSmax[i][i] -= smax;
      BnPlusIdSmax [i][i] += smax;
    }
  }

  idx2 idx_gradQ(DIMENSIONS, numberOfVariables);
  double gradQ[DIMENSIONS][numberOfData] = {0.0};
  double ncp[numberOfVariables]               = {0.0};

  std::fill_n (FL, basisSize * numberOfVariables, 0.0);
  std::fill_n (FR, basisSize * numberOfVariables, 0.0);

  {
    idx2 idx_FLR(basisSize, numberOfVariables);
    idx2 idx_QLR(basisSize, numberOfData);

    for (int j = 0; j < basisSize; j++) {
      if(useNCP) { // we don't use matrixB but the NCP call here.

        for(int l=0; l < numberOfData; l++) {
          gradQ[direction][l] = QR[idx_QLR(j, l)] - QL[idx_QLR(j, l)];
	  //          Qavg[l] = 0.5 * (QavL[idx_QLR(j, l)] + QavR[idx_QLR(j, l)]);
        }

        for(int l= numberOfVariables; l < numberOfData; l++) {
	  //          Qavg[l] = 0.5 * (QavL[idx_QLR(j, l)] + QavR[idx_QLR(j, l)]);
        }

        solver.nonConservativeProduct(Qavg, gradQ[0], ncp);

	for (int k = 0; k < numberOfVariables ; k++) {
          FL[idx_FLR(j, k)] = 0.5 * (ncp[k] - smax * gradQ[direction][k]);
          FR[idx_FLR(j, k)] = 0.5 * (ncp[k] + smax * gradQ[direction][k]);
	}
      }
    }
  }
}    
        // {

    // skip parameters
    // std::copy_n (Bn[0], numberOfVariables2, BnMinusIdSmax[0]);
    // std::copy_n (Bn[0], numberOfVariables2, BnPlusIdSmax[0]);
//    for (int i = 0; i < numberOfVariables; i++) {
       //BnMinusIdSmax[i][i] -= smax;
       //BnPlusIdSmax [i][i] += smax;
//    }


//  double Q[basisSize*numberOfData] = {0.0}; // size : basisSize * (numberOfVariables+numberOfParameters)
//  std::transform(QR, QR + basisSize * numberOfData, QL, Q,
//                 [](double a, double b) { return 0.5 * (a - b); });

//  std::fill_n (FL, basisSize * numberOfVariables, 0.0);
//  std::fill_n (FR, basisSize * numberOfVariables, 0.0);
    
//    for (int i = 0; i < basisSize; i++) {
      // FL(:,i) = 0.5 * (Bn - Id*smax)(:,:) * (QR(:,i) - QL(:,i))
      // FR(:,i) = 0.5 * (Bn + Id*smax)(:,:) * (QR(:,i) - QL(:,i))
      // skip parameters

//      for (int j = 0; j < numberOfVariables; j++) {
//         for (int k = 0; k < numberOfVariables; k++) {
//           FL[idx_FLR(i, k)] +=
// //              s_max * Q[idx_QLR(i, k)];
//                * Q[idx_QLR(i, k)];
//           FR[idx_FLR(i, j)] +=
//               BnPlusIdSmax[k][j]  * Q[idx_QLR(i, k)];
//         }
// //      }
//     }
//   }
// }

}  // namespace c
}  // namespace generic
}  // namespace aderdg
}  // namespace kernels
