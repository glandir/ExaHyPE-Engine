/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
template <typename SolverType>
void kernels::aderdg::generic::c::solutionAdjustment(
    SolverType& solver,
    double* luh, const tarch::la::Vector<DIMENSIONS, double>& center,
    const tarch::la::Vector<DIMENSIONS, double>& dx, const double t,
    const double dt) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int basisSize          = SolverType::Order+1;
  constexpr int order              = basisSize-1;

  idx3 idx_luh(basisSize, basisSize, numberOfVariables+numberOfParameters);
  
  double x[2];
  for (int i = 0; i < basisSize; i++) {  // loop over dof (Major)
    const double qi = kernels::gaussLegendreNodes[basisSize - 1][i];

    for (int j = 0; j < basisSize; j++) { // (Minor)
      const double qj = kernels::gaussLegendreNodes[basisSize - 1][j];
      
      x[0] = center[0] + dx[0] * (qj - 0.5);
      x[1] = center[1] + dx[1] * (qi - 0.5);

      const double weight =  // Gauss weight
          kernels::gaussLegendreWeights[order][i] *
          kernels::gaussLegendreWeights[order][j];

      solver.adjustPointSolution(x, weight, t, dt, luh + idx_luh(i,j,0));
    }
  }
}
