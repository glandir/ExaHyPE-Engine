/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include <cstring>
#include "../../../../KernelUtils.h"

#if DIMENSIONS == 3

namespace kernels {
namespace aderdg {
namespace generic {
namespace c {

/*
 * For the linear kernels, we need the material parameters in the
 * space-time predictor lQi, time-averaged predictor lQhi,
 * and extrapolated predictor lQhbnd.
 * Currently we simply copy them over from the solution array. 
 * 
 * !!! WARNING: ncp argument BGradQ is a dim x nVar tensor for the linear scheme.
 * 
 * TODO(Dominic): We should distinguish between Linear and NonLinear ADERDGSolvers
 */
template <typename SolverType>
void spaceTimePredictorLinear(SolverType& solver,
    double* lQbnd, double* lFbnd,
    double** tempSpaceTimeUnknowns,
    double** tempSpaceTimeFluxUnknowns,
    double*  tempUnknowns,
    double*  tempFluxUnknowns,
    double*  tempStateSizedVector,
    const double* const luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx,
    const double dt,
    double* tempPointForceSources) {
   constexpr int numberOfVariables  = SolverType::NumberOfVariables;
   constexpr int numberOfParameters = SolverType::NumberOfParameters;
   constexpr int basisSize          = SolverType::Order+1;
   constexpr int basisSize2         = basisSize * basisSize;
   constexpr int basisSize3         = basisSize2 * basisSize;
   constexpr int basisSize4         = basisSize2 * basisSize2;
   constexpr int order              = basisSize - 1;

   double* PSi = tempPointForceSources;    // size: basisSize3 * (basisSize + 1) * // TODO(Dominic): Put in tempSpaceTimeUnknowns[1]. tempSpaceTimeUnknowns was an array from the start. Why did noone simply increase the size by 1?	
   double* lQi = tempSpaceTimeUnknowns[0]; // size: basisSize3 * (basisSize + 1) * (numberOfVariables + numberOfParameters);
   std::fill_n(lQi, basisSize3 * (basisSize + 1) * (numberOfVariables + numberOfParameters), 0.0);

   idx5 idx_PSi(basisSize + 1, basisSize, basisSize, basisSize, numberOfVariables);
   idx5 idx_lQi(basisSize + 1, basisSize, basisSize, basisSize, numberOfVariables + numberOfParameters);

   // The zeroth time derivative (time dof number 1) is the initial condition
   // lqh(l,k,j,i,1) += luh(l,k,j,i)
   {
     idx4 idx_luh(basisSize, basisSize, basisSize, numberOfVariables+numberOfParameters);
     for (int i = 0; i < basisSize; i++) {
       for (int j = 0; j < basisSize; j++) {
         for (int k = 0; k < basisSize; k++) {
           // Copy parameters here
           std::copy_n (luh + idx_luh(i, j, k, 0), numberOfVariables+numberOfParameters, 
                        lQi + idx_lQi(0, i, j, k, 0));
         }
       }
     }
   }

   // Add point source to the zeroth time derivative
   for (int j = 0; j < basisSize; j++) {
     for (int k = 0; k < basisSize; k++) {
       for (int l = 0; l < basisSize; l++) {
         for (int m = 0; m < numberOfVariables/* skip parameters */; m++) {
           double sum = 0.0;
           for (int n = 1; n <  basisSize+1; n++) {
             sum = sum +   gaussLegendreWeights[order][n-1]*PSi[idx_PSi(n, j, k, l, m)];
           }
           lQi[idx_lQi(0, j, k, l, m)] += dt*sum/(dx[0]*dx[1]*dx[2]);
         }
       }
     }
   }

   // Add point source to the first time derivative
   for (int j = 0; j < basisSize; j++) {
     for (int k = 0; k < basisSize; k++) {
       for (int l = 0; l < basisSize; l++) {
         for (int n = 0; n < numberOfVariables/* skip parameters */; n++) {
           lQi[idx_lQi(1, j, k, l, n)] += PSi[idx_PSi(0, j, k, l, n)]/(dx[0]*dx[1]*dx[2]);
         }
       }
     }
   }
   double* lFi = tempSpaceTimeFluxUnknowns[0]; // size: basisSize4 * DIMENSIONS * (numberOfVariables + numberOfParameters)
   std::fill_n(lFi+basisSize4*DIMENSIONS*numberOfVariables, basisSize4*numberOfVariables, 0.0); // zero out sources; We should distinguish between Linear and NonLinear solvers
   idx6 idx_lFi(basisSize, basisSize, basisSize, basisSize, DIMENSIONS, numberOfVariables);

   // spatial gradient of q
   double* gradQ = tempSpaceTimeFluxUnknowns[1]; // size: basisSize4 * DIMENSIONS * (numberOfVariables + numberOfParameters)
   std::memset(gradQ, 0,
       basisSize4 * DIMENSIONS * numberOfVariables * sizeof(double));
   idx6 idx_gradQ(basisSize, basisSize, basisSize, basisSize, DIMENSIONS, numberOfVariables);

   // For linear PDE, the fastest space-time predictor is the good old
   // Cauchy-Kovalewski procedure
   for (int i = 0; i < basisSize; i++) {  // time DOFs
     // Compute the derivatives in x direction (independent from the y and z
     // derivatives)
     for (int j = 0; j < basisSize; j++) { // y-loop
       for (int k = 0; k < basisSize; k++) { // z-loop
         // Fortran: gradQ(:,1,:,k,j,i) = 1.0/dx(1) * lqh(:,:,k,j,i) *
         // dudx(:,:)^T
         for (int l = 0; l < basisSize; l++) {  // x-loop
           // Skip parameters
           for (int m = 0; m < numberOfVariables/* skip parameters */; m++) {
             //double sum = 0.0;
             for (int n = 0; n < basisSize; n++) {
               //sum = sum + lQi[idx_lQi(i, j, k, n, m)] *
               //    kernels::dudx[order][l][n];
               gradQ[idx_gradQ(i, j, k, l, 0, m)] +=
                   1.0 / dx[0] * lQi[idx_lQi(i, j, k, n, m)] *
                   kernels::dudx[order][l][n];
             }
             //gradQ[idx_gradQ(i, j, k, l, 0, m)] =    1.0 / dx[0] *sum;
           }
         }
       }
     }

     // y direction (independent from the x and z derivatives)
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         // Fortran: gradQ(:,2,k,:,j,i) = 1.0/dx(2) * lqh(:,k,:,j,i) *
         // dudx(:,:)^T
         for (int l = 0; l < basisSize; l++) {
           // Skip parameters
           for (int m = 0; m < numberOfVariables/* skip parameters */; m++) {
             //double sum = 0.0;
             for (int n = 0; n < basisSize; n++) {
               //sum = sum + lQi[idx_lQi(i, j, n, k, m)] *
               //      kernels::dudx[order][l][n];
               gradQ[idx_gradQ(i, j, l, k, 1, m)] +=
                   1.0 / dx[1] * lQi[idx_lQi(i, j, n, k, m)] *
                   kernels::dudx[order][l][n];
             }
             // gradQ[idx_gradQ(i, j, l, k, 1, m)] = 1.0 / dx[1] * sum;
           }
         }
       }
     }

     // z direction (independent from the x and y derivatives)
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         // Fortran: gradQ(:,3,k,j,:,i) = 1.0/dx(3) * lqh(:,k,j,:,i) *
         // dudx(:,:)^T
         for (int l = 0; l < basisSize; l++) {
           // Skip parameters
           for (int m = 0; m < numberOfVariables/* skip parameters */; m++) {
             //double sum = 0.0;
             for (int n = 0; n < basisSize; n++) {
               //sum = sum + lQi[idx_lQi(i, n, j, k, m)] *
               //      kernels::dudx[order][l][n];

               gradQ[idx_gradQ(i, l, j, k, 2, m)] +=
                   1.0 / dx[2] * lQi[idx_lQi(i, n, j, k, m)] *
                   kernels::dudx[order][l][n];
             }
             //gradQ[idx_gradQ(i, l, j, k, 2, m)] = 1.0 / dx[2] * sum;
           }
         }
       }
     }

     // Compute the fluxes
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         for (int l = 0; l < basisSize; l++) {
           solver.ncp(&lQi[idx_lQi(i, j, k, l, 0)],
               &gradQ[idx_gradQ(i, j, k, l, 0, 0)],
               &lFi[idx_lFi(i, j, k, l, 0, 0)]);
         }
       }
     }

     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         for (int l = 0; l < basisSize; l++) {
           // lQi(:,l,k,j,i+1) -= SUM(lFi(:,1:nDim,l,k,j,i), dim=2)
           for (int m = 0; m < DIMENSIONS; m++) {
             for (int n = 0; n < numberOfVariables/* skip parameters */; n++) {
               lQi[idx_lQi(i + 1, j, k, l, n)] -= lFi[idx_lFi(i, j, k, l, m, n)];
             }
           }
         }
       }
     }

     // Copy parameters
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         for (int l = 0; l < basisSize; l++) {
           for (int n = numberOfVariables/* skip parameters */;
               n < numberOfVariables + numberOfParameters; n++) {
             lQi[idx_lQi(i + 1, j, k, l, n)] = lQi[idx_lQi(i, j, k, l, n)];
           }
         }
       }
     }
   }

   double* lQh = tempUnknowns;
   idx4 idx_lQh(basisSize, basisSize, basisSize, numberOfVariables + numberOfParameters);

   // Immediately compute the time-averaged space-time polynomials
   // Fortran: lQh(:,:,:,:) = lQi(:,:,:,:,1)
   for (int i = 0; i < basisSize; i++) {
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         // Copy parameters here
         for (int l = 0; l < numberOfVariables + numberOfParameters; l++) {
           lQh[idx_lQh(i, j, k, l)] = lQi[idx_lQi(0, i, j, k, l)];
         }
       }
     }
   }

   double dtavFac = 0.5 * dt;
   for (int i = 1; i < basisSize; i++) {
     // Fortran: lQh(:,:,:,:) += dtavFac * lQi(:,i,:,:,:)
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         for (int l = 0; l < basisSize; l++) {
           // Skip parameters here
           for (int m = 0; m < numberOfVariables/* skip parameters */; m++) {
             lQh[idx_lQh(j, k, l, m)] += dtavFac * lQi[idx_lQi(i, j, k, l, m)];
           }
         }
       }
     }
     dtavFac *= dt / (i + 2);
   }

   double* lFh = tempFluxUnknowns;
   std::fill_n(lFh+basisSize3*DIMENSIONS*numberOfVariables, basisSize3*numberOfVariables, 0.0); // zero out sources; TODO(Dominic): We should distinguish between Linear and NonLinear solvers
   idx5 idx_lFh(DIMENSIONS, basisSize, basisSize, basisSize, numberOfVariables);

   // lFh(m,l,k,j,i) = lFi(m,i,l,k,j,1)
   for (int i = 0; i < DIMENSIONS; i++) {
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < basisSize; k++) {
         for (int l = 0; l < basisSize; l++) {
           // Skip parameters
           for (int m = 0; m < numberOfVariables/* skip parameters */; m++) {
             lFh[idx_lFh(i, j, k, l, m)] = lFi[idx_lFi(0, j, k, l, i, m)];
           }
         }
       }
     }
   }

   dtavFac = 0.5 * dt;
   for (int i = 1; i < basisSize; i++) {
     // Fortran: lFh(n,m,l,k,j) += dtavFac*lFi(n,j,m,l,k,i)
     for (int j = 0; j < DIMENSIONS; j++) {
       for (int k = 0; k < basisSize; k++) {
         for (int l = 0; l < basisSize; l++) {
           for (int m = 0; m < basisSize; m++) {
             // Skip parameters
             for (int n = 0; n < numberOfVariables/* skip parameters */; n++) {
               lFh[idx_lFh(j, k, l, m, n)] +=
                   dtavFac * lFi[idx_lFi(i, k, l, m, j, n)];
             }
           }
         }
       }
     }
     dtavFac *= dt / (i + 2);
   }


   // Add point source to the right hand side
   for (int j = 0; j < DIMENSIONS; j++) {
     for (int k = 0; k < basisSize; k++) {
       for (int l = 0; l < basisSize; l++) {
         for (int m = 0; m < basisSize; m++) {
           for (int n = 0; n < numberOfVariables/* skip parameters */; n++) {
             double sum = 0.0;
             for (int n0 = 1; n0 <  basisSize+1; n0++) {
               sum = sum +   gaussLegendreWeights[order][n0-1]*PSi[idx_PSi(n0, k, l, m, n)];
             }
             lFh[idx_lFh(j, k, l, m, n)] += sum/((DIMENSIONS+1)*(dx[0]*dx[1]*dx[2]));
           }
         }
       }
     }
   }


   // Compute the boundary-extrapolated values for Q and F*n
   std::memset(lQbnd, 0,
       2 * DIMENSIONS * basisSize2 * (numberOfVariables + numberOfParameters) * sizeof(double));
   std::memset(lFbnd, 0,
       2 * DIMENSIONS * basisSize2 * numberOfVariables * sizeof(double));
   idx4 idx_lQbnd(2 * DIMENSIONS, basisSize, basisSize, numberOfVariables + numberOfParameters);
   idx4 idx_lFbnd(2 * DIMENSIONS, basisSize, basisSize, numberOfVariables);

   // x-direction: face 1 (left) and face 2 (right)
   for (int i = 0; i < basisSize; i++) {
     for (int j = 0; j < basisSize; j++) {
       // Fortran:
       // lQbnd(:,j,i,1) = lQh(:,:,j,i) * FLCoeff(:)
       // lQbnd(:,j,i,2) = lQh(:,:,j,i) * FRCoeff(:)
       // Copy parameters
       for (int k = 0; k < numberOfVariables + numberOfParameters; k++) {
         for (int l = 0; l < basisSize; l++) {
           // left
           lQbnd[idx_lQbnd(0, i, j, k)] +=
               lQh[idx_lQh(i, j, l, k)] * kernels::FLCoeff[order][l];

           // right
           lQbnd[idx_lQbnd(1, i, j, k)] +=
               lQh[idx_lQh(i, j, l, k)] * kernels::FRCoeff[order][l];
         }
       }
     }
   }

   for (int i = 0; i < basisSize; i++) {
     for (int j = 0; j < basisSize; j++) {
       // Fortran:
       // lFbnd(:,j,i,1) = lFh(:,:,j,i,1) * FLCoeff(:)
       // lFbnd(:,j,i,2) = lFh(:,:,j,i,1) * FRCoeff(:)
       // Skip parameters
       for (int k = 0; k < numberOfVariables/* skip parameters */; k++) {
         for (int l = 0; l < basisSize; l++) {
           // left
           lFbnd[idx_lFbnd(0, i, j, k)] +=
               lFh[idx_lFh(0, i, j, l, k)] * kernels::FLCoeff[order][l];

           // right
           lFbnd[idx_lFbnd(1, i, j, k)] +=
               lFh[idx_lFh(0, i, j, l, k)] * kernels::FRCoeff[order][l];
         }
       }
     }
   }

   // y-direction: face 3 (left) and face 4 (right)
   for (int i = 0; i < basisSize; i++) {
     for (int j = 0; j < basisSize; j++) {
       // Fortran:
       // lQbnd(:,j,i,3) = lQh(:,j,:,i) * FLCoeff(:)
       // lQbnd(:,j,i,4) = lQh(:,j,:,i) * FRCoeff(:)

       // Copy parameters
       for (int k = 0; k < numberOfVariables + numberOfParameters; k++) {
         for (int l = 0; l < basisSize; l++) {
           // left
           lQbnd[idx_lQbnd(2, i, j, k)] +=
               lQh[idx_lQh(i, l, j, k)] * kernels::FLCoeff[order][l];

           // right
           lQbnd[idx_lQbnd(3, i, j, k)] +=
               lQh[idx_lQh(i, l, j, k)] * kernels::FRCoeff[order][l];
         }
       }
     }
   }

   for (int i = 0; i < basisSize; i++) {
     for (int j = 0; j < basisSize; j++) {
       // lFbnd(:,j,i,3) = lFh(:,j,:,i,2) * FLCoeff(:)
       // lFbnd(:,j,i,4) = lFh(:,j,:,i,2) * FRCoeff(:)
       // skip parameters
       for (int k = 0; k < numberOfVariables/* skip parameters */; k++) {
         for (int l = 0; l < basisSize; l++) {
           // left
           lFbnd[idx_lFbnd(2, i, j, k)] +=
               lFh[idx_lFh(1, i, l, j, k)] * kernels::FLCoeff[order][l];

           // right
           lFbnd[idx_lFbnd(3, i, j, k)] +=
               lFh[idx_lFh(1, i, l, j, k)] * kernels::FRCoeff[order][l];
         }
       }
     }
   }

   // z-direction: face 5 (left) and face 6 (right)
   for (int i = 0; i < basisSize; i++) {
     for (int j = 0; j < basisSize; j++) {
       // Fortran:
       // lQbnd(:,j,i,5) = lQh(:,j,i,:) * FLCoeff(:)
       // lQbnd(:,j,i,6) = lQh(:,j,i,:) * FRCoeff(:)
       for (int k = 0; k < numberOfVariables + numberOfParameters; k++) {
         // Copy parameters
         for (int l = 0; l < basisSize; l++) {
           // left
           lQbnd[idx_lQbnd(4, i, j, k)] +=
               lQh[idx_lQh(l, i, j, k)] * kernels::FLCoeff[order][l];

           // right
           lQbnd[idx_lQbnd(5, i, j, k)] +=
               lQh[idx_lQh(l, i, j, k)] * kernels::FRCoeff[order][l];
         }
       }
     }
   }

   for (int i = 0; i < basisSize; i++) {
     for (int j = 0; j < basisSize; j++) {
       for (int k = 0; k < numberOfVariables/* skip parameters */; k++) {
         // Fortran:
         // lFbnd(:,j,i,5) = lFh(:,j,i,:,3) * FLCoeff(:)
         // lFbnd(:,j,i,6) = lFh(:,j,i,:,3) * FRCoeff(:)
         // Skip parameters
         for (int l = 0; l < basisSize; l++) {
           // left
           lFbnd[idx_lFbnd(4, i, j, k)] +=
               lFh[idx_lFh(2, l, i, j, k)] * kernels::FLCoeff[order][l];

           // right
           lFbnd[idx_lFbnd(5, i, j, k)] +=
               lFh[idx_lFh(2, l, i, j, k)] * kernels::FRCoeff[order][l];
         }
       }
     }
   }
}

}  // namespace c
}  // namespace generic
}  // namespace aderdg
}  // namespace kernels

#endif  // DIMENSINS == 3
