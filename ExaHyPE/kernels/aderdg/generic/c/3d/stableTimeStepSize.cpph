/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
#include "../../../../KernelUtils.h"

#include <algorithm>
#include <cmath>
#include <limits>

#include "tarch/la/Vector.h" 

template <typename SolverType>
double kernels::aderdg::generic::c::stableTimeStepSize(
    SolverType& solver,
    const double* const luh,
    double* lambda,
    const tarch::la::Vector<DIMENSIONS, double>& dx) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int order              = SolverType::Order;
  constexpr int basisSize          = SolverType::Order+1;
  constexpr double cflFactor       = 0.9;
  constexpr double PNPM[10]        = {1.0,   0.33,  0.17, 0.1,  0.069,
                                      0.045, 0.038, 0.03, 0.02, 0.015};

  idx4 idx_luh(basisSize, basisSize, basisSize, numberOfData);
  
  double dt = std::numeric_limits<double>::max();
  for (int i = 0; i < basisSize; i++) {
    for (int j = 0; j < basisSize; j++) {
      for (int k = 0; k < basisSize; k++) {
        double denominator = 0.0;
        for (int d = 0; d < DIMENSIONS; d++) {
          solver.eigenvalues(luh + idx_luh(i,j,k,0), d, lambda);
          
          double maxEigenvalue = 0.0;
          for (int ivar = 0; ivar < numberOfVariables; ivar++) {
            maxEigenvalue = std::max(fabs(lambda[ivar]), maxEigenvalue);
          }
          denominator += maxEigenvalue / dx[d];
        }

        dt = std::min(dt, cflFactor * PNPM[order] / 
                              denominator);  // order N = basisSize-1
      }
    }
  }

  return dt;
}
