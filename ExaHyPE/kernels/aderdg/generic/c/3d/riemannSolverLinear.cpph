/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include <algorithm>
#include <cstring>

#include "../../../../KernelUtils.h"

namespace kernels {
namespace aderdg {
namespace generic {
namespace c {

template <typename SolverType>
void riemannSolverLinear(SolverType& solver, double* FL, double* FR,
                         const double* const QL, const double* const QR,
                         double*  tempFaceUnknowns,
                         double** tempStateSizedVectors,
                         double** tempStateSizedSquareMatrices,
                         const double dt,
                         const int normalNonZero) {
  /*
   * For the linear kernels, we need the material parameters in the
   * extrapolated predictor.
   * We compute the averages of the material parameters but
   * do not use them in the max eigenvalue calculation.
   * 
   * Consider numberOfParameters in:
   * QL,QR,QavL,QavR,Qav,
   * 
   * Not necessary to consider numberOfParameters in
   * FL,FR,LL,LR,Bn,BnMinusIdSmax,BnPlusIdSmax
   */
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfVariables2 = numberOfVariables*numberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int basisSize          = SolverType::Order+1;
  constexpr int basisSize2         = basisSize * basisSize;
  constexpr int order              = basisSize - 1;

  // Compute the average variables and parameters from the left and the right
  double* QavL = tempStateSizedVectors[0]; // size: numberOfVariables+numberOfParameters
  double* QavR = tempStateSizedVectors[1]; // size: numberOfVariables+numberOfParameters
  {
    idx3 idx_QLR(basisSize, basisSize, numberOfVariables+numberOfParameters);
    std::fill_n (QavL, (numberOfVariables+numberOfParameters), 0.0);
    std::fill_n (QavR, (numberOfVariables+numberOfParameters), 0.0);
    
    for (int i = 0; i < basisSize; i++) {
      for (int j = 0; j < basisSize; j++) {
        const double weight = kernels::gaussLegendreWeights[order][i] *
                              kernels::gaussLegendreWeights[order][j];

        for (int k = 0; k < numberOfVariables+numberOfParameters; k++) {
          QavL[k] += weight * QL[idx_QLR(i, j, k)];
          QavR[k] += weight * QR[idx_QLR(i, j, k)];
        }
      }
    }
  }

  double* LL = tempStateSizedVectors[2]; // size: numberOfVariables
  double* LR = tempStateSizedVectors[3]; // size: numberOfVariables
  solver.eigenvalues(QavL, normalNonZero, LL);
  solver.eigenvalues(QavR, normalNonZero, LR);

  // Here, we implement a very simple Rusanov scheme with scalar dissipation
  // (smax*Id).
  // We can change this into a more sophisticated Osher or HLLEM Riemann solver
  // whenever needed!
  // skip parameters
  std::transform(LL, LL + numberOfVariables, LL, std::abs<double>);
  std::transform(LR, LR + numberOfVariables, LR, std::abs<double>);
  const double* smax_L = std::max_element(LL, LL + numberOfVariables);
  const double* smax_R = std::max_element(LR, LR + numberOfVariables);
  const double  smax   = std::max(*smax_L, *smax_R);

  // We now compute the numerical flux. Note that the scheme is at the moment
  // written in CONSERVATION FORM => no fluctuations, but real fluxes. Later,
  // this will be converted into the left and right fluctuations.

  
  // TODO: NCP and MatrixB also for Linear Kernels in 3D! 
  // TODO(Dominic): Still relevant? matrixb seems to be used?
  
  // evaluate the system matrix just once in the averaged state
  double* Qav = tempStateSizedVectors[4]; // size: numberOfVariables+numberOfParameters
  // Qav = 0.5 * (QavL + QavR) (includes parameters)
  std::transform(QavL, QavL + (numberOfVariables+numberOfParameters), QavR, Qav,
                 [](double a, double b) { return 0.5 * (a + b); });
  double* Bn = tempStateSizedSquareMatrices[0]; // size: numberOfVariables * numberOfVariables
  
  solver.coefficientMatrix(Qav, normalNonZero, Bn);

  double* BnMinusIdSmax = tempStateSizedSquareMatrices[1]; // size: numberOfVariables * numberOfVariables
  double* BnPlusIdSmax  = tempStateSizedSquareMatrices[2]; // size: numberOfVariables * numberOfVariables
  std::copy_n (Bn, numberOfVariables2, BnMinusIdSmax);
  std::copy_n (Bn, numberOfVariables2, BnPlusIdSmax);
  {
    idx2 idx_BnPM(numberOfVariables, numberOfVariables);
    // skip parameters
    for (int i = 0; i < numberOfVariables; i++) {
      BnMinusIdSmax[idx_BnPM(i, i)] -= smax;
      BnPlusIdSmax [idx_BnPM(i, i)] += smax;
    }
  }

  double* Q = tempFaceUnknowns; // size: basisSize2 * (numberOfVariables+numberOfParameters)
  std::transform(QR, QR + basisSize2 * (numberOfVariables+numberOfParameters), QL, Q,
                 [](double a, double b) { return 0.5 * (a - b); });

  std::fill_n (FL, basisSize2 * numberOfVariables, 0.0);
  std::fill_n (FR, basisSize2 * numberOfVariables, 0.0);
  {
    idx2 idx_BnPM(numberOfVariables, numberOfVariables);
    idx3 idx_FLR(basisSize, basisSize, numberOfVariables);
    idx3 idx_QLR(basisSize, basisSize, numberOfVariables+numberOfParameters);
    for (int i = 0; i < basisSize; i++) {
      for (int j = 0; j < basisSize; j++) {
        // FL(:,j,i) = 0.5 * (Bn - Id*smax)(:,:) * (QR(:,j,i) - QL(:,j,i))
        // FR(:,j,i) = 0.5 * (Bn + Id*smax)(:,:) * (QR(:,j,i) - QL(:,j,i))
        for (int k = 0; k < numberOfVariables; k++) {
          for (int l = 0; l < numberOfVariables; l++) {
            FL[idx_FLR(i, j, k)] +=
                BnMinusIdSmax[idx_BnPM(l, k)] * Q[idx_QLR(i, j, l)];
            FR[idx_FLR(i, j, k)] +=
                BnPlusIdSmax[idx_BnPM(l, k)] * Q[idx_QLR(i, j, l)];
          }
        }
      }
    }
  }
}

}  // namespace c
}  // namespace generic
}  // namespace aderdg
}  // namespace kernels
