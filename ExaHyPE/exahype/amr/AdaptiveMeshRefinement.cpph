template<class CellDescription,class CellDescriptionsHeap>
exahype::solvers::Solver::AugmentationControl
exahype::amr::augmentationCriterion(
    const int solverNumber,
    const typename CellDescription::Type type,
    const int level,
    const tarch::la::Vector<THREE_POWER_D, int>&
    neighbourCellDescriptionsIndices) {
  // left,right,front,back,(bottom,top)
#if DIMENSIONS == 2
  constexpr int neighbourPositions[4] = {3, 5, 1, 7};
#else
  constexpr int neighbourPositions[6] = {12, 14, 10, 16, 4, 22};
#endif
  bool nextToAncestor = false;
  bool nextToCell = false;

  for (int i = 0; i < DIMENSIONS_TIMES_TWO; i++) {
    const int neighbourCellDescriptionIndex =
        neighbourCellDescriptionsIndices[neighbourPositions[i]];
    if (CellDescriptionsHeap::getInstance().isValidIndex(neighbourCellDescriptionIndex)) {
      for (CellDescription& pNeighbour : CellDescriptionsHeap::getInstance().getData(
          neighbourCellDescriptionIndex)) {
        if (pNeighbour.getSolverNumber() == solverNumber &&
            pNeighbour.getLevel() == level) {
          switch (pNeighbour.getType()) {
            case CellDescription::Ancestor:
            case CellDescription::EmptyAncestor:
              nextToAncestor = true;
              break;
            case CellDescription::Cell:
              nextToCell = true;
              break;
            default:
              break;
          }
        }
      }
    }
  }

  // NOTE: The order below is important.
  if (nextToCell && nextToAncestor) {
    return exahype::solvers::Solver::AugmentationControl::NextToCellAndAncestor;
  }
  if (nextToAncestor) {
    return exahype::solvers::Solver::AugmentationControl::NextToAncestor;
  }
  if (nextToCell) {
    return exahype::solvers::Solver::AugmentationControl::NextToCell;
  }
  // Erase otherwise.
  return exahype::solvers::Solver::AugmentationControl::Default;
}

template<class CellDescription>
void
exahype::amr::resetErasingOrDeaugmentingRequestIfParent(
    CellDescription& coarseGridCellDescription) {
  switch (coarseGridCellDescription.getRefinementEvent()) {
    case CellDescription::DeaugmentingRequested:
      assertion1(coarseGridCellDescription.getType()==CellDescription::EmptyDescendant ||
                 coarseGridCellDescription.getType()==CellDescription::Descendant,coarseGridCellDescription.toString());
      coarseGridCellDescription.setRefinementEvent(CellDescription::None);
      break;
    case CellDescription::ErasingRequested:
      assertion1(coarseGridCellDescription.getType()==CellDescription::Cell,
                 coarseGridCellDescription.toString());
      coarseGridCellDescription.setRefinementEvent(CellDescription::ChangeToDescendantRequested);
      break;
    default:
      break;
  }
}

template <class CellDescription,class CellDescriptionHeap>
exahype::solvers::Solver::SubcellPosition
exahype::amr::computeSubcellPositionOfCellOrAncestorOrEmptyAncestor(
    const CellDescription& pChild) {
  // 1. Initialisation.
  exahype::solvers::Solver::SubcellPosition subcellPosition;
  if ((pChild.getType()==CellDescription::Cell
      || pChild.getType()==CellDescription::Ancestor
      || pChild.getType()==CellDescription::EmptyAncestor)
      && CellDescriptionHeap::getInstance().isValidIndex(pChild.getParentIndex())) {
    CellDescription* pParent = 0;
    int parentElement=0;
    for (auto& p : CellDescriptionHeap::getInstance().getData(pChild.getParentIndex())) {
      if (p.getSolverNumber()==pChild.getSolverNumber()) {
        subcellPosition.parentCellDescriptionsIndex = pChild.getParentIndex();
        subcellPosition.parentElement               = parentElement;
        pParent = &p;
        break;
      }
      ++parentElement;
    }

    // 2. If the current parent is an EmptyAncestor,
    // try to determine iteratively the next parent that holds data.
    if (subcellPosition.parentElement!=exahype::solvers::Solver::NotFound) {
      while (pParent->getType()==CellDescription::EmptyAncestor &&
          CellDescriptionHeap::getInstance().isValidIndex(pParent->getParentIndex())) {
        const int currentParentIndex = pParent->getParentIndex();
        int parentElement=0;
        for (auto& p : CellDescriptionHeap::getInstance().getData(currentParentIndex)) {  // Loop over cell descriptions
          if (p.getSolverNumber() == pChild.getSolverNumber()) {
            subcellPosition.parentCellDescriptionsIndex = pParent->getParentIndex();
            subcellPosition.parentElement               = parentElement;
            pParent = &p;
            break;
          }
          ++parentElement;
        }
      }
      assertion2(pParent->getType()==CellDescription::Ancestor ||
                 pParent->getType()==CellDescription::EmptyAncestor,
                 pChild.toString(),pParent->toString());

      if (pParent->getType()==CellDescription::EmptyAncestor) {
        exahype::solvers::Solver::SubcellPosition subcellPositionWithInvalidIndices;
        return subcellPositionWithInvalidIndices;
      }

      subcellPosition.subcellIndex =
          computeSubcellIndex(
              pChild.getOffset(),pChild.getSize(),
              pParent->getOffset());
      subcellPosition.levelDifference =
          pChild.getLevel() - pParent->getLevel();
    }
  }

  return subcellPosition;
}

template <class CellDescription,class CellDescriptionHeap>
exahype::solvers::Solver::SubcellPosition
exahype::amr::computeSubcellPositionOfCellOrAncestor(
    const CellDescription& pChild) {
  exahype::solvers::Solver::SubcellPosition subcellPosition;
  if (pChild.getType()==CellDescription::Cell
      || pChild.getType()==CellDescription::Ancestor) {
    subcellPosition = computeSubcellPositionOfCellOrAncestorOrEmptyAncestor
        <CellDescription,CellDescriptionHeap>(pChild);
  }

  return subcellPosition;
}

template <class CellDescription,class CellDescriptionHeap>
exahype::solvers::Solver::SubcellPosition
exahype::amr::computeSubcellPositionOfDescendant(
    const CellDescription& pChild) {
  assertion1(pChild.getType()==CellDescription::Descendant,pChild.toString());
  assertion1(CellDescriptionHeap::getInstance().isValidIndex(
      pChild.getParentIndex()),pChild.getParentIndex());

  // 1. Initialisation.
  exahype::solvers::Solver::SubcellPosition subcellPosition;
  subcellPosition.parentCellDescriptionsIndex = pChild.getParentIndex();
  subcellPosition.parentElement=exahype::solvers::Solver::NotFound;
  CellDescription* pParent = 0;
  int parentElement=0;
  for (auto& p : CellDescriptionHeap::getInstance().getData(
      pChild.getParentIndex())) {
    if (p.getSolverNumber()==pChild.getSolverNumber()) {
      subcellPosition.parentElement = parentElement;
      pParent = &p;
      break;
    }
    ++parentElement;
  }
  // Descendant pChild must always have
  // a parent in the parent's cell description array.
  assertion1(pParent!=0,pChild.toString());

  // 2. If the current parent is an EmptyAncestor,
  // try to determine iteratively the next parent that holds data.
  while (pParent->getType()==CellDescription::EmptyDescendant) {
    const int currentParentIndex =
        pParent->getParentIndex();
    assertion1(CellDescriptionHeap::getInstance().isValidIndex(
        currentParentIndex),currentParentIndex); // Must always hold if the current parent is an (Empty)Descendant
    int parentElement=0;
    for (auto& p : CellDescriptionHeap::getInstance().getData(currentParentIndex)) {
      if (p.getSolverNumber()==pChild.getSolverNumber()) {
        subcellPosition.parentCellDescriptionsIndex = pParent->getParentIndex();
        subcellPosition.parentElement               = parentElement;
        pParent = &p;
        break;
      }
      ++parentElement;
    }
  }
  assertion(pParent->getType() == CellDescription::Descendant ||
            pParent->getType() == CellDescription::Cell);

  subcellPosition.subcellIndex =
      computeSubcellIndex(
          pChild.getOffset(),pChild.getSize(),
          pParent->getOffset());
  subcellPosition.levelDifference =
      pChild.getLevel() - pParent->getLevel();

  return subcellPosition;
}

template <class CellDescription,class CellDescriptionHeap,bool topMost>
exahype::solvers::Solver::SubcellPosition
exahype::amr::computeSubcellPositionOfDescendant(
    const CellDescription& pChild) {
  assertion1(pChild.getType()==CellDescription::Descendant,pChild.toString());
  assertion1(CellDescriptionHeap::getInstance().isValidIndex(
      pChild.getParentIndex()),pChild.getParentIndex());

  // 1. Initialisation.
  exahype::solvers::Solver::SubcellPosition subcellPosition;
  subcellPosition.parentCellDescriptionsIndex = pChild.getParentIndex();
  subcellPosition.parentElement=exahype::solvers::Solver::NotFound;
  CellDescription* pParent = 0;
  int parentElement=0;
  for (auto& p : CellDescriptionHeap::getInstance().getData(
      pChild.getParentIndex())) {
    if (p.getSolverNumber()==pChild.getSolverNumber()) {
      subcellPosition.parentElement = parentElement;
      pParent = &p;
      break;
    }
    ++parentElement;
  }
  // Descendant pChild must always have
  // a parent in the parent's cell description array.
  assertion1(pParent!=0,pChild.toString());

  // 2. If the current parent is an EmptyAncestor,
  // try to determine iteratively the next parent that holds data.
  while (
      pParent->getType()==CellDescription::EmptyDescendant
      || (topMost && pParent->getType()==CellDescription::Descendant)
  ) {
    const int currentParentIndex =
        pParent->getParentIndex();
    assertion1(CellDescriptionHeap::getInstance().isValidIndex(
        currentParentIndex),currentParentIndex); // Must always hold if the current parent is an (Empty)Descendant
    int parentElement=0;
    for (auto& p : CellDescriptionHeap::getInstance().getData(currentParentIndex)) {
      if (p.getSolverNumber()==pChild.getSolverNumber()) {
        subcellPosition.parentCellDescriptionsIndex = pParent->getParentIndex();
        subcellPosition.parentElement               = parentElement;
        pParent = &p;
        break;
      }
      ++parentElement;
    }
  }
  assertion(pParent->getType() == CellDescription::Descendant ||
            pParent->getType() == CellDescription::Cell);

  subcellPosition.subcellIndex =
      computeSubcellIndex(
          pChild.getOffset(),pChild.getSize(),
          pParent->getOffset());
  subcellPosition.levelDifference =
      pChild.getLevel() - pParent->getLevel();

  return subcellPosition;
}
