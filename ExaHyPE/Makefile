# This is the core-makefile for ExaHyPE
# generated by the Peano Development Tools (PDT)


# *********************************************************************************************
# README
# *********************************************************************************************
#
# Available configuration Parameters for ExaHyPE
#
# export variable  |  default-value  |  further values         |  description
#--------------------------------------------------------------------------------------------------
# ARCHITECTURE        CPU               Phi, KNL, HSW             Hardware-plattfrom
# COMPILER            Intel             GNU                       Used compiler (and linker)
# MODE                Release           Debug, Profile, Asserts   Verbosity and Debug level
# SHAREDMEM           None              OMP, TBB                  Shared-memory parallelisation
# DISTRIBUTEDMEM      None              MPI                       Distributed-memory parallelisation
# BOUNDARYCONDITIONS  None              Periodic                  Type of boundary conditions
# *********************************************************************************************

SHELL = bash
tolower = $(shell echo $(1) | tr '[:upper:]' '[:lower:]')

# ************************************************

#
# Set default values of configuration parameters
ifeq ($(ARCHITECTURE),)
	ARCHITECTURE=CPU
endif
ifeq ($(COMPILER),)
	COMPILER=Intel
endif
ifeq ($(MODE),)
	MODE=Release
endif
ifeq ($(SHAREDMEM),)
	SHAREDMEM=None
endif
ifeq ($(DISTRIBUTEDMEM),)
	DISTRIBUTEDMEM=None
endif
ifeq ($(BOUNDARYCONDITIONS),)
	BOUNDARYCONDITIONS=None
endif

# ************************************************
#
#Set compiler and linker flags which hold for all combinations
COMPILER_CFLAGS=-fstrict-aliasing -std=c++0x
COMPILER_LFLAGS=

# ************************************************
#
#Set compiler and linker flags for the different Debug/Release modes
ifeq ($(call tolower,$(MODE)),release)
	# Settings for the Release mode
	# ----------------------------------------------
	COMPILER_CFLAGS += 
	COMPILER_LFLAGS +=

else ifeq ($(call tolower,$(MODE)),debug)
	# Settings for the Debug mode
	# --------------------------------------------
	COMPILER_CFLAGS += -DDebug -DAsserts -DTrackGridStatistics
	COMPILER_LFLAGS +=

else ifeq ($(call tolower,$(MODE)),profile)
	# Settings for the Profile mode
	# --------------------------------------------
	COMPILER_CFLAGS += -DPerformanceAnalysis -DTrackGridStatistics -p -pg
	COMPILER_LFLAGS += -p -pg

else ifeq ($(call tolower,$(MODE)),asserts)
	# Settings for the Adderst mode
	# --------------------------------------------
	COMPILER_CFLAGS += -DAsserts -g3 -DTrackGridStatistics
	COMPILER_LFLAGS += -g3

else
	# Option not recognized
	# ----------------------------------------------
	$(error Unknown option '$(MODE)' for variable [MODE])
endif


# ************************************************
#
#Set compiler and linker flags for the different conmpilers
ifeq ($(call tolower,$(COMPILER)),intel)
	# Settings for the Intel Compiler
	# ----------------------------------------------
	ifndef $(EXAHYPE_CC)
	  EXAHYPE_CC=icpc
	endif
	ifndef $(CC)
	  CC=icpc
	endif
	ifndef $(EXAHYPE_FC)
	  EXAHYPE_FC=ifort
	endif
	ifndef $(FC)
	  FC=ifort
	endif
	
	FCOMPILER_CFLAGS  += -r8 -cpp
	LINK_FORTRAN      += -lifcore

	COMPILER_CFLAGS   +=  -restrict
	COMPILER_LFLAGS   +=

else ifeq ($(call tolower,$(COMPILER)),gnu)
	# Settings for the GNU Compiler
	# --------------------------------------------
	ifndef $(EXAHYPE_CC)
	  EXAHYPE_CC=g++
	endif
	ifndef $(CC)
	  CC=g++
	endif
	ifndef $(FC)
	  EXAHYPE_FC=gfortran
	endif
	FCOMPILER_CFLAGS  += -fdefault-real-8 -fdefault-double-8 -ffree-line-length-none -cpp
	LINK_FORTRAN      += -lgfortran

	COMPILER_CFLAGS   += -D__assume_aligned=__builtin_assume_aligned -pipe -pedantic -Drestrict=__restrict__ -Wall
	COMPILER_LFLAGS   +=

else
	# Option not recognized
	# ----------------------------------------------
	$(error Unknown option for variable [COMPILER])
endif



# ************************************************
#
#Set compiler and linker flags for the different architectures
ifeq ($(call tolower,$(ARCHITECTURE)),cpu)
  # Settings for CPU architectures
  # ----------------------------------------------
  ifeq ($(call tolower,$(COMPILER)),intel)
    COMPILER_CFLAGS += -xHost
    COMPILER_LFLAGS += -xHost
  else
    COMPILER_CFLAGS += -march=native
    COMPILER_LFLAGS += -march=native
  endif

else ifeq ($(call tolower,$(ARCHITECTURE)),phi)
	# Settings for the Xeon Phi architecture
	# --------------------------------------------
	COMPILER_CFLAGS += -mmic
	COMPILER_LFLAGS += -mmic -lrt

else ifeq ($(call tolower,$(ARCHITECTURE)),knl)
  # Settings for the Xeon Phi architecture
  # --------------------------------------------
  ifeq ($(call tolower,$(COMPILER)),intel)
    COMPILER_CFLAGS += -xMIC-AVX512 -fma
    COMPILER_LFLAGS += -xMIC-AVX512 -fma -lrt
  else
    COMPILER_CFLAGS += -march=knl
    COMPILER_LFLAGS += -march=knl -lrt
  endif

else ifeq ($(call tolower,$(ARCHITECTURE)),hsw)
  # Settings for the Xeon Phi architecture
  # --------------------------------------------
  ifeq ($(call tolower,$(COMPILER)),intel)
    COMPILER_CFLAGS += -xCORE-AVX2 -fma
    COMPILER_LFLAGS += -xCORE-AVX2 -fma -lrt
  else
    COMPILER_CFLAGS += -march=haswell
    COMPILER_LFLAGS += -march=haswell -lrt
  endif
else
	# Option not recognized
	# ----------------------------------------------
	$(error Unknown option for variable [ARCHITECTURE])
endif


# ************************************************
#
# Special options for all "non-Debug" builds
ifneq ($(call tolower,$(MODE)),debug)
	ifeq ($(call tolower,$(COMPILER)),intel)
	  # Settings for the Intel compiler
	  # ----------------------------------------------
	  ifeq ($(call tolower,$(DISTRIBUTEDMEM)),mpi)
	  COMPILER_CFLAGS += -O3 -no-ipo -ip
	  COMPILER_LFLAGS +=
	  else
	  COMPILER_CFLAGS += -fast -no-ipo -ip
	  COMPILER_LFLAGS +=
	  endif

	  #Special options
	  ifeq ($(call tolower,$(ARCHITECTURE)),cpu)
	    COMPILER_CFLAGS +=
	    COMPILER_LFLAGS +=
	  endif

	else ifeq ($(call tolower,$(COMPILER)),gnu)
	  # Settings for the GNU compiler
	  # --------------------------------------------
	#TODO JMG here is the -fno-rtti flag that cause issue with gcc+tbb, comment if needed. Remove this when bug fixed by Tobias
	  COMPILER_CFLAGS += -O3
	  COMPILER_LFLAGS +=
	endif
endif



# ************************************************
#
#Very special options
# -----------------------
ifeq ($(call tolower,$(ARCHITECTURE)),cpu)
	ifeq ($(call tolower,$(COMPILER)),gnu)
		ifeq ($(call tolower,$(MODE)),debug)
			COMPILER_CFLAGS += -Wstrict-aliasing -ggdb
		endif
	endif
endif




# Include files defining $CSOURCES, $FSOURCES, $FMODULESOURCES.
# They are generated by the make target "cfiles.mk" and "ffiles.mk" and contain the
# list of files to compile. Remember that make evaluates expressions lazy, thus we can
# do an include here but run the make target afterwards to fill the actual files.
-include cfiles.mk
-include ffiles.mk



# Configure System
# ----------------
# These values are used to assemble the symbols SYSTEM_CFLAGS and SYSTEM_LFLAGS.
INCLUDE_TBB=$(TBB_INC)
#INCLUDE_OMP=$(OMP_INC)
INCLUDE_OMP=-fopenmp
INCLUDE_MPI=$(MPI_INC)


LINK_TBB=$(TBB_SHLIB)
#LINK_OMP=$(OMP_SHLIB)
LINK_OMP=-fopenmp
#LINK_MPI=-lpthread -lrt -lmpich
LINK_MPI=



# Assemble compiler flags for shared-memory parallelization
# -----------------------
ifeq ($(call tolower,$(SHAREDMEM)),omp)
	SYSTEM_CFLAGS   += $(INCLUDE_OMP)
	SYSTEM_LFLAGS   += $(LINK_OMP)
	COMPILER_CFLAGS += -DSharedOMP
else ifeq ($(call tolower,$(SHAREDMEM)),tbb)
	SYSTEM_CFLAGS   += $(INCLUDE_TBB)
	SYSTEM_LFLAGS   += $(LINK_TBB)
	COMPILER_CFLAGS += -DSharedTBB
else
	SYSTEM_LFLAGS   += -lrt
	SYSTEM_CFLAGS   += -fno-rtti 
	# disabled the -lrt for plain serial compilations. No system
	# I tested needed it.

	#SYSTEM_CFLAGS = $(INCLUDE_TBB) $(INCLUDE_MPI)
	#SYSTEM_LFLAGS = $(LINK_TBB)    $(LINK_MPI)
endif



# Assemble compiler flags for ditributed-memory parallelization
# -----------------------
ifeq ($(call tolower,$(DISTRIBUTEDMEM)),mpi)
	COMPILER_CFLAGS += -DParallel -DMPICH_IGNORE_CXX_SEEK
	ifndef $(CC)
		ifeq ($(call tolower,$(COMPILER)),gnu)
			EXAHYPE_CC = mpiCC
		else
#			EXAHYPE_CC = mpiicpc
		endif
	endif
endif



# Assemble Compiler Flags for boundary conditions
# -----------------------
ifeq ($(call tolower,$(BOUNDARYCONDITIONS)),periodic)
	COMPILER_CFLAGS += -DPeriodicBC
endif

#
# Linker Settings
# ---------------
# By default, I use the compiler command. But you might wanna modify it.
LL=$(EXAHYPE_CC)


COBJECTS=$(CSOURCES:.cpp=.o)
FOBJECTS=$(FSOURCES:.f90=.o)
FMODULEOBJECTS=$(FMODULESOURCES:.f90=.o)
FOBJECTS+=$(FMODULEOBJECTS)


# 
# Project-wise Settings
# ---------------------
# Projects can easily hook in with the variables
#
#  PROJECT_CFLAGS   (eg. for additional include paths)
#  PROJECT_LFLAGS   (eg. for additional dynamic links)
#  PROJECT_LINK     (eg. for additional objects/archives, ia. static links)
#
# As everywhere in GNU Make, these variables can be passed as arguments to make,
#  > make PROJECT_CFLAGS=-I/my/initial/data/code/ PROJECT_LINK=/my/initial/data/code.a
# or set as environment variables.
#

all: wellsortedbuild

# try this for serial making. Parallel make of header, buildinfo and build
# results in all text over each other and a race condition when buildinfo
# has not finished yet but the main.cpp code is already compiling.

wellsortedbuild: header buildinfo ffiles.mk cfiles.mk
ifneq ($(FMODULEOBJECTS),)
		$(MAKE) $(FMODULEOBJECTS)
endif
	$(MAKE) build


buildinfo:
#	add any variables which you want to be able to see
#	in the binary when calling with --version:
	@echo "generate-buildinfo.sh > $(PROJECT_PATH)/buildinfo.h"
	@$(EXAHYPE_PATH)/generate-buildinfo.sh \
		"COMPILER = $(COMPILER)" \
		"MODE = $(MODE)" \
		"SHAREDMEM = $(SHAREDMEM)" \
		"DISTRIBUTEDMEM = $(DISTRIBUTEDMEM)" \
		"------" \
		"ARCHITECTURE = $(ARCHITECTURE)" \
		"CC = $(EXAHYPE_CC)" \
		"BOUNDARYCONDITIONS = $(BOUNDARYCONDITIONS)" \
		"------" \
		"EXAHYPE_PATH = $(EXAHYPE_PATH)" \
		"PROJECT_PATH = $(PROJECT_PATH)" \
		"PEANO_KERNEL_PEANO_PATH = $(PEANO_KERNEL_PEANO_PATH)" \
		"PEANO_KERNEL_TARCH_PATH = $(PEANO_KERNEL_TARCH_PATH)" \
		> $(PROJECT_PATH)/buildinfo.h

		
cfiles.mk:
	touch cfiles.mk
	echo -n CSOURCES= > cfiles.mk
	find -H $(PEANO_KERNEL_PEANO_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_KERNEL_TARCH_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_TOOLBOX_MULTISCALELINKEDCELL_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_TOOLBOX_SHAREDMEMORY_ORACLES_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_TOOLBOX_MPI_BLANCING_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(EXAHYPE_PATH) -name '*.cpp'  -not -path $(EXAHYPE_PATH)'/kernels/aderdg/generic/fortran/*' -not -path $(EXAHYPE_PATH)'/kernels/aderdg/optimised/*' | tr '\n' ' ' >> cfiles.mk
	find -L $(PROJECT_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
ifneq (,$(findstring Yes, $(MIXEDLANG) ))  
	find -H $(EXAHYPE_PATH)'/kernels/aderdg/generic/fortran' -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
endif
ifneq (,$(findstring Yes, $(COMPILE_OPT_KERNEL) )) 
	find -H $(EXAHYPE_PATH)'/kernels/aderdg/optimised' -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
endif

ffiles.mk:
	touch ffiles.mk
#	ALLOW mixed language Fortran applications! C.f. SRHD, MHD, Z4
#	To resolve the dependency problem  (compile fortran modules first), we detect them heuristically.
	echo -n FMODULESOURCES= > ffiles.mk
	find -L $(PROJECT_PATH) -name '*.f90' -exec grep -il module {} \+ | tr '\n'  ' ' >> ffiles.mk
	echo >> ffiles.mk
	echo -n FSOURCES= >> ffiles.mk
	find -L $(PROJECT_PATH) -name '*.f90' -exec grep -iL module {} \+ | tr '\n' ' ' >> ffiles.mk
#	 only for the projects which use the old fortran kernels:
ifneq (,$(findstring Yes, $(MIXEDLANG) ))
	find -L $(EXAHYPE_PATH) -name '*.f90' | tr '\n' ' ' >> ffiles.mk
endif

	
header:
	@echo ================================
	@echo
	@echo  www.exahype.eu
	@echo
	@echo ================================
	@echo
	@echo The project has received funding from the European Union\'s
	@echo Horizon 2020 research and innovation programme under grant
	@echo agreement No 671698 \(ExaHyPE\). It is based upon the PDE
	@echo framework Peano \(www.peano-framework.org\).
	@echo 
	@echo ================================
	@echo "Building ExaHyPE with options:"
	@echo ================================
	@echo "COMPILER       | $(COMPILER)"
	@echo "MODE           | $(MODE)"
	@echo "SHAREDMEM      | $(SHAREDMEM)"
	@echo "DISTRIBUTEDMEM | $(DISTRIBUTEDMEM)"
	@echo ================================
	@echo
	@echo ExaHyPE uses environment variables EXAHYPE_CC and EXAHYPE_FC for the 
	@echo C++ or Fortran compiler, respectively. If you haven\'t defined EXAHYPE_CC
	@echo and EXAHYPE_FC yourself, ExaHyPE defaults them to mpiicpc, icpc, g++, and 
	@echo so forth depending on the value of COMPILER. If you specify your own 
	@echo compilers via EXAHYPE_CC and EXAHYPE_FC, please specify a valid COMPILER 
	@echo mode nevertheless.


build:  $(FOBJECTS) $(COBJECTS)
	$(LL) $(COBJECTS) $(FOBJECTS) $(PROJECT_LINK) $(LINK_FORTRAN) -o $(EXECUTABLE) $(PROJECT_LFLAGS) $(COMPILER_LFLAGS) $(SYSTEM_LFLAGS)
	@echo
	@echo build of ExaHyPE successful
	@echo run code with ./$(EXECUTABLE) and pass config file as argument

clean:
	rm -f $(EXECUTABLE)
	rm -f $(FOBJECTS)
	rm -f ffiles.mk
	rm -f $(COBJECTS)
	rm -f cfiles.mk
	rm -f buildinfo.h


$(COBJECTS): %.o : %.cpp
	$(EXAHYPE_CC) $(PROJECT_CFLAGS) $(COMPILER_CFLAGS) $(SYSTEM_CFLAGS) -I$(PROJECT_PATH) -I$(PEANO_TOOLBOX_MPI_BLANCING_PATH)/.. -I$(PEANO_TOOLBOX_SHAREDMEMORY_ORACLES_PATH)/.. -I$(PEANO_TOOLBOX_MULTISCALELINKEDCELL_PATH)/.. -I$(PEANO_KERNEL_PEANO_PATH)/.. -I$(PEANO_KERNEL_TARCH_PATH)/.. -I$(EXAHYPE_PATH) -I$(PROJECT_PATH)  -c $< -o $@

$(FOBJECTS): %.o : %.f90
	$(EXAHYPE_FC) $(PROJECT_CFLAGS) $(FCOMPILER_CFLAGS) -I$(PROJECT_PATH) -c $< -o $@
