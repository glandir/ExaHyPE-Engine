# This is the core-makefile for ExaHyPE
# generated by the Peano Development Tools (PDT)


# *********************************************************************************************
# README
# *********************************************************************************************
#
# Available configuration Parameters for ExaHyPE
#
# export variable  |  default-value  |  further values         |  description
#--------------------------------------------------------------------------------------------------
# ARCHITECTURE        CPU               Phi, KNL                  Hardware-plattfrom
# COMPILER            Intel             GNU                       Used compiler (and linker)
# MODE                Release           Debug, Profile, Asserts   Verbosity and Debug level
# SHAREDMEM           None              OMP, TBB                  Shared-memory parallelisation
# DISTRIBUTEDMEM      None              MPI                       Distributed-memory parallelisation
# BOUNDARYCONDITIONS  None              Periodic                  Type of boundary conditions
# *********************************************************************************************

SHELL = bash
tolower = $(shell echo $(1) | tr '[:upper:]' '[:lower:]')

# ************************************************

#
# Set default values of configuration parameters
ifeq ($(ARCHITECTURE),)
	ARCHITECTURE=CPU
endif
ifeq ($(COMPILER),)
	COMPILER=Intel
endif
ifeq ($(MODE),)
	MODE=Release
endif
ifeq ($(SHAREDMEM),)
	SHAREDMEM=None
endif
ifeq ($(DISTRIBUTEDMEM),)
	DISTRIBUTEDMEM=None
endif
ifeq ($(BOUNDARYCONDITIONS),)
	BOUNDARYCONDITIONS=None
endif

# ************************************************
#
#Set compiler and linker flags which hold for all combinations
COMPILER_CFLAGS=-fstrict-aliasing -std=c++0x
COMPILER_LFLAGS=

# ************************************************
#
#Set compiler and linker flags for the different Debug/Release modes
ifeq ($(call tolower,$(MODE)),release)
  # Settings for the Release mode
  # ----------------------------------------------
  COMPILER_CFLAGS += 
  COMPILER_LFLAGS +=

else ifeq ($(call tolower,$(MODE)),debug)
  # Settings for the Debug mode
  # --------------------------------------------
  COMPILER_CFLAGS += -DDebug -DAsserts -DTrackGridStatistics
  COMPILER_LFLAGS +=

else ifeq ($(call tolower,$(MODE)),profile)
  # Settings for the Profile mode
  # --------------------------------------------
  COMPILER_CFLAGS += -DPerformanceAnalysis -DTrackGridStatistics -p -pg
  COMPILER_LFLAGS += -p -pg

else ifeq ($(call tolower,$(MODE)),asserts)
  # Settings for the Adderst mode
  # --------------------------------------------
  COMPILER_CFLAGS += -DAsserts -g3 -DTrackGridStatistics
  COMPILER_LFLAGS += -g3

else
  # Option not recognized
  # ----------------------------------------------
  $(error Unknown option '$(MODE)' for variable [MODE])
endif


# ************************************************
#
#Set compiler and linker flags for the different conmpilers
ifeq ($(call tolower,$(COMPILER)),intel)
  # Settings for the Intel Compiler
  # ----------------------------------------------
  FC=ifort
  CC=icpc
  FCOMPILER_CFLAGS  += -r8
  LINK_FORTRAN      += -lifcore

  COMPILER_CFLAGS   +=  -restrict
  COMPILER_LFLAGS   +=

else ifeq ($(call tolower,$(COMPILER)),gnu)
  # Settings for the GNU Compiler
  # --------------------------------------------
  CC=g++
  FC=gfortran
  FCOMPILER_CFLAGS  += -fdefault-real-8 -fdefault-double-8 -ffree-line-length-none
  LINK_FORTRAN      += -lgfortran

  COMPILER_CFLAGS   += -D__assume_aligned=__builtin_assume_aligned -pipe -pedantic -Drestrict=__restrict__ -Wall
  COMPILER_LFLAGS   +=

else
  # Option not recognized
  # ----------------------------------------------
  $(error Unknown option for variable [COMPILER])
endif



# ************************************************
#
#Set compiler and linker flags for the different architectures
ifeq ($(call tolower,$(ARCHITECTURE)),cpu)
  # Settings for CPU architectures
  # ----------------------------------------------
  COMPILER_CFLAGS +=
  COMPILER_LFLAGS +=

else ifeq ($(call tolower,$(ARCHITECTURE)),phi)
  # Settings for the Xeon Phi architecture
  # --------------------------------------------
  COMPILER_CFLAGS += -mmic
  COMPILER_LFLAGS += -mmic -lrt

else ifeq ($(call tolower,$(ARCHITECTURE)),knl)
  # Settings for the Xeon Phi architecture
  # --------------------------------------------
  COMPILER_CFLAGS += -xMIC-AVX512 -fma
  COMPILER_LFLAGS += -xMIC-AVX512 -fma -lrt

else
  # Option not recognized
  # ----------------------------------------------
  $(error Unknown option for variable [ARCHITECTURE])
endif


# ************************************************
#
# Special options for all "non-Debug" builds
ifneq ($(call tolower,$(MODE)),debug)
  ifeq ($(call tolower,$(COMPILER)),intel)
    # Settings for the Intel compiler
    # ----------------------------------------------
    ifeq ($(call tolower,$(DISTRIBUTEDMEM)),mpi)
    COMPILER_CFLAGS += -O3 -fno-rtti -no-ipo -ip
    COMPILER_LFLAGS +=
    else
    COMPILER_CFLAGS += -fast -fno-rtti -no-ipo -ip
    COMPILER_LFLAGS +=
    endif

    #Special options
    ifeq ($(call tolower,$(ARCHITECTURE)),cpu)
      COMPILER_CFLAGS += -xHost
      COMPILER_LFLAGS +=
    endif

  else ifeq ($(call tolower,$(COMPILER)),gnu)
    # Settings for the GNU compiler
    # --------------------------------------------
    #COMPILER_CFLAGS += -O3 -fno-rtti -march=native ###TODO JMG enable -fno-rtti after TBB bug fixed (05/01/17)
    COMPILER_CFLAGS += -O3 -march=native
    COMPILER_LFLAGS +=
  endif
endif



# ************************************************
#
#Very special options
# -----------------------
ifeq ($(call tolower,$(ARCHITECTURE)),cpu)
	ifeq ($(call tolower,$(COMPILER)),gnu)
		ifeq ($(call tolower,$(MODE)),debug)
			COMPILER_CFLAGS += -Wstrict-aliasing -ggdb
		endif
	endif
endif




# Include files
-include cfiles.mk
-include ffiles.mk



# Configure System
# ----------------
# These values are used to assemble the symbols SYSTEM_CFLAGS and SYSTEM_LFLAGS.
INCLUDE_TBB=$(TBB_INC)
#INCLUDE_OMP=$(OMP_INC)
INCLUDE_OMP=-fopenmp
INCLUDE_MPI=$(MPI_INC)


LINK_TBB=$(TBB_SHLIB)
#LINK_OMP=$(OMP_SHLIB)
LINK_OMP=-fopenmp
#LINK_MPI=-lpthread -lrt -lmpich
LINK_MPI=



# Assemble compiler flags for shared-memory parallelization
# -----------------------
ifeq ($(call tolower,$(SHAREDMEM)),omp)
	SYSTEM_CFLAGS   += $(INCLUDE_OMP)
	SYSTEM_LFLAGS   += $(LINK_OMP)
	COMPILER_CFLAGS += -DSharedOMP
else ifeq ($(call tolower,$(SHAREDMEM)),tbb)
	SYSTEM_CFLAGS   += $(INCLUDE_TBB)
	SYSTEM_LFLAGS   += $(LINK_TBB)
	COMPILER_CFLAGS += -DSharedTBB
else
	SYSTEM_LFLAGS   += -lrt
	# disabled the -lrt for plain serial compilations. No system
	# I tested needed it.

	#SYSTEM_CFLAGS = $(INCLUDE_TBB) $(INCLUDE_MPI)
	#SYSTEM_LFLAGS = $(LINK_TBB)    $(LINK_MPI)
endif



# Assemble compiler flags for ditributed-memory parallelization
# -----------------------
ifeq ($(call tolower,$(DISTRIBUTEDMEM)),mpi)
	COMPILER_CFLAGS += -DParallel -DMPICH_IGNORE_CXX_SEEK
        ifdef MPICC
		CC=$(MPICC)
        else
		ifeq ($(call tolower,$(COMPILER)),gnu)
			CC = mpiCC
		else
			CC = mpiicpc
		endif
	endif
endif



# Assemble Compiler Flags for boundary conditions
# -----------------------
ifeq ($(call tolower,$(BOUNDARYCONDITIONS)),periodic)
	COMPILER_CFLAGS += -DPeriodicBC
endif



#
# Linker Settings
# ---------------
# By default, I use the compiler command. But you might wanna modify it.
LL=$(CC)


COBJECTS=$(CSOURCES:.cpp=.o)
FOBJECTS=$(FSOURCES:.f90=.o)

all: header build

buildinfo:
	$(EXAHYPE_PATH)/generate-buildinfo.sh $(PROJECT_PATH)

cfiles.mk:
	touch cfiles.mk
	echo -n CSOURCES= > cfiles.mk
	find -H $(PEANO_KERNEL_PEANO_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_KERNEL_TARCH_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_TOOLBOX_MULTISCALELINKEDCELL_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_TOOLBOX_SHAREDMEMORY_ORACLES_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(PEANO_TOOLBOX_MPI_BLANCING_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
	find -H $(EXAHYPE_PATH) -name '*.cpp'  -not -path $(EXAHYPE_PATH)'/kernels/aderdg/generic/fortran/*' -not -path $(EXAHYPE_PATH)'/kernels/aderdg/optimised/*' | tr '\n' ' ' >> cfiles.mk
	find -H $(PROJECT_PATH) -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
ifneq (,$(findstring Yes, $(MIXEDLANG) ))  
	find -H $(EXAHYPE_PATH)'/kernels/aderdg/generic/fortran' -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
endif
ifneq (,$(findstring Yes, $(COMPILE_OPT_KERNEL) )) 
	find -H $(EXAHYPE_PATH)'/kernels/aderdg/optimised' -name '*.cpp' | tr '\n' ' ' >> cfiles.mk
endif

doFortran:
ifneq (,$(findstring Yes, $(MIXEDLANG) ))
	$(FC) $(FCOMPILER_CFLAGS) -c typesDef.f90
endif

ffiles.mk: | doFortran
	touch ffiles.mk
	echo -n FSOURCES= > ffiles.mk
	# ALLOW mixed language Fortran applications! C.f. SRHD, MHD, Z4
	find -L $(PROJECT_PATH) -name '*.f90' | tr '\n' ' ' >> ffiles.mk
ifneq (,$(findstring Yes, $(MIXEDLANG) ))
	find -L $(EXAHYPE_PATH) -name '*.f90' | tr '\n' ' ' >> ffiles.mk
endif

# Generate a dependency file for Fortran
# Add all the found module files as dependency in %.mod of each of the found non module files
# .mod files have a compile rule associating the %.mod to the %.o to fallback to the default fortran compile rule

	
header:
	@echo ================================
	@echo
	@echo  www.exahype.eu
	@echo
	@echo ================================
	@echo
	@echo The project has received funding from the European Union\'s
	@echo Horizon 2020 research and innovation programme under grant
	@echo agreement No 671698 \(ExaHyPE\). It is based upon the PDE
	@echo framework Peano \(www.peano-framework.org\).
	@echo 
	@echo ================================
	@echo "Building ExaHyPE with options:"
	@echo ================================
	@echo "COMPILER       | $(COMPILER)"
	@echo "MODE           | $(MODE)"
	@echo "SHAREDMEM      | $(SHAREDMEM)"
	@echo "DISTRIBUTEDMEM | $(DISTRIBUTEDMEM)"
	@echo ================================
	@echo
	@echo By default, ExaHyPE uses mpiicpc if you use INTEL and MPI. To 
	@echo change this and make ExaHyPE use mpiCC always, please set the 
	@echo environment variable MPICC to mpiCC.


build: ffiles.mk $(FOBJECTS) cfiles.mk $(COBJECTS)
	$(LL) $(COBJECTS) $(FOBJECTS) $(LINK_FORTRAN) -o $(EXECUTABLE) $(PROJECT_LFLAGS) $(COMPILER_LFLAGS) $(SYSTEM_LFLAGS)
	@echo
	@echo build of ExaHyPE successful
	@echo run code with ./$(EXECUTABLE) and pass config file as argument

clean:
	touch typesDef.o
	rm typesDef.o
	touch typesdef.mod
	rm typesdef.mod
	rm -f $(EXECUTABLE)
	rm -f fdeps.mk
	rm -f $(FOBJECTS)
	rm -f ffiles.mk
	rm -f $(COBJECTS)
	rm -f cfiles.mk


$(COBJECTS): %.o : %.cpp
	$(CC) $(PROJECT_CFLAGS) $(COMPILER_CFLAGS) $(SYSTEM_CFLAGS) -I$(PROJECT_PATH) -I$(PEANO_TOOLBOX_MPI_BLANCING_PATH)/.. -I$(PEANO_TOOLBOX_SHAREDMEMORY_ORACLES_PATH)/.. -I$(PEANO_TOOLBOX_MULTISCALELINKEDCELL_PATH)/.. -I$(PEANO_KERNEL_PEANO_PATH)/.. -I$(PEANO_KERNEL_TARCH_PATH)/.. -I$(EXAHYPE_PATH) -I$(PROJECT_PATH)  -c $< -o $@

$(FOBJECTS): %.o : %.f90
	$(FC) $(FCOMPILER_CFLAGS) -c $< -o $@

# Fortran module dependency: fallback .mod to default fortran compile rule and include generated dependency list
	
%.mod: %.o
	
-include fdeps.mk	
