#ifndef __{{solver}}_CLASS_HEADER__
#define __{{solver}}_CLASS_HEADER__

// This file was initially generated by the ExaHyPE toolkit.
// You can modify it in order to extend your solver with features.
// Whenever this file is present, a re-run of the ExaHyPE toolkit will
// not overwrite it. Delete it to get it regenerated.
//
// ========================
//   www.exahype.eu
// ========================

#include <ostream>

#include "{{abstractSolver}}.h"
{%- if enableProfiler %}
#include "exahype/profilers/Profiler.h"
{%- endif %}
#include "exahype/parser/ParserView.h"

/**
 * We use Peano's logging
 */
#include "tarch/logging/Log.h"
{%- if patchwiseAdjust %}
#include "tarch/la/Vector.h"
{%- endif %}

namespace {{project}}{
  class {{solver}};
}

class {{project}}::{{solver}} : public {{project}}::{{abstractSolver}} {
  private:
    /**
     * Log device
     */
    static tarch::logging::Log _log;
  public:
    {{solver}}(
        const double maximumMeshSize,
        const int maximumMeshDepth,
        const int haloCells,
        const int regularisedFineGridLevels,
        const exahype::solvers::Solver::TimeStepping timeStepping,
        const int limiterHelperLayers,
        const int DMPObservables
        {% if enableProfiler %},std::unique_ptr<exahype::profilers::Profiler> profiler{% endif %});

    /**
     * Initialise the solver.
     *
     * \param[in] cmdlineargs the command line arguments.
     * \param[in] constants   access to the constants specified for the solver.
     */
    void init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) final override;
    
{%- if patchwiseAdjust %}
    /**
     * Patchwise adjust
     * @TODO LR : Document
     */
    void adjustSolution(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,double dt) final override;
{%- else %}
    /**
     * Adjust the conserved variables and parameters (together: Q) at a given time t at the (quadrature) point x.
     *
     * \note Please overwrite function adjustSolution(...) if you want to
     * adjust the solution degrees of freedom in a cellwise manner.
     *
     * \param[in]    x         the physical coordinate on the face.
     * \param[in]    t         the start of the time interval.
     * \param[in]    dt        the width of the time interval.
     * \param[inout] Q         the conserved variables (and parameters) associated with a quadrature point
     *                         as C array (already allocated).
     */
    void adjustPointSolution(const double* const x,const double t,const double dt,double* Q) final override;
{%- endif %}

    /**
     * Compute the eigenvalues of the flux tensor per coordinate direction \p d.
     *
     * \param[in] Q  the conserved variables associated with a quadrature node
     *               as C array (already allocated).
     * \param[in] d  the column of the flux vector (d=0,1,...,DIMENSIONS).
     * \param[inout] lambda the eigenvalues as C array (already allocated).
     */
    void eigenvalues(const double* const Q,const int d,double* lambda) final override;
{%- if useViscousFlux %}
    void viscousEigenvalues(const double* const Q,const int d,double* lambda) final override;
{%- endif %}
    
    /**
     * Impose boundary conditions at a point on a boundary face
     * within the time interval [t,t+dt].
     *
     * \param[in]    x         the physical coordinate on the face.
     * \param[in]    t         the start of the time interval.
     * \param[in]    dt        the width of the time interval.
     * \param[in]    faceIndex indexing of the face (0 -- {x[0]=xmin}, 1 -- {x[1]=xmax}, 2 -- {x[1]=ymin}, 3 -- {x[2]=ymax}, and so on,
     *                         where xmin,xmax,ymin,ymax are the bounds of the cell containing point x.
     * \param[in]    d         the coordinate direction the face normal is pointing to.
     * \param[in]    QIn       the conserved variables at point x from inside of the domain
     *                         and time-averaged (over [t,t+dt]) as C array (already allocated).
     * \param[in]    FIn       the normal fluxes at point x from inside of the domain
     *                         and time-averaged (over [t,t+dt]) as C array (already allocated).
     * \param[inout] QOut      the conserved variables at point x from outside of the domain
     *                         and time-averaged (over [t,t+dt]) as C array (already allocated).
     * \param[inout] FOut      the normal fluxes at point x from outside of the domain
     *                         and time-averaged (over [t,t+dt]) as C array (already allocated).
     */
    void boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int normalNonZero,const double * const fluxIn,const double* const stateIn,double *fluxOut,double* stateOut) final override;
    
    /**
     * Evaluate the refinement criterion within a cell.
     *
     * \note Instead of a variables array at a single quadrature point we give
     * you all NumberOfVariables*(Order+1)^DIMENSIONS solution degrees of freedom.
     *
     * \note Use this function and ::adjustSolution to set initial conditions.
     *
     * \param[in]    centre    The centre of the cell.
     * \param[in]    dx        The extent of the cell.
     * \param[in]    t         the start of the time interval.
     * \param[in]    dt        the width of the time interval.
     * \return One of exahype::solvers::Solver::RefinementControl::{Erase,Keep,Refine}.
     */
    exahype::solvers::Solver::RefinementControl refinementCriterion(const double* luh,const tarch::la::Vector<DIMENSIONS,double>& centre,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,const int level) override;
    
    //PDE
    
{%- if useFlux && !useViscousFlux %}
    /**
     * Compute the flux tensor.
     *
     * \param[in]    Q the conserved variables (and parameters) associated with a quadrature point
     *                 as C array (already allocated).
     * \param[inout] F the fluxes at that point as C array (already allocated).
     */
    void flux(const double* const Q,double** F) final override;
{%- else -%}
/* flux() function not included, as requested in the specification file */
{%- endif %}

{%- if useViscousFlux %}
    /**
     * Compute the flux tensor with diffusive components.
     *
     * \param[in]    Q the conserved variables (and parameters) associated with a quadrature point
     *                 as C array (already allocated).
     *               gradQ the gradient of the conserved variables (and parameters) associated with a quadrature point
     *                     as C array (already allocated).
     * \param[inout] F the fluxes at that point as C array (already allocated).
     */
    void viscousFlux(const double* const Q,const double* gradQ, double** F) final override;
{%- else -%}
/* viscousFlux() function not included, as requested in the specification file */
{%- endif %}
    
{%- if useSource %}
     /**
     * Compute the Algebraic Sourceterms.
     * 
     * You may want to overwrite this with your PDE Source (algebraic RHS contributions).
     * However, in all schemes we have so far, the source-type contributions are
     * collected with non-conservative contributions into a fusedSource, see the
     * fusedSource method. From the kernels given with ExaHyPE, only the fusedSource
     * is called and there is a default implementation for the fusedSource calling
     * again seperately the nonConservativeProduct function and the algebraicSource
     * function.
     *
     * \param[in]    Q the conserved variables (and parameters) associated with a quadrature point
     *                 as C array (already allocated).
     * \param[inout] S the source point as C array (already allocated).
     */
    void algebraicSource(const double* const Q,double* S) final override;
{%- else -%}
/* algebraicSource() function not included, as requested by the specification file */
{%- endif %}

{%- if useNCP %}
    /**
     * Compute the nonconservative term $B(Q) \nabla Q$.
     * 
     * This function shall return a vector BgradQ which holds the result
     * of the full term. To do so, it gets the vector Q and the matrix
     * gradQ which holds the derivative of Q in each spatial direction.
     * Currently, the gradQ is a continous storage and users can use the
     * kernels::idx2 class in order to compute the positions inside gradQ.
     *
     * @TODO: Check if the following is still right:
     * 
     * !!! Warning: BgradQ is a vector of size NumberOfVariables if you
     * use the ADER-DG kernels for nonlinear PDEs. If you use
     * the kernels for linear PDEs, it is a tensor with dimensions
     * Dim x NumberOfVariables.
     * 
     * \param[in]   Q   the vector of unknowns at the given position
     * \param[in]   gradQ   the gradients of the vector of unknowns,
     *                  stored in a linearized array.
     * \param[inout]  The vector BgradQ (extends nVar), already allocated. 
     *
     **/
    void nonConservativeProduct(const double* const Q,const double* const gradQ,double* BgradQ) final override;
{%- else %}
/* nonConservativeProduct() function is not included, as requested in the specification file */
{%- endif %}

{%- if usePointSources %}

    /**
     * Initialise the locations of point sources
     * Point source n will be located at pointSourceLocation[n][:]
     *
     * \param[in] cmdlineargs the command line arguments.
     * \param[in] constants   access to the constants specified for the solver.
     */
    void initPointSourceLocations(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants);


    /**
     * Compute the contribution of a point source.
     *
     * This function should return the force vector of a point source n
     * located at pointSourceLocation[n][:] as defined in initPointSourceLocations()
     * 
     *
     * \param[in]  Q the vector of unknowns at the given position
     * \param[in]  x a position //LR TODO: Is x really needed ?
     * \param[in]  t point in time 
     * \param[in]  dt the current time step size//LR TODO: Is dt really needed ?
     * \param[out] forceVector the force vector of the point source
     * 
    **/
     void pointSource(const double* const Q,const double* const x,const double t,const double dt, double* forceVector,int n) override;
{%- else -%}
/* pointSource() function not included, as requested in the specification file */
{%- endif %}

{%- if useMaterialParam %}
    /**
     * @TODO LR : document
     */
    void multiplyMaterialParameterMatrix(const double* const Q, double* rhs) final override;
{%- else -%}
/* multiplyMaterialParameterMatrix() not included, as requested in the specification file */
{%- endif %}
};

#endif // __{{solver}}_CLASS_HEADER__
