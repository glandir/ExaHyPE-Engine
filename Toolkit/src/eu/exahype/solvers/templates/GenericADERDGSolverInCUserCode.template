#include "{{Solver}}.h"

#include "{{Solver}}_Variables.h"

void {{Project}}::{{Solver}}::init(std::vector<std::string>& cmdlineargs{{SolverInitSignatureExtension}}) {
  // @todo Please implement/augment if required
}

exahype::solvers::ADERDGSolver::AdjustSolutionValue {{Project}}::{{Solver}}::useAdjustSolution(const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,const double t,const double dt) const {
  // @todo Please implement/augment if required
  return tarch::la::equals(t,0.0) ? exahype::solvers::ADERDGSolver::AdjustSolutionValue::PointWisely : exahype::solvers::ADERDGSolver::AdjustSolutionValue::No;
}

void {{Project}}::{{Solver}}::adjustPointSolution(const double* const x,const double w,const double t,const double dt,double* Q) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)
  
  // @todo Please implement/augment if required
{{AdjustedSolutionValues}}
}

void {{Project}}::{{Solver}}::eigenvalues(const double* const Q,const int d,double* lambda) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)
  
  // @todo Please implement/augment if required
{{Eigenvalues}}
}


void {{Project}}::{{Solver}}::flux(const double* const Q,double** F) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)
  
  // @todo Please implement/augment if required
{{Flux}}
}


void {{Project}}::{{Solver}}::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int d,
  const double * const fluxIn,const double* const stateIn,
  double *fluxOut,double* stateOut) {
  // Dimensions             = {{Dimensions}}
  // Number of variables    = {{Elements}} (#unknowns + #parameters)

  // @todo Please implement/augment if required
{{BoundaryValues}}
}


exahype::solvers::Solver::RefinementControl {{Project}}::{{Solver}}::refinementCriterion(const double* luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,const int level) {
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}
