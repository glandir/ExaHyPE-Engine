#include "{{solver}}.h"

#include "{{solver}}_Variables.h"


tarch::logging::Log {{project}}::{{solver}}::_log( "{{project}}::{{solver}}" );


void {{project}}::{{solver}}::init(std::vector<std::string>& cmdlineargs{% if hasConstants %} , exahype::Parser::ParserView& constants {% endif %}) {
  // @todo Please implement/augment if required
}

void {{project}}::{{solver}}::adjustPointSolution(const double* const x,const double t,const double dt,double* Q) {
  // Dimensions                        = {{dimensions}}
  // Number of variables + parameters  = {{numberOfVariables}} + {{numberOfParameters}}
  // @todo Please implement/augment if required
  if (tarch::la::equals(t,0.0)) {
    {%- for i in range_0_nVarParam %}
    Q[{{i}}] = 0.0;
    {%- endfor %}
  }
}

void {{project}}::{{solver}}::eigenvalues(const double* const Q,const int d,double* lambda) {
  // Dimensions                        = {{dimensions}}
  // Number of variables + parameters  = {{numberOfVariables}} + {{numberOfParameters}}
  
  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  lambda[{{i}}] = 1.0;
  {%- endfor %}
}

void {{project}}::{{solver}}::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int normalNonZero,
  const double * const fluxIn,const double* const stateIn,
  double *fluxOut,double* stateOut) {
  // Dimensions                        = {{dimensions}}
  // Number of variables + parameters  = {{numberOfVariables}} + {{numberOfParameters}}

  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  stateOut[{{i}}] = 0.0;
  {%- endfor %}

  {%- for i in range_0_nVar %}
  fluxOut[{{i}}] = 0.0;
  {%- endfor %}
}

exahype::solvers::Solver::RefinementControl {{project}}::{{solver}}::refinementCriterion(const double* luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,const int level) {
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//***********************************************************
//*********************** PDE *******************************
//***********************************************************

//to add new PDEs specify them in the specification file, delete this file and its header and rerun the toolkit

{%- if useFlux %}
void {{project}}::{{solver}}::flux(const double* const Q,double** F) {
  // Dimensions                        = {{dimensions}}
  // Number of variables + parameters  = {{numberOfVariables}} + {{numberOfParameters}}
  
  // @todo Please implement/augment if required
  {%- for d in range_0_nDim %}
  {%- for i in range_0_nVar %}
  F[{{d}}][{{i}}] = 0.0;
  {%- endfor %}
  
  {%- endfor %}
}
{%- endif %}


{%- if useSource %}
//You can either implement this method or modify fusedSource
void {{project}}::{{solver}}::algebraicSource(const double* const Q,double* S) {
  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  S[{{i}}] = 0.0;
  {%- endfor %}
}
{%- endif %}

{%- if useNCP %}
void  {{project}}::{{solver}}::nonConservativeProduct(const double* const Q,const double* const gradQ,double* BgradQ) {
  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  BgradQ[{{i}}] = 0.0;
  {%- endfor %}
}
{%- endif %}

{%- if usePointSource %}
void  {{project}}::{{solver}}::pointSource(const double* const x,const double t,const double dt, double* forceVector, double* x0) {
  // @todo Please implement/augment if required
}
{%- endif %}
