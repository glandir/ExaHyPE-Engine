#ifndef __{{abstractSolver}}_CLASS_HEADER__
#define __{{abstractSolver}}_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================

#include <ostream>
#include <algorithm>

#include "exahype/solvers/ADERDGSolver.h"
#include "exahype/solvers/UserSolverInterface.h"
{%- if enableProfiler %}
#include "exahype/profilers/Profiler.h"
{%- endif %}
#include "{{optKernelPath}}/Kernels.h"

/**
 * We include Peano's assertion collection here.
 */
#include "tarch/Assertions.h"
#include "tarch/la/Vector.h"

namespace {{project}}{
  class {{solver}};
  class {{abstractSolver}};
}

class {{project}}::{{abstractSolver}}: public exahype::solvers::ADERDGSolver, public exahype::solvers::UserADERDGSolverInterface {
  public:
    static constexpr int NumberOfVariables       = {{optNamespace}}::getNumberOfVariable();
    static constexpr int NumberOfParameters      = {{optNamespace}}::getNumberOfParameter();
    static constexpr int Order                   = {{optNamespace}}::getBasisSize() -1;
    static constexpr int Dimensions              = {{optNamespace}}::getDimension();
    static constexpr int MaxPicardIterations     = {{maxPicardIterations}};
    static constexpr bool UseMaxPicardIterations = {{useMaxPicardIterations}};
    static constexpr double CFL                  = 0.9;
    {%- if usePointSources %}
    static constexpr int NumberOfPointSources = {{numberOfPointSources}};
    double pointSourceLocation[NumberOfPointSources][DIMENSIONS];
    {%- endif %}
    
    // virtual getters for the constexpr's
    int constexpr_getNumberOfVariables()  const override { return NumberOfVariables; };
    int constexpr_getNumberOfParameters() const override { return NumberOfParameters; };
    int constexpr_getOrder()              const override { return Order; };
    double constexpr_getCFLNumber()       const override { return CFL; };
  
    class VariableMetrics;
    class Variables;
    class ReadOnlyVariables;
    class Fluxes;
    class VariableShortcuts;
    class VariableMultiplicities;
    class VariableNames;
    {%- for className in namingSchemes %}
    class {{className}};
    {%- endfor %}
    
    {{abstractSolver}}(double maximumMeshSize,int maximumAdaptiveMeshDepth,int DMPObservables,int limiterHelperLayers,exahype::solvers::Solver::TimeStepping timeStepping  {%- if enableProfiler %}
    , std::unique_ptr<exahype::profilers::Profiler> profiler  {%- endif %});

    /**
     * This operation should be overwritten in your application-specific 
     * solver. Alternatively, make your own subclass useConservativeFlux()
     * return false.
     */
    void flux(const double* const Q,double** F) override;
        
    /**
     * Default implementation. Has to be be overwritten by user's solver if you 
     * make the corresponding use operation activate the feature.
     *
     * See superclass for function's semantics.
     */
    void algebraicSource(const double* const Q,double* S) override;
        
    /**
     * Default implementation. Has to be be overwritten by user's solver if you 
     * make the corresponding use operation activate the feature.
     *
     * See superclass for function's semantics.
     */
    void nonConservativeProduct(const double* const Q,const double* const gradQ,double* BgradQ) override;
        
    /**
     * Default implementation. Has to be be overwritten by user's solver if you 
     * make the corresponding use operation activate the feature.
     *
     * See superclass for function's semantics.
     */
    void pointSource(const double* const Q,const double* const x,const double t,const double dt, double* forceVector,int n) override;

    /**
     * Default implementation. Please overwrite.
     *
     * See superclass for function's semantics.
     */
    bool isPhysicallyAdmissible(
      const double* const solution,
      const double* const observablesMin,const double* const observablesMax,const int numberOfObservables,
      const tarch::la::Vector<DIMENSIONS,double>& center, const tarch::la::Vector<DIMENSIONS,double>& dx,
      const double t, const double dt) const override { return true; }

    /**
     * Default implementation. Please overwrite.
     *
	 * See superclass for function's semantics.
	 */
    void mapDiscreteMaximumPrincipleObservables(double* observables,const int numberOfObservables,const double* const Q) const override {
      if (numberOfObservables>0) {
      	std::copy_n(Q,numberOfObservables,observables);
      }
  	}
    
    // old: void fusedSpaceTimePredictorVolumeIntegral(double* lduh, double* lQhbnd,double* lFhbnd,double** tempSpaceTimeUnknowns,double** tempSpaceTimeFluxUnknowns,double* tempUnknowns,double* tempFluxUnknowns,const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx,const double dt, double** tempPointForceSources) override; 
    int fusedSpaceTimePredictorVolumeIntegral(double* lduh, double* lQhbnd, double* lFhbnd, const double* const luh, const tarch::la::Vector<DIMENSIONS, double>& center, const tarch::la::Vector<DIMENSIONS, double>& dx, const double t, const double dt) override; 
    void solutionUpdate(double* luh,const double* const lduh,const double dt) override;
    void surfaceIntegral(double* lduh,const double* const lFhbnd,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
    void riemannSolver(double* FL,double* FR,const double* const QL,const double* const QR,const double dt,const int normalNonZeroIndex, bool isBoundaryFace, int faceIndex) override;
    // old: void boundaryConditions(double* fluxOut,double* stateOut,const double* const fluxIn,const double* const stateIn,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int faceIndex,const int normalNonZero) override;
    void boundaryConditions(double* fluxIn,const double* const stateIn,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int faceIndex,const int direction) override;
    double stableTimeStepSize(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
    {%- if patchwiseAdjust %}
    // adjustSolution is implemented by the user solver as patchwise adjust option was used 
    {%- else %}
    void adjustSolution(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,const double t,const double dt) override; 
    {%- endif %}
    void faceUnknownsProlongation(double* lQhbndFine,double* lFhbndFine,const double* lQhbndCoarse,const double* lFhbndCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) override;
    void faceUnknownsRestriction(double* lQhbndCoarse,double* lFhbndCoarse,const double* lQhbndFine,const double* lFhbndFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) override;
    void volumeUnknownsProlongation(double* luhFine,const double* luhCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) override;
    void volumeUnknownsRestriction(double* luhCoarse,const double* luhFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) override;

    static void constantsToString(std::ostream& os);
    static void abortWithMsg(const char* const msg);
    
    //padded array size, override default ADERDGSolver values
    int getTempSpaceTimeUnknownsSize()      const {return {{optNamespace}}::getlQiSize();          }
    int getTempSpaceTimeFluxUnknowns0Size() const {return {{optNamespace}}::getlFiSize();          }
    int getTempSpaceTimeFluxUnknowns1Size() const {return {{optNamespace}}::getgradQSize();        }
    int getTempUnknownsSize()               const {return {{optNamespace}}::getlQhiSize();         }
    int getTempFluxUnknownsSize()           const {return {{optNamespace}}::getlFhiSize();         }
    int getTempPointForceSourcesSize()      const {return {{optNamespace}}::getPSiSize();          }
    int getBndFaceSize()                    const {return {{optNamespace}}::getBndFaceSize();      }
    int getBndTotalSize()                   const {return {{optNamespace}}::getBndTotalSize();     }
    int getBndFluxSize()                    const {return {{optNamespace}}::getBndFluxSize();      }
    int getBndFluxTotalSize()               const {return {{optNamespace}}::getBndFluxTotalSize(); }
    
    bool alignTempArray()                  const {return true;}
    
    bool usePaddedData_nVar() const {return true;}
    bool usePaddedData_nDoF() const {return true;}
    
    //not used PDE
    {%- if !useMaterialParam %}
    void multiplyMaterialParameterMatrix(const double* const Q, double* rhs) final {}
    {%- endif %}
    {%- if patchwiseAdjust %}
    void adjustPointSolution(const double* const x,const double t,const double dt,double* Q) final {};
    {%- endif %}
    
    //helper function
    inline double* allocateArray(const int size) {return ((double *) _mm_malloc(sizeof(double)*size, ALIGNMENT));}
    inline void freeArray(double*& array) {_mm_free(array);}
      
};

#endif // __{{abstractSolver}}_CLASS_HEADER__
