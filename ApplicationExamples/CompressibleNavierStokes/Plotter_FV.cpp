// This file was generated by the ExaHyPE toolkit.
// It will not be overwritten.
//
//
// ========================
//   www.exahype.eu
// ========================
#include "Plotter_FV.h"
#include <kernels/GaussLegendreQuadrature.h>
#include "NavierStokesSolver_FV.h"
#include "NavierStokesSolver_FV_Variables.h"
#include "PDE.h"
#include "totalVariation.h"

NavierStokes::Plotter_FV::Plotter_FV(NavierStokes::NavierStokesSolver_FV& solver) :
        solver(&solver) {

}

NavierStokes::Plotter_FV::~Plotter_FV() {
}

void NavierStokes::Plotter_FV::startPlotting( double time) {
  // @TODO Please insert your code here.
}


void NavierStokes::Plotter_FV::finishPlotting() {
  // @TODO Please insert your code here.
}

void NavierStokes::Plotter_FV::mapQuantities(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& x,
    const tarch::la::Vector<DIMENSIONS, int>&    pos,
    double* Q,
    double* outputQuantities,
    double timeStamp
) {
  auto vars = Variables(Q);
  constexpr auto writtenUnknowns = vars.Size;

  for (int i = 0; i < writtenUnknowns; ++i){
    outputQuantities[i] = Q[i];
  }

  const auto& ns = solver->ns;

  const auto pressure = ns.evaluatePressure(vars.E(), vars.rho(), vars.j(),
                                            ns.getZ(Q));
  const auto temperature = ns.evaluateTemperature(vars.rho(), pressure);

  const auto potT = ns.evaluatePotentialTemperature(temperature, pressure);

  // Write potential temperature
  outputQuantities[writtenUnknowns] = potT;
}