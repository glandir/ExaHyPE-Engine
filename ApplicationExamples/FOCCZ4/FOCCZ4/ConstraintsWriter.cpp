// This file was generated by the ExaHyPE toolkit.
// It will not be overwritten.
//
//
// ========================
//   www.exahype.eu
// ========================

#include "PDE.h" // ADMConstraints()

#include "AbstractFOCCZ4Solver_ADERDG.h"
#include "ConstraintsWriter.h"

FOCCZ4::ConstraintsWriter::ConstraintsWriter(FOCCZ4::FOCCZ4Solver& solver) {
  // @TODO Please insert your code here.
}

FOCCZ4::ConstraintsWriter::~ConstraintsWriter() {
}

void FOCCZ4::ConstraintsWriter::startPlotting( double time) {
  // @TODO Please insert your code here.
}


void FOCCZ4::ConstraintsWriter::finishPlotting() {
  // @TODO Please insert your code here.
}

void FOCCZ4::ConstraintsWriter::mapQuantities(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& x,
    const tarch::la::Vector<DIMENSIONS, int>&    pos,
    double* Q, double* gradQ,
    double* outputQuantities,
    double timeStamp
) {
	// this should be a UserOnTheFlyPostProcessing constant,
	// allowing to ensure we write out 6 unknowns.
	static constexpr int writtenUnknowns = 6;

	for(int i=0; i<59; i++) { if(Q[i]!=Q[i]) std::abort(); }
	
	admconstraints_(outputQuantities, Q, gradQ);

	for(int i=0; i<6; i++) { if(outputQuantities[i]!=outputQuantities[i]) std::abort(); }
}
