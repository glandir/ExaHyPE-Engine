/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 Euler Flow

 A simple project. (well, it was simple, in the beginning).

 */
exahype-project  Euler

  peano-kernel-path          = ./Peano
  exahype-path               = ./ExaHyPE
  output-directory           = ./ApplicationExamples/EulerFlow
  architecture               = noarch

  computational-domain
    dimension                = 2
    width                    = 15.0, 15.0
    offset                   = 0.0, 0.0
    end-time                 = 0.5
  end computational-domain

/*
  shared-memory
    identifier               = dummy
    cores                    = 4
    properties-file          = sharedmemory.properties
  end shared-memory
*/

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,FCFS}
    buffer-size              = 64
    timeout                  = 120
  end distributed-memory
 
  optimisation
    fuse-algorithmic-steps          = on
    fuse-algorithmic-steps-factor   = 0.99    
    timestep-batch-factor           = 0.8
    skip-reduction-in-batched-time-steps = on
    disable-amr-if-grid-has-been-stationary-in-previous-iteration = off
  end optimisation
  
  solver ADER-DG MyEulerSolver
    variables         = 5
    parameters        = 0
    order             = 3
    maximum-mesh-size = 0.5
    time-stepping     = global
    kernel            = generic::fluxes::nonlinear
    language          = C
  end solver
end exahype-project
