/******************************************************************************
 *                       Code generated with sympy 1.2                        *
 *                                                                            *
 *              See http://www.sympy.org/ for more information.               *
 *                                                                            *
 *          This file is part of 'NavierStokes_ManufacturedSolution'          *
 ******************************************************************************/
#define __USE_MISC
#include "ManufacturedSolution.h"
#include <math.h>

void evaluateSource(double R, double gamma, double kappa, double mu, double t,
                    double x, double y, double *out_6806445484859938771) {
  out_6806445484859938771[0] =
      (2.0 / 5.0) * M_PI *
          (0.125 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y) +
           0.25) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.050000000000000003 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2) +
      1.0 * M_PI *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y);
  out_6806445484859938771[1] =
      0.026666666666666672 * pow(M_PI, 2) * mu *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      2 * M_PI *
          (0.125 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y) +
           0.25) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) +
      0.050000000000000003 * M_PI *
          (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                     (1.0 / 5.0) * M_PI * y) +
           1) *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.012500000000000001 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              3) +
      0.25 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2) +
      0.020000000000000004 * M_PI *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y);
  out_6806445484859938771[2] =
      0.026666666666666672 * pow(M_PI, 2) * mu *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      2 * M_PI *
          (0.125 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y) +
           0.25) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) +
      0.050000000000000003 * M_PI *
          (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                     (1.0 / 5.0) * M_PI * y) +
           1) *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.012500000000000001 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              3) +
      0.25 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2) +
      0.020000000000000004 * M_PI *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y);
  out_6806445484859938771[3] =
      -2 * kappa *
          (0.020000000000000004 * pow(M_PI, 2) *
               (0.10000000000000001 *
                    sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                        (1.0 / 5.0) * M_PI * y) +
                0.5 / gamma) *
               cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) /
               (R * pow(0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                                  (1.0 / 5.0) * M_PI * y) +
                            1,
                        2)) +
           0.020000000000000004 * pow(M_PI, 2) *
               (0.10000000000000001 *
                    sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                        (1.0 / 5.0) * M_PI * y) +
                0.5 / gamma) *
               pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y),
                   2) /
               (R * pow(0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                                  (1.0 / 5.0) * M_PI * y) +
                            1,
                        3)) -
           0.004000000000000001 * pow(M_PI, 2) *
               sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) /
               (R * (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                               (1.0 / 5.0) * M_PI * y) +
                     1)) +
           0.004000000000000001 * pow(M_PI, 2) *
               sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) *
               cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) /
               (R * pow(0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                                  (1.0 / 5.0) * M_PI * y) +
                            1,
                        2))) +
      0.013333333333333336 * pow(M_PI, 2) * mu *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2) -
      0.013333333333333336 * pow(M_PI, 2) * mu *
          pow(cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2) -
      0.25 * M_PI *
          (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                     (1.0 / 5.0) * M_PI * y) +
           1) *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) +
      (2.0 / 5.0) * M_PI *
          (0.015625 *
               (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                          (1.0 / 5.0) * M_PI * y) +
                1) *
               pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y),
                   2) +
           0.025000000000000001 * sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                                      (1.0 / 5.0) * M_PI * y) +
           0.25 *
               (0.10000000000000001 *
                    sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                        (1.0 / 5.0) * M_PI * y) +
                0.5 / gamma) /
               (gamma - 1) +
           0.125 / gamma) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) +
      2 *
          (0.0062500000000000003 * M_PI *
               (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                          (1.0 / 5.0) * M_PI * y) +
                1) *
               sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) *
               cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) -
           0.0015625000000000001 * M_PI *
               pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y),
                   3) +
           0.005000000000000001 * M_PI *
               cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) +
           0.005000000000000001 * M_PI *
               cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                   (1.0 / 5.0) * M_PI * y) /
               (gamma - 1)) *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) +
      0.0625 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              3) -
      0.20000000000000001 * M_PI *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) /
          (gamma - 1);
}

void evaluateQ(double gamma, double mu, double t, double x, double y,
               double *out_7412217984205951568) {
  out_7412217984205951568[0] =
      0.5 *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) +
      1;
  out_7412217984205951568[1] =
      0.25 *
      (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                 (1.0 / 5.0) * M_PI * y) +
       1) *
      sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y);
  out_7412217984205951568[2] =
      0.25 *
      (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                 (1.0 / 5.0) * M_PI * y) +
       1) *
      sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y);
  out_7412217984205951568[3] =
      0.0625 *
          (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                     (1.0 / 5.0) * M_PI * y) +
           1) *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2) +
      (0.10000000000000001 * sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                                 (1.0 / 5.0) * M_PI * y) +
       0.5 / gamma) /
          (gamma - 1);
}
void evaluateGradQ(double gamma, double mu, double t, double x, double y,
                   double *out_5697514675949505802) {
  out_5697514675949505802[0] =
      -0.10000000000000001 * M_PI *
      sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y);
  out_5697514675949505802[1] =
      (1.0 / 5.0) * M_PI *
          (0.125 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y) +
           0.25) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.025000000000000001 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2);
  out_5697514675949505802[2] =
      (1.0 / 5.0) * M_PI *
          (0.125 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y) +
           0.25) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.025000000000000001 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2);
  out_5697514675949505802[3] =
      0.025000000000000001 * M_PI *
          (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                     (1.0 / 5.0) * M_PI * y) +
           1) *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.0062500000000000003 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              3) +
      0.020000000000000004 * M_PI *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) /
          (gamma - 1);
  out_5697514675949505802[4] =
      -0.10000000000000001 * M_PI *
      sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y);
  out_5697514675949505802[5] =
      (1.0 / 5.0) * M_PI *
          (0.125 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y) +
           0.25) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.025000000000000001 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2);
  out_5697514675949505802[6] =
      (1.0 / 5.0) * M_PI *
          (0.125 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                       (1.0 / 5.0) * M_PI * y) +
           0.25) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.025000000000000001 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              2);
  out_5697514675949505802[7] =
      0.025000000000000001 * M_PI *
          (0.5 * cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                     (1.0 / 5.0) * M_PI * y) +
           1) *
          sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) -
      0.0062500000000000003 * M_PI *
          pow(sin(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x +
                  (1.0 / 5.0) * M_PI * y),
              3) +
      0.020000000000000004 * M_PI *
          cos(-2 * M_PI * t + (1.0 / 5.0) * M_PI * x + (1.0 / 5.0) * M_PI * y) /
          (gamma - 1);
}
