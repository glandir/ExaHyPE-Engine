// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
// 
// ========================
//   www.exahype.eu
// ========================

#include "EulerSolver.h"
#include "NavierStokes.h"

#include "EulerSolver_Variables.h"
#include "kernels/KernelUtils.h"


tarch::logging::Log Euler::EulerSolver::_log( "Euler::EulerSolver" );


void Euler::EulerSolver::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // @todo Please implement/augment if required

}

void Euler::EulerSolver::adjustPointSolution(const double* const x,const double t,const double dt,double* Q) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
  // @todo Please implement/augment if required
  /*
  if (tarch::la::equals(t,0.0)) {
    Variables vars(Q);

    vars.j(0.0, 0.0, 0.0);
    vars.rho() = 1.0;
    vars.E() = 1./ (GAMMA-1) +
      std::exp(
	       -((x[0] - 0.5) * (x[0] - 0.5) +
		 (x[1] - 0.5) * (x[1] - 0.5)) / (0.05*0.05)) * 1.0e-3;
    }
  */
  double p;
  if (tarch::la::equals(t,0.0)) {
    Variables vars(Q);
    // Sod shock tube
    if (x[0] < 0.5) {
      vars.rho() = 1.0;
      const double u = 0.0; 
      vars.j(u * vars.rho(), 0.0, 0.0);
      p  = 1.0;
    } else {
      vars.rho() = 0.125;
      const double u = 0;
      vars.j(u * vars.rho(), 0.0, 0.0);
      p  = 0.1;
    }
    vars.E() = p/(GAMMA - 1) + 0.5 / vars.rho() * (vars.j(0) * vars.j(0));

  }

}

void Euler::EulerSolver::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int normalNonZero,
  const double * const fluxIn,const double* const stateIn,
  double *fluxOut,double* stateOut) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
  // @todo Please implement/augment if required

  // Set wall boundary conditions.
  std::copy_n(stateIn, NumberOfVariables, stateOut);
  stateOut[1+normalNonZero]= -stateOut[1+normalNonZero];

  // Compute appropiate flux.
  double _F[3][NumberOfVariables]={0.0};
  double* F[3] = {_F[0], _F[1], _F[2]};
  flux(stateOut,F);

  std::copy_n(F[normalNonZero], NumberOfVariables, fluxOut);
 }

void Euler::EulerSolver::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int normalNonZero,
					const tarch::la::Vector<DIMENSIONS, double>& cellSize, const double * const fluxIn,const double* const stateIn,
					double *fluxOut,double* stateOut) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
  // @todo Please implement/augment if required

  // Set wall boundary conditions.
  std::copy_n(stateIn, NumberOfVariables, stateOut);
  stateOut[1+normalNonZero]= -stateOut[1+normalNonZero];

  // Compute appropiate flux.
  double _F[3][NumberOfVariables]={0.0};
  double* F[3] = {_F[0], _F[1], _F[2]};

  // TODO: Compute gradient here for flux.
  double gradQ[DIMENSIONS * NumberOfVariables] = {0.0};
  kernels::idx2 idx_gradQ(DIMENSIONS, NumberOfVariables);

  flux(stateOut,F);

  std::copy_n(F[normalNonZero], NumberOfVariables, fluxOut);
 }

exahype::solvers::Solver::RefinementControl Euler::EulerSolver::refinementCriterion(const double* luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,const int level) {
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this 
// file and its header and rerun the toolkit
//*****************************************************************************


void Euler::EulerSolver::eigenvalues(const double* const Q,const int d,double* lambda) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
  
  ReadOnlyVariables vars(Q);
  Variables eigs(lambda);

  const double inv_rho = 1./vars.rho();
  const auto p = evaluatePressure(vars.E(), inv_rho, vars.j());

  double u_n = vars.j(d) * inv_rho;
  double c = std::sqrt(GAMMA * p * inv_rho);

  eigs.rho() = u_n - c;
  eigs.E() = u_n + c;
  eigs.j(u_n, u_n, u_n);
}

// TODO(Lukas) remove, currently called in boundaryValues!
void Euler::EulerSolver::flux(const double* const Q, double** F) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
 
  ReadOnlyVariables vars(Q);
  Fluxes f(F);

  // Identity
  tarch::la::Matrix<3,3,double> I;
  I = 1, 0, 0,
      0, 1, 0,
      0, 0, 1;

  // tarch::la::Matrix<3,3,double> I;
  // I = 1,0,0,0,1,0,0,0,1;

  const double inv_rho = 1./vars.rho();
  const auto p = evaluatePressure(vars.E(), inv_rho, vars.j());

  f.rho(vars.j());
  f.j(inv_rho * outerDot(vars.j(), vars.j()) + p*I);
  f.E(inv_rho * (vars.E() + p) * vars.j());
}

void Euler::EulerSolver::flux(const double* const Q,const double* const gradQ, double** F) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
 
  ReadOnlyVariables vars(Q);
  Fluxes f(F);

  // Identity
  tarch::la::Matrix<3,3,double> I;
  I = 1, 0, 0,
      0, 1, 0,
      0, 0, 1;

  const double inv_rho = 1./vars.rho();
  const auto p = evaluatePressure(vars.E(), inv_rho, vars.j());

  // gradQ: dim, variable
  kernels::idx2 idx_gradQ(DIMENSIONS, NumberOfVariables);

  // Velocities
  const auto vx = vars.j(0) / vars.rho();
  const auto vy = vars.j(1) / vars.rho();
  const auto vz = vars.j(2) / vars.rho();

  // TODO: What if rho is tiny? Possibly add epsilon here for stability.
  const auto invRho = 1. / vars.rho();

  // Derivatives of velocities.
  const auto vx_dx = invRho * (-gradQ[idx_gradQ(0, 1)] + vx * gradQ[(idx_gradQ(0,0))]);
  const auto vy_dx = invRho * (-gradQ[idx_gradQ(0, 2)] + vy * gradQ[(idx_gradQ(0,0))]);
  const auto vz_dx = invRho * (-gradQ[idx_gradQ(0, 3)] + vz * gradQ[(idx_gradQ(0,0))]);

  const auto vx_dy = invRho * (-gradQ[idx_gradQ(1, 1)] + vx * gradQ[(idx_gradQ(1,0))]);
  const auto vy_dy = invRho * (-gradQ[idx_gradQ(1, 2)] + vy * gradQ[(idx_gradQ(1,0))]);
  const auto vz_dy = invRho * (-gradQ[idx_gradQ(1, 3)] + vz * gradQ[(idx_gradQ(1,0))]);

  const auto vx_dz = invRho * (-gradQ[idx_gradQ(2, 1)] + vx * gradQ[(idx_gradQ(2,0))]);
  const auto vy_dz = invRho * (-gradQ[idx_gradQ(2, 2)] + vy * gradQ[(idx_gradQ(2,0))]);
  const auto vz_dz = invRho * (-gradQ[idx_gradQ(2, 3)] + vz * gradQ[(idx_gradQ(2,0))]);

  // Gradient and divergence 
  tarch::la::Matrix<3,3,double> gradV;
  gradV = vx_dx, vy_dx, vz_dx,
    vx_dy, vy_dy, vz_dy,
    vx_dz, vy_dz, vz_dz;
  
  const auto div_v = vx_dx + vy_dy + vz_dz;

  const double viscosity = 0.01; // TODO(Lukas) compute visc.
  const auto stressTensor = (2./3.) * div_v * I - 
    viscosity * (gradV + tarch::la::transpose(gradV));

  // Temperature: TODO, kappa currently set to 0
  const double Pr = 0.71; // Prandtl number
  // T = (p)/(vars.rho() * Pr)
  // Compute derivatives of T with quotient rule
  // Tn = numerator of T, Td = denominator of T

  const double Tn = p;
  const double Td = vars.rho() * Pr;

  const double normV = vx*vx + vy*vy + vz * vz;

  // Derivative of squared velocities.
  const double vx_vx_dx = 2 * vx * vx_dx;
  const double vy_vy_dx = 2 * vy * vy_dx;
  const double vz_vz_dx = 2 * vz * vz_dx;
  const double normV_dx = vx_vx_dx + vy_vy_dx + vz_vz_dx;

  const double vx_vx_dy = 2 * vx * vy_dx;
  const double vy_vy_dy = 2 * vy * vy_dx;
  const double vz_vz_dy = 2 * vz * vy_dx;
  const double normV_dy = vx_vx_dy + vy_vy_dy + vz_vz_dy;

  const double vx_vx_dz = 2 * vx * vx_dz;
  const double vy_vy_dz = 2 * vy * vy_dz;
  const double vz_vz_dz = 2 * vz * vz_dz;
  const double normV_dz = vx_vx_dz + vy_vy_dz + vz_vz_dz;
  
  // Derivatives of numerator of T
  const double scale_Tn = (GAMMA - 1.0);
  const double Tn_dx = scale_Tn * (gradQ[idx_gradQ(0,4)] - 0.5 * (gradQ[idx_gradQ(0,0)] * normV + vars.rho() *  normV_dx));
  const double Tn_dy = scale_Tn * (gradQ[idx_gradQ(1,4)] - 0.5 * (gradQ[idx_gradQ(1,0)] * normV + vars.rho() *  normV_dy));
  const double Tn_dz = scale_Tn * (gradQ[idx_gradQ(2,4)] - 0.5 * (gradQ[idx_gradQ(2,0)] * normV + vars.rho() *  normV_dz));

  // Derivatives of denominator of T
  const double Td_dx = Pr * gradQ[(idx_gradQ(0, 0))];
  const double Td_dy = Pr * gradQ[(idx_gradQ(1, 0))]; 
  const double Td_dz = Pr * gradQ[(idx_gradQ(2, 0))]; 

  // Assemble gradient of T
  const double scale = 1./(Td * Td);
  const double T_dx = scale * (Tn_dx*Td + Tn * Td_dx);
  const double T_dy = scale * (Tn_dy*Td + Tn * Td_dy);
  const double T_dz = scale * (Tn_dz*Td + Tn * Td_dz);
  
  const tarch::la::Vector<3, double> gradT =  {T_dx, T_dy, T_dz};
  const double kappa = 0.0;
  

  f.rho(vars.j());
  f.j(inv_rho * outerDot(vars.j(), vars.j()) + p*I + stressTensor);
  f.E(
      ((I * vars.E() + I * p + stressTensor) * (invRho * vars.j())) - kappa * gradT);
}





