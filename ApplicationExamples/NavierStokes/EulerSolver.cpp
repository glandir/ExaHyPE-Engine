// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
// 
// ========================
//   www.exahype.eu
// ========================

#include "EulerSolver.h"

#include "EulerSolver_Variables.h"


tarch::logging::Log Euler::EulerSolver::_log( "Euler::EulerSolver" );


void Euler::EulerSolver::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // @todo Please implement/augment if required

}

void Euler::EulerSolver::adjustPointSolution(const double* const x,const double t,const double dt,double* Q) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
  // @todo Please implement/augment if required
  /*
  if (tarch::la::equals(t,0.0)) {
    Variables vars(Q);

    vars.j(0.0, 0.0, 0.0);
    vars.rho() = 1.0;
    vars.E() = 1./ (GAMMA-1) +
      std::exp(
	       -((x[0] - 0.5) * (x[0] - 0.5) +
		 (x[1] - 0.5) * (x[1] - 0.5)) / (0.05*0.05)) * 1.0e-3;
    }
  */
  double p;
  if (tarch::la::equals(t,0.0)) {
    Variables vars(Q);
    // Sod shock tube
    if (x[0] < 0.5) {
      vars.rho() = 1.0;
      const double u = 0.0; 
      vars.j(u * vars.rho(), 0.0, 0.0);
      p  = 1.0;
    } else {
      vars.rho() = 0.125;
      const double u = 0;
      vars.j(u * vars.rho(), 0.0, 0.0);
      p  = 0.1;
    }
    vars.E() = p/(GAMMA - 1) + 0.5 / vars.rho() * (vars.j(0) * vars.j(0));

  }

}

void Euler::EulerSolver::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int normalNonZero,
  const double * const fluxIn,const double* const stateIn,
  double *fluxOut,double* stateOut) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
  // @todo Please implement/augment if required

  // Set wall boundary conditions.
  std::copy_n(stateIn, NumberOfVariables, stateOut);
  stateOut[1+normalNonZero]= -stateOut[1+normalNonZero];

  // Compute appropiate flux.
  double _F[3][NumberOfVariables]={0.0};
  double* F[3] = {_F[0], _F[1], _F[2]};
  flux(stateOut,F);

  std::copy_n(F[normalNonZero], NumberOfVariables, fluxOut);
 }

exahype::solvers::Solver::RefinementControl Euler::EulerSolver::refinementCriterion(const double* luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,const int level) {
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this 
// file and its header and rerun the toolkit
//*****************************************************************************


void Euler::EulerSolver::eigenvalues(const double* const Q,const int d,double* lambda) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
  
  ReadOnlyVariables vars(Q);
  Variables eigs(lambda);

  const double inv_rho = 1./vars.rho();
  const auto p = evaluatePressure(vars.E(), inv_rho, vars.j());

  double u_n = vars.j(d) * inv_rho;
  double c = std::sqrt(GAMMA * p * inv_rho);

  eigs.rho() = u_n - c;
  eigs.E() = u_n + c;
  eigs.j(u_n, u_n, u_n);
}


void Euler::EulerSolver::flux(const double* const Q,double** F) {
  // Dimensions                        = 3
  // Number of variables + parameters  = 5 + 0
 
  ReadOnlyVariables vars(Q);
  Fluxes f(F);

  // Identity
  tarch::la::Matrix<3,3,double> I;
  I = 1, 0, 0,
      0, 1, 0,
      0, 0, 1;

  // tarch::la::Matrix<3,3,double> I;
  // I = 1,0,0,0,1,0,0,0,1;

  const double inv_rho = 1./vars.rho();
  const auto p = evaluatePressure(vars.E(), inv_rho, vars.j());

  f.rho(vars.j());
  f.j(inv_rho * outerDot(vars.j(), vars.j()) + p*I);
  f.E(inv_rho * (vars.E() + p) * vars.j());
}





