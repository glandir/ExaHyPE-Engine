// This file was generated by the ExaHyPE toolkit.
// It will not be overwritten.
//
// ========================
//   www.exahype.eu
// ========================
#ifndef DerivativeWriter_CLASS_HEADER_
#define DerivativeWriter_CLASS_HEADER_

#include "exahype/plotters/ADERDG2UserDefined.h"
#include "exahype/plotters/ascii/MultipleReductionsWriter.h"

#include "AbstractCCZ4Solver_ADERDG.h"

namespace CCZ4 {
  class DerivativeWriter;
}

/**
 * The DerivativeWriter for all primarily ADERDG applications:
 *   * The LimitingADERDGSolver
 *   * The ADERDGSolver
 **/
class CCZ4::DerivativeWriter : public exahype::plotters::ADERDG2UserDefined {
 public:
  /** Z4 custom start */
  static constexpr int numberOfVariables = CCZ4::AbstractCCZ4Solver_ADERDG::NumberOfVariables;
  static constexpr int order = CCZ4::AbstractCCZ4Solver_ADERDG::Order;
  static constexpr int basisSize = order + 1;
  static constexpr int basisSize3 = basisSize*basisSize*basisSize;

  exahype::plotters::ascii::MultipleReductionsWriter constraintReductions;

  /** Z4 custom end */

  /**
   * Constructor.
   * 
   * \note ExaHyPE does not increment file counters for
   * you if you use user defined plotting. You have
   * to declare and manage such member variables yourself. 
   */
  DerivativeWriter();

  /**
   * This method is invoked every time a cell 
   * is touched by the plotting device.
   *
   * \note Use the protected variables _order, _variables to
   * determine the size of u. 
   * The array u has the size _variables * (_order+1)^DIMENSIONS.
   * 
   * \param[in] offsetOfPatch the offset of the cell/patch.
   * \param[in] sizeOfPatch the offset of the cell/patch.
   * \param[in] u the degrees of freedom "living" inside of the patch.
   */
  void plotPatch(
      const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
      const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch, double* u,
      double timeStamp) override;

  /** 
   * This method is called at the beginning of the plotting.
   * You can use it to reset member variables, e.g., those
   * used for calculations, or to increment file counters.
   *
   * \param[in] time a characteristic solver time stamp.
   *            Usually the global minimum.
   */
  void startPlotting( double time) override;
  
  /** 
   * This method is called at the end of the plotting.
   * You can use it to reset member variables, finalise calculations (compute square roots etc.),
   * or to increment file counters
   */
  void finishPlotting() override;
};

#endif /* DerivativeWriter_CLASS_HEADER_ */
