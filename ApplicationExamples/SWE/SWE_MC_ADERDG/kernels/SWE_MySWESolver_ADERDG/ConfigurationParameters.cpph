 
namespace SWE {
namespace MySWESolver_ADERDG_kernels {
namespace aderdg {

  // Global configuration 
  constexpr int getNumberOfVariable()        {return 4;}
  constexpr int getNumberOfVariablePadded()  {return 4;}
  
  constexpr int getNumberOfParameter()       {return 0;}
  constexpr int getNumberOfParameterPadded() {return 0;}

  // TODO(JMG): Please implement.
  constexpr int getNumberOfGlobalObservables()       {return 0;}
  
  constexpr int getNumberOfData()            {return 4;}
  constexpr int getNumberOfDataPadded()      {return 4;}
  
  constexpr int getBasisSize()               {return 2;}
  constexpr int getBasisSizePadded()         {return 4;}
  
  constexpr int getDimension()               {return 2;}

  constexpr bool isLinear()                  {return false;}
  
  // Limiter configuration
  constexpr int getBasisSizeLimiter()        {return 3;}
  constexpr int getBasisSizeLimiterPadded()  {return 4;}
  constexpr int getGhostLayerWidth()         {return 1;}
  constexpr int getNumberOfObservable()      {return 0;}

  // Array sizes
  constexpr int getlQiSize()     {return 32;}
  constexpr int getlFiSize()     {return 64;} 
  constexpr int getlSiSize()     {return 32;}
  constexpr int getgradQSize()   {return 32;}
  constexpr int getlQhiSize()    {return 16;}
  constexpr int getlFhiSize()    {return 32;}
  constexpr int getlShiSize()    {return 16;}
  constexpr int getPSiSize()     {return -1;}
  constexpr int getlPiSize()     {return -1;}
  constexpr int getlQiNextSize() {return -1;}

  constexpr int getBndFaceSize()      {return 8;} // == QR/QL size
  constexpr int getBndFaceTotalSize() {return 32;} // == lQhbnd size
  constexpr int getBndFluxSize()      {return 8;} // == FR/FL size
  constexpr int getBndFluxTotalSize() {return 128;} // == lFhbnd size
  
  constexpr int getUpdateSize() {return 16;} // == lduh size

  //Shifts for fusedSTPVI local memory
  constexpr int getlQiShift()   {return 0;}
  constexpr int getlQhiShift()  {return 32;}
  constexpr int getrhsShift()   {return 48;} //Same size as lQi
  constexpr int getgradQShift() {return 80;}
  constexpr int getlFiShift()   {return 112;}
  constexpr int getlFhiShift()  {return 176;}
  constexpr int getlSiShift()   {return 208;}
  constexpr int getlShiShift()  {return 240;}

  constexpr int getFusedSTPVISize() {return 256;}
  
  //Shifts for BoundaryConditions
  constexpr int getBndFaceShift() {return 0;}
  constexpr int getBndFluxShift()  {return 8;}
  
  constexpr int getBoundaryConditionsSize() {return 16;}
  
  
//approx Flops (only mat operations)
  //amr (*leveldelta)
  constexpr unsigned long faceUnknownsProlongation_flops = 64; // time leveldelta
  constexpr unsigned long faceUnknownsRestriction_flops = 64; // time leveldelta
  constexpr unsigned long faceFluxRestriction_flops = 0; //TODO JMG //64; // time leveldelta
  constexpr unsigned long volumeUnknownsProlongation_flops = 160; // time leveldelta
  constexpr unsigned long volumeUnknownsRestriction_flops = 160; // time leveldelta
  
  constexpr unsigned long boundaryConditions_factor = 2; //flops of boundaryValue * this factor
  constexpr unsigned long boundaryConditions_flops = 6; //other flops
  
  constexpr unsigned long getPointSources_flops = -8;
  
  constexpr unsigned long solutionAdjustment_flops = 18;
  
  constexpr unsigned long solutionUpdate_flops = 36;
  
  constexpr unsigned long stableTimeStepSize_factor = 8; //flops of eigenvalues * this factor
  constexpr unsigned long stableTimeStepSize_flops = 24;
  
  constexpr unsigned long surfaceIntegral_flops = 164;
  constexpr unsigned long faceIntegral_flops = 0; //TODO JMG //164;
  
  // fusedSTPVI, multiply by factor and sum
  constexpr unsigned long fusedSTPVI_picard_flops = 1028; // time picardIteration
  constexpr unsigned long fusedSTPVI_PDE_factor = 8; // flops of used PDE * this factor * picardIteration
  constexpr unsigned long fusedSTPVI_other_flops = 713; // other flops
  
  // RiemannSolver, also 2 eigenvalues cost
  constexpr unsigned long riemannSolver_flops = 120;
  constexpr unsigned long riemannSolver_factor = 2; // flops of NCP * this factor

  constexpr unsigned long  projectOnFVLimiterSpace_flops = 1080;
  constexpr unsigned long  projectOnDGSpace_flops = 1008;
  constexpr unsigned long  discreteMaximumPrincipleAndMinAndMaxSearch_flops = 312;
  constexpr unsigned long  findCellLocalMinAndMax_flops = 312;
  constexpr unsigned long  findCellLocalLimiterMinAndMax_flops = 0; //only min and max

}
}
}
