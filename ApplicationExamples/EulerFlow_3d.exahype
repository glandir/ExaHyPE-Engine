/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 Euler Flow

 A simple project. (well, it was simple, in the beginning).

 */
exahype-project  Euler

  peano-kernel-path          = ./Peano
  exahype-path               = ./ExaHyPE
  output-directory           = ./ApplicationExamples/EulerFlow
  architecture               = noarch

  computational-domain
    dimension                = 3
    width                    = 15.0, 15.0, 15.0
    offset                   = 0.0, 0.0, 0.0
    end-time                 = 0.1
  end computational-domain

  shared-memory
    identifier               = dummy
    cores                    = 2
    properties-file          = sharedmemory.properties
  end shared-memory

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks_per_node:4}
    buffer-size              = 64
    timeout                  = 60
  end distributed-memory

  optimisation
    fuse-algorithmic-steps          = on
    fuse-algorithmic-steps-factor   = 0.99
    /* 0.0 und 0.8 sind schon mal zwei Faktoren */
    timestep-batch-factor           = 0.0
    skip-reduction-in-batched-time-steps = on
    disable-amr-if-grid-has-been-stationary-in-previous-iteration = on
  end optimisation

  solver ADER-DG MyEulerSolver
    variables         = 5
    order             = 3
    /* 27 points: 0.05, 9 points: 0.15 */
    maximum-mesh-size = 3.0
    time-stepping     = globalfixed
    kernel            = generic::fluxes::nonlinear
    language          = C

    plot vtk::Cartesian::cells::ascii
      variables = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./conserved
      select    = x:0.0,y:0.0
    end plot

    /* this is the fake plotter used to compute global integrals */
    /* it has no output fields. */
    plot vtk::Cartesian::vertices::ascii
      variables = 0
      time = 0.0
      repeat = 0.05
      output = ./output/these-files-should-not-be-there
      select    = x:0.0,y:0.0
    end plot

    plot vtk::Cartesian::vertices::ascii
      variables = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./primitive
      select    = x:0.0,y:0.0
    end plot

    plot vtk::Cartesian::vertices::ascii
      variables = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./exact-primitive
      select    = x:0.0,y:0.0
    end plot

    /* Do not need the time series for a point in the moment
    plot probe::ascii
      variables = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./seismogram
      select    = {x:0.2,y:0.2}
    end plot
    */
  end solver
end exahype-project