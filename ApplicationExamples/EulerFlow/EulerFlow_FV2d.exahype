/**

 Euler Flow

 This setup corresponds to the Finite Volume demonstrator code as discussed in 
 Section 2 of the guidebook. To keep stuff here extremely simple, the spec file 
 does not contain any global-optimisations or any parallelisation. How to add parallel
 features is solely described in the guidebook.


 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 */
exahype-project Euler

  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./ApplicationExamples/EulerFlow/EulerFlow_FV
  architecture const               = noarch
  log-file  = we-dont-care.log

  computational-domain
    dimension const          = 2
    width                    = 1.0, 0.33
    offset                   = 0.0, 0.0
    end-time                 = 1.0
  end computational-domain

  shared-memory
    identifier               = dummy
    cores                    = 4
    properties-file          = sharedmemory.properties
  end shared-memory
 
  solver Finite-Volumes MyEulerSolver
    variables const   = rho:1,j:3,E:1
    patch-size const  = 7
    maximum-mesh-size = 0.15
    time-stepping     = global
    kernel const      = generic::godunov
    language const    = C
    /* musclhancock */
    

    plot vtk::Cartesian::cells::ascii ConservedWriter
      variables const = 5
      time            = 0.0
      repeat          = 0.5E-1
      output          = ./vtk-output/conserved
    end plot

  end solver
end exahype-project
