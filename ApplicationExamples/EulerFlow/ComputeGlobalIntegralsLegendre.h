// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================

#ifndef __ComputeGlobalIntegralsLegendre_CLASS_HEADER__
#define __ComputeGlobalIntegralsLegendre_CLASS_HEADER__

#include "exahype/plotters/Plotter.h"
namespace Euler{
  class ComputeGlobalIntegralsLegendre;

  /**
   * Forward declaration
   */
  class MyEulerSolver;
}

/* I hope these modifications are not overwritten... */
#include "TimeSeriesReductions.h"
#include "MyEulerSolver.h"


#ifndef __NVAR__
static const int nVar = Euler::MyEulerSolver::nVar; // shortcut
#define __NVAR__
#endif

class Euler::ComputeGlobalIntegralsLegendre: public exahype::plotters::Plotter::UserOnTheFlyPostProcessing{
  private:
    TimeSeriesReductions* conserved[nVar];
    TimeSeriesReductions* primitives[nVar];
    TimeSeriesReductions* errors[nVar];
    TimeSeriesReductions* statistics;
    double time;
  public:
  ComputeGlobalIntegralsLegendre(MyEulerSolver&  solver);
  virtual ~ComputeGlobalIntegralsLegendre();
  void startPlotting(double time) override;
  void finishPlotting() override;
  void mapQuantities(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& x,
    const tarch::la::Vector<DIMENSIONS, int>&    pos,
    double* Q,
    double* outputQuantities,
    double timeStamp) override;
};

#endif
