/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 Euler Flow

 A simple project. (well, it was simple, in the beginning).

 */
exahype-project  Elastic

  peano-kernel-path          = ./Peano
  exahype-path               = ./ExaHyPE
  output-directory           = ./ApplicationExamples/ElasticWaves3D_nonlinearkernel
  architecture               = noarch

  computational-domain
    dimension                = 3
    width                    = 10.0, 20.0, 20.0
    offset                   = 0.0, 0.0, 0.0
    end-time                 = 1.0
  end computational-domain

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks_per_node:4} 
    buffer-size              = 64
    timeout                  = 1200
  end distributed-memory

  optimisation
    fuse-algorithmic-steps          = on
    fuse-algorithmic-steps-factor   = 0.99    
    timestep-batch-factor           = 0.0
    skip-reduction-in-batched-time-steps = off
    disable-amr-if-grid-has-been-stationary-in-previous-iteration    = off
  end optimisation
  
  solver ADER-DG MyElasticSolver
    variables         = 12
    primitives        = 0
    parameters        = 0
    order             = 3
    maximum-mesh-size = 2.0
    time-stepping     = global
    kernel            = generic::fluxes::nonlinear
    language          = C

    plot vtk::Cartesian::vertices::ascii
      variables = 12
      time      = 0.0
      repeat    = 0.05
      output    = ./conserved
      select    = x:0.0,y:0.0
    end plot
  end solver
end exahype-project
