#!/usr/bin/env python
#
# This script enriches a given specfile with a combination of plotters.
# That can be used to compare the outcome of these plotters.
# It just prints the generated specfile which then can be further processed.
#
# Note that here we want each plotter to dump into its own output folder.
# ExaHyPE currently does not create folders when needed. Use other scripts
# to do that, for instance what you find in Misc/RunScripts/
#
# For testing, you might want to start with "DummySolver.exahype" as argument.
#
# -- SvenK, 2017-11-29
#

import os
from sys import argv
from itertools import product

# number of variables you want to write. Note that many plotters react differently
# when writtenVariables=0. To keep it easy, writtenVariables should be bigger equal
# number of Unknowns in the given specfile.
writtenVariables = 10
mapping = "TestMapQuantities" # the writer class used for comparing these plotters
base_specfile = argv[1] # use the filename as input argument
#base_specfile = "GRMHD_cpp_ADERDG-3D.exahype" # the base specfile to be overloaded
base_folder = "test-output" # the name of the folder where the output goes to

# all combinations of *k, where strings are not interpreted as lists
combine = lambda *k: list(product(*(i if not isinstance(i, basestring) else [i] for i in k)))
# flatten a potential 2d list, no flatten in tuples
def flatten(l):
    for el in l:
        if isinstance(el, list):# and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el


def plotterstring(plt, mapping=mapping, base_folder=base_folder, writtenVariables=writtenVariables):
	# plt is a tuple of a plotter configuration
	plotter_id = "::".join(plt)
	output_name = mapping + "-" + "-".join(plt)
	folder = "./%(base_folder)s/%(output_name)s/%(output_name)s" % locals()
	return """
		plot %(plotter_id)s %(mapping)s
			variables const = %(writtenVariables)d
			time      = 0.0
			repeat    = 0.0000001
			output    = %(folder)s
		end plot
		""" % locals()

def print_inject_file(fname, magicline, injection):
	# python2 print, without newline.
	print "// This file was generated by %s based on %s" % (argv[0], fname)
	for line in open(base_specfile, "r"):
		if magicline in line:
			print injection,
		print line,

# all possible values:
formats = ("vtu","vtk","Peano","carpet")
basis = ("Cartesian", "Legendre")
storeposition = ("vertices", "cells")
layout = ("binary", "ascii", "hdf5")

plotters = list(flatten([
	combine("vtk",basis,storeposition,["binary","ascii"]),
	combine("vtu",basis,storeposition,"ascii"),
	combine("Peano",basis,storeposition,["ascii","hdf5"]),
	combine(["vtk","vtu"],"Cartesian",storeposition,"limited",["binary","ascii"]),
	("carpet","cartesian","vertices","hdf5"),
	combine(["vtk","vtu"],"patches","boxes","ascii"),
]))

plotterstrings = map(plotterstring, plotters)

print_inject_file(base_specfile, "end solver", "\n".join(plotterstrings))
