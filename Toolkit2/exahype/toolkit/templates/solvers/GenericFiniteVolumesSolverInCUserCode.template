{% set solver            = data["solver"]["name"] + "_FV" if data["solver"]["type"]=="Limiting-ADER-DG" else "" %}
{% set abstractSolver    = "Abstract"+solver %}
{% set patchSize         = 2*data["solver"]["order"]+1 if data["solver"]["type"]=="Limiting-ADER-DG" else data["solver"]["patch_size"] %}
{% set kernel            = data["solver"]["fv_kernel"] %}
{% set finiteVolumesType = data["solver"]["fv_kernel"].get("scheme","godunov") %}
{% set _ghostLayers      = { "godunov" : 1, "musclhancock" : 2 } %}
{% set ghostLayerWidth   = _ghostLayers[finiteVolumesType] %}
{% set tempVarsOnStack   = kernel.get("allocate_temporary_arrays","heap")=="stack"       %}
{% set patchwiseAdjust   = kernel.get("adjust_solution","pointwise")     =="patchwise"   %}
{% set useFlux           = "flux" in kernel["terms"]               %}
{% set useSource         = "source" in kernel["terms"]             %}
{% set useNCP            = "ncp" in kernel["terms"]                %}
{% set usePointSources   = "pointsources" in kernel["terms"]       %}
{% set useMaterialParam  = "materialparameters" in kernel["terms"] %}
#include "{{solver}}.h"

#include "{{solver}}_Variables.h"


tarch::logging::Log {{project}}::{{solver}}::_log( "{{project}}::{{solver}}" );

void {{project}}::{{solver}}::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // @todo Please implement/augment if required
}

void {{project}}::{{solver}}::adjustSolution(const double* const x,const double t,const double dt, double* Q) {
  // Dimensions             = {{dimensions}}
  // Number of variables    = {{numberOfVariables + numberOfParameters}} + #parameters
  
  // @todo Please implement/augment if required
  {%- for i in range_0_nVarParam %}
  Q[{{i}}] = 0.0;
  {%- endfor %}
}

void {{project}}::{{solver}}::eigenvalues(const double* const Q, const int dIndex, double* lambda) {
  // Dimensions             = {{dimensions}}
  // Number of variables    = {{numberOfVariables + numberOfParameters}} + #parameters
  
  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  lambda[{{i}}] = 1.0;
  {%- endfor %}
}

void {{project}}::{{solver}}::boundaryValues(
    const double* const x,
    const double t,const double dt,
    const int faceIndex,
    const int d,
    const double* const stateInside,
    double* stateOutside) {
  // Dimensions             = {{dimensions}}
  // Number of variables    = {{numberOfVariables + numberOfParameters}} + #parameters

  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  stateOutside[{{i}}] = stateInside[{{i}}];
  {%- endfor %}
}

//***********************************************************
//*********************** PDE *******************************
//***********************************************************

//to add new PDEs specify them in the specification file, delete this file and its header and rerun the toolkit


{%- if useFlux %}
void {{project}}::{{solver}}::flux(const double* const Q,double** F) {
  // Dimensions                        = {{dimensions}}
  // Number of variables + parameters  = {{numberOfVariables}} + {{numberOfParameters}}
  
  // @todo Please implement/augment if required
  {%- for d in range_0_nDim %}
  {%- for i in range_0_nVar %}
  F[{{d}}][{{i}}] = 0.0;
  {%- endfor %}
  
  {%- endfor %}
}
{%- endif %}


{%- if useSource %}
//You can either implement this method or modify fusedSource
void {{project}}::{{solver}}::algebraicSource(const double* const Q,double* S) {
  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  S[{{i}}] = 0.0;
  {%- endfor %}
}
{%- endif %}

{%- if useNCP %}
void  {{project}}::{{solver}}::nonConservativeProduct(const double* const Q,const double* const gradQ,double* BgradQ) {
  // @todo Please implement/augment if required
  {%- for i in range_0_nVar %}
  BgradQ[{{i}}] = 0.0;
  {%- endfor %}
}
{%- endif %}

{%- if usePointSources %}
void  {{project}}::{{solver}}::pointSource(const double* const x,const double t,const double dt, double* forceVector, double* x0) {
  // @todo Please implement/augment if required
}
{%- endif %}
