{% set solver=data["solver"]["name"] + "_ADERDG" if data["solver"]["type"]=="Limiting-ADER-DG" else "" %}
{% set abstractSolver="Abstract"+solver %}
{% set order=data["solver"]["order"]          %}
{% set kernel=data["solver"]["aderdg_kernel"] %}
{% set useMaxPicardIterations = kernel.get("space_time_predictor",{}).get("maxpicarditer",0)!=0 %}
{% set maxPicardIterations    = kernel.get("space_time_predictor",{}).get("maxpicarditer",0)    %}
{% set tempVarsOnStack        = kernel.get("allocate_temporary_arrays","heap")=="stack"       %}
{% set patchwiseAdjust        = kernel.get("adjust_solution","pointwise")     =="patchwise"   %}
{% set isLinear    = not kernel.get("nonlinear",True)        %}
{% set isNonlinear = kernel.get("nonlinear",True)            %}
{% set isFortran   = kernel.get("language",False)=="Fortran" %}
{% set useCERK       = kernel.get("space_time_predictor",{}).get("cerkguess",False) %}
{% set userConverter = "converter" in kernel.get("optimised_kernel_debugging",[])   %}
{% set countFlops    = "flops" in kernel.get("optimised_kernel_debugging",[])       %}
{% set useFlux          = "flux" in kernel["terms"]               %}
{% set useSource        = "source" in kernel["terms"]             %}
{% set useNCP           = "ncp" in kernel["terms"]                %}
{% set usePointSources  = "pointsources" in kernel["terms"]       %}
{% set useMaterialParam = "materialparameters" in kernel["terms"] %}
