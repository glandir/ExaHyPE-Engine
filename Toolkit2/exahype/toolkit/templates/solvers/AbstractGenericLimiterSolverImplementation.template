{% set solver               = data["solver"]["name"]    %}
{% set abstractSolver       = "Abstract"+solver        %}
{% set ADERDGSolver         = solver+"_ADERDG"         %}
{% set FVSolver             = solver+"_FV"             %}
{% set ADERDGAbstractSolver = abstractSolver+"_ADERDG" %}
{% set FVAbstractSolver     = abstractSolver+"_FV"     %}
// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// =============================---==============
#include "{{abstractSolver}}.h"

#include "kernels/limiter/generic/Limiter.h"

{{project}}::{{abstractSolver}}::{{abstractSolver}}(
        const std::string identifier,
        const double maximumMeshSize,
        const int maximumMeshDepth,
        const int haloCells,
        const int regularisedFineGridLevels,
        const exahype::solvers::Solver::TimeStepping timeStepping,
        const int limiterHelperLayers,
        const int DMPObservables,
        const double DMPRelaxationParameter,
        const double DMPDifferenceScaling,
        const int iterationsToCureTroubledCell 
        {% if enableProfiler %}, std::unique_ptr<exahype::profilers::Profiler> profiler{% endif %}) :
  exahype::solvers::LimitingADERDGSolver::LimitingADERDGSolver(identifier,
    new {{project}}::{{ADERDGSolver}}(
      maximumMeshSize,maximumMeshDepth,haloCells,regularisedFineGridLevels,timeStepping,limiterHelperLayers,DMPObservables),
    new {{project}}::{{FVSolver}}(
      maximumMeshSize, timeStepping),
    DMPRelaxationParameter,
    DMPDifferenceScaling,
    iterationsToCureTroubledCell) {}

void {{project}}::{{abstractSolver}}::projectOnFVLimiterSpace(const double* const luh, double* const lim) const {
  kernels::limiter::generic::c::projectOnFVLimiterSpace<Order+1,NumberOfVariables,GhostLayerWidth>(luh, lim);
}

void {{project}}::{{abstractSolver}}::projectOnDGSpace(const double* const lim, double* const luh) const {
  kernels::limiter::generic::c::projectOnDGSpace<Order+1,NumberOfVariables,GhostLayerWidth>(lim, luh);
}

bool {{project}}::{{abstractSolver}}::discreteMaximumPrincipleAndMinAndMaxSearch(const double* const luh, double* boundaryMinPerVariables, double* boundaryMaxPerVariables) {
  return kernels::limiter::generic::c::discreteMaximumPrincipleAndMinAndMaxSearch<{{ADERDGAbstractSolver}}, NumberOfObservables, GhostLayerWidth>(luh, *static_cast<{{ADERDGAbstractSolver}}*>(_solver.get()), _DMPMaximumRelaxationParameter, _DMPDifferenceScaling, boundaryMinPerVariables, boundaryMaxPerVariables);
}

void {{project}}::{{abstractSolver}}::findCellLocalMinAndMax(const double* const luh, double* const localMinPerVariables, double* const localMaxPerVariable) {
  kernels::limiter::generic::c::findCellLocalMinAndMax<{{ADERDGAbstractSolver}}, NumberOfObservables>(luh, *static_cast<{{ADERDGAbstractSolver}}*>(_solver.get()), localMinPerVariables, localMaxPerVariable);
}
void {{project}}::{{abstractSolver}}::findCellLocalLimiterMinAndMax(const double* const lim, double* const localMinPerObservable, double* const localMaxPerObservable) {
  kernels::limiter::generic::c::findCellLocalLimiterMinAndMax<{{ADERDGAbstractSolver}}, NumberOfObservables, GhostLayerWidth>(lim, *static_cast<{{ADERDGAbstractSolver}}*>(_solver.get()), localMinPerObservable,localMaxPerObservable);
}
