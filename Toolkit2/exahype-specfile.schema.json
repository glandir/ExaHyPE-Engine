{
	"$comment": "This is the JSON-Schema for an ExaHyPE specification file 2.0",
	"$id": "http://dev.exahype.eu/exahype-specfile.schema.json",
	"type": "object", 
	"definitions": {}, 
	"$schema": "http://json-schema.org/draft-07/schema#", 
	"required": [
		"project_name",
		"computational_domain",
		"solvers"
	],
	"properties": {
		"project_name": {
			"type": "string", 
			"title": "The name of the application or PDE, will get a C++ namespace", 
			"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
			"scope": "compile-time",
			"used-by": "toolkit",
			"examples": [
				"EulerFlow"
			]
		},
		"paths": {
			"type": "object", 
			"scope": "compile-time",
			"used-by": "toolkit",
			"properties": {
				"output_directory": {
					"type": "string", 
					"title": "The directory name where to put the generated code into (relevant only for compile time)", 				
					"examples": [
						"GMRHD_cpp",
						"foo/bar/baz/"
					]
				}, 
				"peano_kernel_path": {
					"type": "string", 
					"title": "The directory where the Peano directory is installed in (relevant only for compile time)", 
					"default": "./Peano", 
					"examples": [
						"./Peano"
					]
				}, 
				"log_file": {
					"type": "string", 
					"title": "The path or name of the ExaHyPE runtime logfile", 
					"default": "output.log", 
					"examples": [
						"whatever.log",
						"/path/to/somewhere.log"
					]
				}, 
				"exahype_path": {
					"type": "string", 
					"title": "The path to the ExaHyPE code", 
					"default": "./ExaHyPE",
					"examples": [
						"./ExaHyPE",
						"/your/installation/to/ExaHyPE/"
					]
				}
			}
		},
		"architecture": {
			"type": "string", 
			"title": "Computational target architecture", 
			"default": "noarch", 
			"scope": "compile-time",
			"used-by": "toolkit",
			"enum": [
				"noarch",
				"snb",
				"hsw",
				"knl"
			]
		}, 
		"computational_domain": {
			"type": "object", 
			"oneOf": [
				{ "required": [ "dimension", "width", "offset", "end_time"] },
				{ "required": [ "dimension", "width", "offset", "time_steps"] }
			],
			"properties": {
				"dimension": {
					"type": "integer", 
					"title": "Spatial dimensions of the code and problem", 
					"scope": "compile-time",
					"enum": [ 2, 3 ]
				}, 
				"width": {
					"type": "array",
					"items": {
						"type": "number", 
						"title": "The extends of the computational domain in each spatial direction",
						"scope": "run-time",
						"minimum": 0,
						"exclusiveMinimum": true
					},
					"$comment": "We wait for a solution to: https://stackoverflow.com/questions/27597825/assigning-maxitems-property-in-an-array-in-json-schema-equal-to-some-other-prope",
					"minItems": 2,
					"maxItems": 3
				}, 
				"offset": {
					"type": "array",
					"default": [0.0, 0.0, 0.0],
					"items": {
						"type": "number", 
						"title": "The offset of the origin for the computational domain",
						"scope": "run-time"
					},
					"minItems": 2,
					"maxItems": 3
				}, 
				"oneOf": [{
					"end_time" : {
						"type": "number", 
						"title": "The end time of the simulation",
						"scope": "run-time",
						"minimum": 0,
						"exclusiveMinimum": false
					},
					"time_steps" : {
						"type": "integer", 
						"title": "The number of steps the simulation is run",
						"scope": "run-time",
						"minimum": 0,
						"exclusiveMinimum": false
					}
				}]
			}
		}, 
		"shared_memory": {
			"type": "object", 
			"used-by": "toolkit",
			"scope": "run-time",
			"properties": {
				"cores": {
					"type": "integer", 
					"title": "Number of shared-memory cores per node", 
					"default": 1, 
					"minimum": 1,
					"exclusiveMinimum": false
				}, 
				"identifier": {
					"type": "string", 
					"title": "An identifier for the algorithm to use", 
					"default": "dummy"
				}, 
				"properties_file": {
					"type": "string", 
					"title": "Path to a properties file", 
					"default": "sharedmemory.properties"
				}
			}
		}, 
		"distributed_memory": {
			"type": "object", 
			"used-by": "toolkit",
			"scope": "run-time",
			"properties": {
				"identifier": {
					"type": "string", 
					"title": "An identifier for the algorithm",
					"default": "static_load_balancing"
				}, 
				"configure": {
					"type": "array", 
					"default": ["hotspot","fair"],
					"examples": [
						"hotspot", "fair", { "ranks_per_node": 1 }
					]
				}, 
				"timeout": {
					"type": "number", 
					"title": "Timeout for MPI packages in seconds before the simulation is killed", 
					"default": 60
				}, 
				"buffer_size": {
					"type": "integer", 
					"title": "Buffer size in bytes per MPI package", 
					"default": 64
				}
			}
		}, 
		"optimisation": {
			"type": "object",
			"scope": "run-time",
			"used-by": "toolkit",
			"$comment": "This could also just be an open object where anything could be stored and content is not enforced by the Schema.",
			"properties": {
				"spawn_predictor_as_background_thread": {
					"type": "boolean", 
					"title": "Wether to spawn the predictor as a background thread, or so.",
					"default": false
				}, 
				"timestep_batch_factor": {
					"type": "number", 
					"title": "Some factor, I don't know what it is good for", 
					"default": 1
				}, 
				"spawn_double_compression": {
					"type": "boolean", 
					"title": "Whether to use double compression to save data in MPI communication", 
					"default": false
				}, 
				"spawn_double_compression_as_background_thread": {
					"type": "boolean", 
					"title": "Wether to do double compression in the background", 
					"default": false
				}, 
				"double_compression": {
					"type": "integer",
					"title": "Erhm... yeah, did I say double compression?", 
					"default": 0
				}, 
				"disable_amr_if_grid_has_been_stationary_in_previous_iteration": {
					"type": "boolean",
					"default": false
				}, 
				"fuse_algorithmic_steps": {
					"type": "boolean", 
					"default": false
				}, 
				"fuse_algorithmic_steps_factor": {
					"type": "number", 
					"title": "The Fuse_algorithmic_steps_factor Schema ",
					"default": 0.9912345
				}, 
				"batch_timesteps": {
					"type": "integer", 
					"title": "The Batch_timesteps Schema "
				}, 
				"skip_reduction_in_batched_time_steps": {
					"type": "boolean", 
					"default": false
				}, 
				"skip_reduction": {
					"type": "boolean", 
					"default": false
				}
			}
		}, 
		"solvers": {
			"type": "array",
			"$comment": "Each simulation has an ordered list of solvers assigned",
			"items": {
				"type": "object", 
				"required": [
					"name", "type", "variables","maximum_mesh_size","order"
				],
				"properties": {
					"name": {
						"type": "string", 
						"title": "The solver name", 
						"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
						"scope": "compile-time",
						"used-by": "toolkit",
						"examples": [
							"GRMHDSolver_DG",
							"HydroSolver",
							"TheoryOfEverythingSolver_FV"
						]
					}, 
					"type": {
						"type": "string", 
						"title": "The solver type", 
						"scope": "compile-time",
						"used-by": "toolkit",
						"enum": ["ADER-DG","Finite-Volumes","Limiting-ADER-DG"]
					},
					"kernel": {
						"type": "object",
						"scope": "compile-time",
						"properties": {
							"optimisation": {
								"title": "Optimization flags",
								"anyOf": [
									{ "type": "array" },
									{ "type": "string" }
								]
							}, 
							"terms": {
								"type": "array", 
								"title": "PDE terms to generate code for",
								"items": { "type": "string" }
							}, 
							"language": {
								"type": "string", 
								"title": "The walking dead",
								"enum": ["C","Fortran"],
								"default": "C"
							}, 
							"type": {
								"type": "string", 
								"title": "Type of solver", 
								"enum": ["nonlinear","linear"],
								"default": "nonlinear"
							}
						}
					},
					"variables": {
						"scope": "compile-time",
						"used-by": "toolkit",
						"$comment": "Variables must be ordered, hence an array. Note that {'rho':1,'vel':3,'E':1} is hardly scheme-able",
						"anyOf": [
							{
								"type": "integer",
								"minimum": 1,
								"exclusiveMinimum": false
							},
							{
								"type": "array",
								"$comment": "Named variables with lengths (like vectors)",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string", 
											"title": "Name of variable",
											"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
										}, 
										"multiplicity": {
											"type": "integer", 
											"title": "Multiplicity of variables", 
											"default": 1
										}
									}
								}
							},
							{
								"type": "array",
								"$comment": "Named scalar variables",
								"items": {
									"type": "string",
									"title": "Name of variable",
									"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
								}
							}
						]
					},
					"material_parameters": {
						"scope": "compile-time",
						"used-by": "toolkit",
						"$comment": "Material parameters must be ordered, hence an array. Note that {'rho':1,'vel':3,'E':1} is hardly scheme-able",
						"anyOf": [
							{
								"type": "integer",
								"minimum": 1,
								"exclusiveMinimum": false
							},
							{
								"type": "array",
								"$comment": "Named variables with lengths (like vectors)",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string", 
											"title": "Name of material parameter",
											"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
										}, 
										"multiplicity": {
											"type": "integer", 
											"title": "Multiplicity of material parameter", 
											"default": 1
										}
									}
								}
							},
							{
								"type": "array",
								"$comment": "Named scalar material parameters",
								"items": {
									"type": "string",
									"title": "Name of material parameter",
									"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
								}
							}
						]
					}, 
					"global_observables": {
						"scope": "compile-time",
						"used-by": "toolkit",
						"$comment": "global observables must be ordered, hence an array. Note that {'rho':1,'vel':3,'E':1} is hardly scheme-able",
						"anyOf": [
							{
								"type": "integer",
								"minimum": 1,
								"exclusiveMinimum": false
							},
							{
								"type": "array",
								"$comment": "Named variables with lengths (like vectors)",
								"items": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string", 
											"title": "Name of global observable",
											"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
										}, 
										"multiplicity": {
											"type": "integer", 
											"title": "Multiplicity of global observable", 
											"default": 1
										}
									}
								}
							},
							{
								"type": "array",
								"$comment": "Named scalar global observables",
								"items": {
									"type": "string",
									"title": "Name of global observable",
									"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
								}
							}
						]
					}, 
					"maximum_mesh_size": {
						"type": "number", 
						"title": "Minimum size of finest cell in the overall grid",
						"scope": "run-time"
					}, 
					"maximum_mesh_depth": {
						"type": "integer", 
						"title": "Maximum number of adaptive refinement levels.",
						"scope": "run-time"
					}, 
					"order": {
							"type": "integer", 
							"title": "Approximation order of the scheme",
							"scope": "compile-time"
					}, 
					"patchSize": {
						"type": "integer", 
						"title": "Number of subcells per coordinate direction (no ghost ",
						"scope": "compile-time"
					},
					"limiter_type": {
						"type": "integer", 
						"title": "Number of quantities considered by the discrete maximum principle check of the limiter. Only relevant for Limiting-ADER-DG solver.",
						"scope": "compile-time"
					},
					"limiter_kernel": {
						"type": "kernel",
						"scope": "compile-time",
						"properties": {
							"optimisation": {
								"title": "Optimization flags",
								"anyOf": [
									{ "type": "array" },
									{ "type": "string" }
								]
							}, 
							"terms": {
								"type": "array", 
								"title": "PDE terms to generate code for",
								"items": { "type": "string" }
							}, 
							"language": {
								"type": "string", 
								"title": "The walking dead",
								"enum": ["C","Fortran"],
								"default": "C"
							}, 
							"type": {
								"type": "string", 
								"title": "Type of solver", 
								"enum": ["nonlinear","linear"],
								"default": "nonlinear"
							}
						}
					}, 
					"dmp_observables": {
						"type": "integer", 
						"title": "Number of quantities considered by the discrete maximum principle (only Limiting-ADER-DG solver)",
						"scope": "compile-time"
					},
					"dmp_relaxation_parameter": {
						"type": "number", 
						"title": "The difference scaling used by the discrete maximum principle (only Limiting-ADER-DG solver)",
						"scope": "run-time"
					},
					"dmp_difference_scaling": {
						"type": "number", 
						"title": "The discrete maximum principle relaxation parameter (only Limiting-ADER-DG solver)",
						"scope": "run-time"
					},
					"helper_layers": {
						"type": "integer", 
						"title": "Number of limiter helper layers (only Limiting-ADER-DG solver)",
						"scope": "run-time"
					},
					"steps_till_cured": {
						"type": "integer", 
						"title": "Number of iterations to wait until a cured cell loses the 'troubled' flag (only Limiting-ADER-DG solver)",
						"scope": "run-time"
					},
					"dependencies": {
						"order": {
							"properties": {
								"type": {
									 "enum": ["ADER-DG","Limiting-ADERDG"]
								}
							}
						},
						"patchSize": {
							"properties": {
								"type": {
										 "enum": ["Finite-Volumes"]
								}
							}
						},
						"dmp_observables": {
							"properties": {
								"type": {
									 "enum": ["Limiting-ADERDG"]
								}
							}
						},
						"dmp_relaxation_parameter": {
							"properties": {
								"type": {
									 "enum": ["Limiting-ADERDG"]
								}
							}
						},
						"dmp_difference_scaling": {
							"properties": {
								"type": {
									 "enum": ["Limiting-ADERDG"]
								}
							}
						}
					},
					"time_stepping": {
						"type": "string", 
						"default": "global",
						"enum": ["global","local","whatever"],
						"scope": "run-time"
					},
					"plotters": {
						"$comment": "Each solver has an ordered list of plotters assigned. The order and name of plotters is a compile time constant",
						"type": "array",
						"required": [ "name", "type", "output", "variables", "repeat" ],
						"items": {
							"type": "object", 
							"properties": {
								"name": {
									"type": "string", 
									"title": "Name of the plotter, will be generated as filename and C++ type name (compile-time constant)",
									"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
									"scope": "compile-time",
									"used-by": "toolkit"
								},
								"type": {
									"title": "Which plotter device to adopt", 
									"scope": "run-time",
									"anyOf": [
										{
											"type": "string",
											"$comment": "Something like vtk::Cartesian::vertices::ascii"
										},
										{
											"type": "array",
											"$comment": "All keywords as list",
											"items": { "type": "string" }
										}
									],
									"examples": [
										"vtk::Cartesian::vertices::ascii",
										["vtk","Cartesian","vertices","ascii"]
									]
								},
								"output": {
									"type": "string", 
									"title": "(Base) filename where to output results to", 
									"scope": "run-time",
									"examples": [
										"./vtk-output/conserved",
										"data/someFields"
									]
								}, 
								"variables": {
									"type": "integer", 
									"title": "How much variables the plotter writes (Runtime quantitiy)",
									"minimum": 0,
									"exclusiveMinimum": true,
									"scope": "run-time"
									
								}, 
								"repeat": {
									"type": "number", 
									"title": "Request periodic plotting repeated every t, in coordinate time",
									"minimum": 0,
									"exclusiveMinimum": true,
									"examples": [
										0.0010513,
										100000.0
									]
								}, 
								"time": {
									"type": "number", 
									"title": "Time at which periodic plotting should start, in coordinate time", 
									"default": 0
								},
								"parameters": {
									"type": "object",
									"title": "Free runtime parameters for postprocessing-codes",
									"scope": "run-time"
								}

							}
						}
					}, 
					"parameters": {
						"type": "object",
						"title": "Free runtime parameters, however compile-time in terms of parameters support to be compiled in by toolkit",
						"scope": "compile-time"
					}
				}
			}
		}
	}
}
