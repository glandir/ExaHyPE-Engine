{
	"$comment": "This is the JSON-Schema for an ExaHyPE specification file 2.0",
	"$id": "http://dev.exahype.eu/exahype-specfile.schema.json",
	"type": "object",
	"$schema": "http://json-schema.org/draft-04/hyper-schema", 
	"required": [
		"project_name",
		"computational_domain",
		"solvers"
	],
	"variable" : {
		"oneOf": [
			{
				"type": "integer",
				"minimum": 1,
				"exclusiveMinimum": false
			},
			{
				"type": "array",
				"$comment": "Named variables with lengths (like vectors)",
				"items": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string", 
							"title": "Name of variable",
							"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
						}, 
						"multiplicity": {
							"type": "integer", 
							"title": "Multiplicity of variables", 
							"default": 1
						}
					}
				}
			},
			{
				"type": "array",
				"$comment": "Named scalar variables",
				"items": {
					"type": "string",
					"title": "Name of variable",
					"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
				}
			}
		]
	},
	"additionalProperties" : false,
	"properties": {
		"project_name": {
			"type": "string", 
			"title": "The name of the application or PDE, will get a C++ namespace", 
			"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
			"scope": "compile-time",
			"used-by": "toolkit",
			"examples": [
				"EulerFlow"
			]
		},
		"paths": {
			"type": "object", 
			"scope": "compile-time",
			"used-by": "toolkit",
			"required" : [ "output_directory", "peano_kernel_path", "exahype_path" ],
			"additionalProperties" : false,
			"properties": {
				"output_directory": {
					"type": "string", 
					"title": "The directory name where to put the generated code into (relevant only for compile time)", 				
					"examples": [
						"GMRHD_cpp",
						"foo/bar/baz/"
					]
				}, 
				"peano_kernel_path": {
					"type": "string", 
					"title": "The directory where the Peano directory is installed in (relevant only for compile time)", 
					"default": "./Peano", 
					"examples": [
						"./Peano"
					]
				}, 
				"log_file": {
					"type": "string", 
					"title": "The path or name of the ExaHyPE runtime logfile", 
					"default": "output.log", 
					"examples": [
						"whatever.log",
						"/path/to/somewhere.log"
					]
				}, 
				"exahype_path": {
					"type": "string", 
					"title": "The path to the ExaHyPE code", 
					"default": "./ExaHyPE",
					"examples": [
						"./ExaHyPE",
						"/your/installation/to/ExaHyPE/"
					]
				}
			}
		},
		"profiling": {
			"profiler": {
				"type": "string",
				"default": "NoOpProfiler"
			},
			"metrics": {
				"type": "string",
				"$comment": "Actually seems to be a property list again. Subject to fix!"
			}
			
		},
		"architecture": {
			"type": "string", 
			"title": "Computational target architecture", 
			"default": "noarch", 
			"scope": "compile-time",
			"used-by": "toolkit",
			"enum": [
				"noarch",
				"snb",
				"hsw",
				"knl"
			]
		}, 
		"computational_domain": {
			"type": "object",
			"oneOf": [
				{ "required": [ "dimension", "width", "offset", "end_time"] },
				{ "required": [ "dimension", "width", "offset", "time_steps"] }
			],
			"additionalProperties" : false,
			"properties": {
				"dimension": {
					"type": "integer", 
					"title": "Spatial dimensions of the code and problem", 
					"scope": "compile-time",
					"enum": [ 2, 3 ]
				}, 
				"width": {
					"type": "array",
					"items": {
						"type": "number", 
						"title": "The extends of the computational domain in each spatial direction",
						"scope": "run-time",
						"minimum": 0,
						"exclusiveMinimum": true
					},
					"$comment": "We wait for a solution to: https://stackoverflow.com/questions/27597825/assigning-maxitems-property-in-an-array-in-json-schema-equal-to-some-other-prope",
					"minItems": 2,
					"maxItems": 3
				}, 
				"offset": {
					"type": "array",
					"default": [0.0, 0.0, 0.0],
					"items": {
						"type": "number", 
						"title": "The offset of the origin for the computational domain",
						"scope": "run-time"
					},
					"minItems": 2,
					"maxItems": 3
				}, 
				"end_time" : {
						"type": "number", 
						"title": "The end time of the simulation",
						"scope": "run-time",
						"minimum": 0,
						"exclusiveMinimum": false
				},
				"time_steps" : {
						"type": "integer", 
						"title": "The number of steps the simulation is run",
						"scope": "run-time",
						"minimum": 0,
						"exclusiveMinimum": false
				}
			}
		}, 
		"shared_memory": {
			"type": "object", 
			"used-by": "toolkit",
			"scope": "run-time",
			"additionalProperties" : false,
			"properties": {
				"cores": {
					"type": "integer", 
					"title": "Number of shared-memory cores per node", 
					"minimum": 1,
					"exclusiveMinimum": false,
					"default": 1
				},
				"background_job_consumer_threads": {
					"type": "integer", 
					"title": "Number of background job consumer threads to start", 
					"minimum": -2,
					"exclusiveMinimum": false,
					"default": 1
				}, 
				"autotuning_strategy": {
					"type": "string", 
					"title": "Autotuning algorithm to use", 
					"enum" : ["dummy","autotuning","autotuning_without_learning","autotuning_without_restart","sampling"],
					"default": "dummy"
				}, 
				"configure": {
					"type": "array", 
					"default": ["dont","know","fixme"],
					"examples": [
						"please-provide-here",
					]
				},
				"background_tasks": {
					"$comment": "Used to be a part of 'configure'",
					"type": "integer",
					"default": 1
				},
				"properties_file": {
					"type": "string", 
					"title": "Path to a properties file", 
					"default": "sharedmemory.properties"
				}
			},
			"dependencies": {
				"background_job_consumer_threads" : ["cores"]
			}
		}, 
		"distributed_memory": {
			"type": "object", 
			"used-by": "toolkit",
			"scope": "run-time",
			"additionalProperties" : false,
			"required" : ["ranks_per_node"],
			"anyOf": [
				{
					"properties": {
						"node_pool_strategy" : { "enum": ["sfc_diffusion"] }
					},
					"required": [ "ranks_per_node", "primary_ranks_per_node" ]
				},
				{
					"properties": {
						"node_pool_strategy" : { "enum": ["hotspot","FCFS"] }
					},
					"required": [ "ranks_per_node" ]
				}
			],
			"properties": {
				"load_balancing_type": {
					"type": "string", 
					"title": "The load balancing type",
					"enum" : ["static","dynamic"],
					"default": "static"
				}, 
<<<<<<< HEAD
				"configure": {
					"type": "array", 
					"default": ["hotspot","fair"],
					"examples": [
						"FCFS",
						"fair",
						"sfc-diffusion",
						"greedy-naive",
						"greedy-regular",
						"hotspot"
					]
				},
				"primary_ranks_per_node": {
					"$comment": "Former member of configure, but I find it here better placed",
					"type": "integer",
					"default": -1
				},
				"ranks_per_node": {
					"$comment": "Former member of configure, but I find it here better placed",
					"type": "integer",
					"default": 1
				},
				"max_node_pool_answering_time": {
					"$comment": "Former member of configure, but I find it here better placed",
					"type": "number",
					"default": 1e-2
=======
				"load_balancing_strategy": {
					"type": "string", 
					"title": "Determines ranks with too much load",
					"enum" : ["fair","greedy_naive","greedy_regular"],
					"default": "fair"
				}, 
				"node_pool_strategy" : {
					"type": "string", 
					"title": "Determines how requests for ranks are dealt with",
					"enum" : ["hotspot","FCFS","sfc_diffusion"],
					"default": "hotspot"
				},
				"ranks_per_node" : {
					"type": "integer", 
					"title": "MPI ranks used per node"
				},
				"primary_ranks_per_node" : {
					"type": "integer", 
					"title": "Primary MPI ranks used per node (only SFC-Diffusion node pool strategy)"
>>>>>>> aac4a5ba12b63e1cf35eb212c2f5218a6cba1e70
				},
				"timeout": {
					"type": "number", 
					"title": "Timeout for MPI packages in seconds before the simulation is killed", 
					"default": 60
				}, 
				"buffer_size": {
					"type": "integer", 
					"title": "Buffer size in bytes per MPI package", 
					"default": 64
				}
			}
		}, 
		"optimisation": {
			"type": "object",
			"scope": "run-time",
			"used-by": "toolkit",
			"$comment": "This could also just be an open object where anything could be stored and content is not enforced by the schema.",
			"additionalProperties" : false,
			"properties": {
				"fuse_algorithmic_steps": {
					"type": "boolean", 
					"default": false
				}, 
				"fuse_algorithmic_steps_factor": {
					"type": "number", 
					"title": "The weight used for estimating the next time step size",
					"default": 0.99
				},
				"spawn_predictor_as_background_thread": {
					"type": "boolean", 
					"title": "Wether to spawn the predictor as a background thread, or so.",
					"default": false
				},
				"spawn_amr_background_threads": {
					"type": "boolean", 
					"title": "Wether to spawn the predictor as a background thread, or so.",
					"default": false
				}, 
				"disable_vertex_exchange_in_time_steps": {
					"type": "boolean", 
					"title": "Turn off the Peano vertex exchange during time stepping iterations",
					"default": false
<<<<<<< HEAD
				},
				"disable_metadata_exchange_in_batched_time_steps": {
					"type": "boolean",
					"default": false
				},
				"fuse_algorithmic_steps_factor": {
=======
				}, 
				"time_step_batch_factor": {
>>>>>>> aac4a5ba12b63e1cf35eb212c2f5218a6cba1e70
					"type": "number", 
					"title": "This factor determines how many time steps are run as a batch", 
					"default": 0.0
				},
				"disable_metadata_exchange_in_batched_time_steps" : {
					"type": "boolean", 
					"title": "Turn off the exchange of ExaHyPE solver metadata during batched time steps",
					"default": false
				},
				"double_compression": {
					"type": "number",
					"title": "The double compression factor. 0.0 turns double compression off.", 
					"default": 0.0
				},
				"spawn_double_compression_as_background_thread": {
					"type": "boolean", 
					"title": "Whether to do double compression in the background", 
					"default": false
				}
			},
			"dependencies": {
				"spawn_double_compression_as_background_thread" : ["double_compression"],
				"fuse_algorithmic_steps_factor" : ["fuse_algorithmic_steps"],
				"disable_metadata_exchange_in_batched_time_steps" : ["time_step_batch_factor"]
			}
		}, 
		"solvers": {
			"type": "array",
			"$comment": "Each simulation has an ordered list of solvers assigned",
			"additionalProperties" : false,
			"items": {
				"type": "object", 
				"additionalProperties" : false,
				"required": [ "type" ],
				"anyOf": [
					{
						"properties": {
							"type": { "enum": ["ADER-DG"] }
						},
						"required": [ "name", "type", "variables","maximum_mesh_size", "order", "aderdg_kernel" ]
					},
					{
						"properties": {
							"type": { "enum": ["Limiting-ADER-DG"] }
						},
						"required": [ "name", "type", "variables","maximum_mesh_size", "order", "aderdg_kernel", "fv_kernel", "dmp_observables", "dmp_difference_scaling", "dmp_relaxation_parameter" ]
					},
					{
						"properties": {
							"type": { "enum": ["Finite-Volumes"] }
						},
						"required": [ "name", "type", "variables","maximum_mesh_size", "patch_size", "fv_kernel" ]
					}
				],
				"properties": {
					"name": {
						"type": "string", 
						"title": "The solver name", 
						"$comment": "Is also called 'identifier' in some contexts",
						"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
						"scope": "compile-time",
						"used-by": "toolkit",
						"examples": [
							"GRMHDSolver_DG",
							"HydroSolver",
							"TheoryOfEverythingSolver_FV"
						]
					}, 
					"type": {
						"type": "string", 
						"title": "The solver type", 
						"scope": "compile-time",
						"used-by": "toolkit",
						"enum": ["ADER-DG","Finite-Volumes","Limiting-ADER-DG"]
					},
					"aderdg_kernel": {
						"type": "object",
						"scope": "compile-time",
						"required" : [ "terms" ],
						"additionalProperties" : "false",
						"properties": {
							"optimisations": {
								"type": "array",
								"title": "Optimization flags",
								"items": { 
									"oneOf" : [ 
										{ "enum" : ["generic", "optimised", "notimeavg", "patchwiseadjust", "usestack", "fusedsource", "fluxvect", "fusedsourcevect", "cerkguess", "converter", "flops"] },
										{ "type" : "object", "required" : ["maxpicarditer"], "additionalProperties": false, "properties" : { "maxpicarditer" : { "type" : "number" } } }
									]
								}
							}, 
							"terms": {
								"type": "array", 
								"title": "PDE terms to generate code for",
								"items": { 
									"oneOf" : [ 
										{ "enum" : ["flux", "source", "ncp", "materialparameters"] },
										{ "type" : "object", "required" : ["pointsources"], "additionalProperties": false, "properties" : { "pointsources" : { "type" : "number" } } }
									]
								}
<<<<<<< HEAD
							}
						]
					},
					"halo_cells": {
						"type": "integer",
						"$comment": "TODO: Found in Solver, please describe me"
					},
					"regularised_fine_grid_levels": {
						"type": "integer",
						"$comment": "TODO: Found in Solver, please describe me"
					},
					"dmp_relaxation_parameters": {
						"type": "number",
						"svens_tag": "limiter, required?",
						"$comment": "TODO: Found in Solver, please describe me"
					},
					"dmp_difference_scaling": {
						"type": "number",
						"svens_tag": "limiter, required?",
						"$comment": "TODO: Found in Solver, please describe me"
					},
					"dmp_observables": {
						"type": "integer",
						"svens_tag": "limiter, required!",
						"$comment": "TODO: Found in Solver, please describe me"
					},
					"steps_till_cured": {
						"type": "integer",
						"svens_tag": "limiter",
						"$comment": "TODO: Found in Solver, please describe me"
					},
					"help_layers": {
						"type": "integer",
						"svens_tag": "limiter",
						"$comment": "TODO: Found in Solver, please describe me"
					},
					"global_observables": {
						"scope": "compile-time",
						"used-by": "toolkit",
						"$comment": "global observables must be ordered, hence an array. Note that {'rho':1,'vel':3,'E':1} is hardly scheme-able",
						"anyOf": [
							{
								"type": "integer",
								"minimum": 1,
								"exclusiveMinimum": false
=======
>>>>>>> aac4a5ba12b63e1cf35eb212c2f5218a6cba1e70
							},
							"language": {
								"type": "string", 
								"title": "The walking dead",
								"enum": ["C","Fortran"],
								"default": "C"
							}, 
							"type": {
								"type": "string", 
								"title": "Type of solver", 
								"enum": ["nonlinear","linear"],
								"default": "nonlinear"
							},
							"basis": {
								"type": "string", 
								"title": "Basis functions", 
								"enum": ["Legendre","Lobatto"],
								"default": "Legendre"
							}
<<<<<<< HEAD
						]
					}, 
					"maximum_mesh_size": {
						"type": "number", 
						"title": "Minimum size of finest cell in the overall grid",
						"scope": "run-time"
					}, 
					"time_stepping": {
						"type": "string", 
						"default": "global",
						"enum": ["global","local","TODO: whatever"],
						"scope": "run-time"
					}, 
					"oneOf" : [{
						"order": {
							"type": "integer", 
							"title": "For a DG solver: Approximation (convergence) order of the scheme",
							"scope": "compile-time"
						}, 
						"patchSize": {
							"type": "integer", 
							"title": "For a FV solver: Number of subcells per coordinate direction (no ghost; convergence order is always k=3 in ExaHyPE)",
							"scope": "compile-time"
=======
>>>>>>> aac4a5ba12b63e1cf35eb212c2f5218a6cba1e70
						}
					},
					"fv_kernel": {
						"type": "object",
						"scope": "compile-time",
						"required" : [ "terms" ],
						"additionalProperties" : "false",
						"properties": {
							"optimisations": {
								"type": "array",
								"title": "Optimization flags",
								"items": { 
									"enum" : [ "generic", "optimised", "usestack" ]
								}
							}, 
							"terms": {
								"type": "array", 
								"title": "PDE terms to generate code for",
								"items": { 
									"oneOf" : [ 
										{ "enum" : ["flux", "source", "ncp" ] },
										{ "type" : "object", "required" : ["pointsources"], "additionalProperties": false, "properties" : { "pointsources" : { "type" : "number" } } }
									]
								}
							},
							"language": {
								"type": "string", 
								"title": "The walking dead",
								"enum": ["C","Fortran"],
								"default": "C"
							}, 
							"type": {
								"type": "string", 
								"title": "Type of solver", 
								"enum": ["musclhancock","godunov"],
								"default": "godunov"
							}
						}
					}, 
					"variables": {
						"scope": "compile-time",
						"used-by": "toolkit",
						"$comment": "Variables must be ordered, hence an array. Note that {'rho':1,'vel':3,'E':1} is hardly scheme-able",
						"properties" : { "$ref" : "#/definitions/variables" }
					},
					"material_parameters": {
						"scope": "compile-time",
						"used-by": "toolkit",
						"$comment": "Material parameters must be ordered, hence an array. Note that {'rho':1,'vel':3,'E':1} is hardly scheme-able",
						"properties" : { "$ref" : "#/definitions/variables" }
					}, 
					"global_observables": {
						"scope": "compile-time",
						"used-by": "toolkit",
						"$comment": "global observables must be ordered, hence an array. Note that {'rho':1,'vel':3,'E':1} is hardly scheme-able",
						"properties" : { "$ref" : "#/definitions/variables" }
					}, 
					"maximum_mesh_size": {
						"type": "number", 
						"title": "Minimum size of finest cell in the overall grid",
						"scope": "run-time"
					},
					"maximum_mesh_depth": {
						"type": "integer", 
						"title": "Maximum number of adaptive refinement levels.",
						"scope": "run-time"
					}, 
					"order": {
							"type": "integer", 
							"title": "Approximation order of the scheme",
							"scope": "compile-time"
					}, 
					"patch_size": {
						"type": "integer", 
						"title": "Number of subcells per coordinate direction (no ghost ",
						"scope": "compile-time"
					},
					"halo_cells" : {
						"type": "integer", 
						"title": "Number of halo cells around finest grid cell which requests further refinement or wants to be kept.",
						"scope": "run-time"
					},
					"regularised_fine_grid_levels" : {
						"type": "integer", 
						"title": "Number of quantities considered by the discrete maximum principle (only Limiting-ADER-DG solver)",
						"scope": "run-time"
					},
					"dmp_observables": {
						"id"  : "dmp_observables",
						"type": "integer", 
						"title": "Number of quantities considered by the discrete maximum principle (only Limiting-ADER-DG solver)",
						"scope": "compile-time"
					},
					"dmp_relaxation_parameter": {
						"id"  : "dmp_relaxation_parameter",
						"type": "number", 
						"title": "The difference scaling used by the discrete maximum principle (only Limiting-ADER-DG solver)",
						"scope": "run-time",
						"default" : 1e-3
					},
					"dmp_difference_scaling": {
						"id"  : "dmp_difference_scaling",
						"type": "number", 
						"title": "The discrete maximum principle relaxation parameter (only Limiting-ADER-DG solver)",
						"scope": "run-time",
						"default" : 1e-4
					},
					"helper_layers": {
						"type": "integer", 
						"title": "Number of limiter helper layers (only Limiting-ADER-DG solver)",
						"scope": "run-time",
						"default" : 1
					},
					"steps_till_cured": {
						"type": "integer", 
						"title": "Number of iterations to wait until a cured cell loses the 'troubled' flag (only Limiting-ADER-DG solver)",
						"scope": "run-time",
						"default" : 0
					},
					"time_stepping": {
						"type": "string", 
						"default": "global",
						"enum": ["global","local","whatever"],
						"scope": "run-time"
					},
					"plotters": {
						"$comment": "Each solver has an ordered list of plotters assigned. The order and name of plotters is a compile time constant",
						"type": "array",
						"required": [ "name", "type", "output", "variables", "repeat" ],
						"items": {
							"type": "object", 
							"properties": {
								"name": {
									"type": "string", 
									"title": "Name of the plotter, will be generated as filename and C++ type name (compile-time constant)",
									"pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
									"scope": "compile-time",
									"used-by": "toolkit"
								},
								"type": {
									"title": "Which plotter device to adopt", 
									"$comment": "Also refered to as identifier",
									"scope": "run-time",
									"anyOf": [
										{
											"type": "string",
											"$comment": "Something like vtk::Cartesian::vertices::ascii"
										},
										{
											"type": "array",
											"$comment": "All keywords as list",
											"items": { "type": "string" }
										}
									],
									"examples": [
										"vtk::Cartesian::vertices::ascii",
										["vtk","Cartesian","vertices","ascii"]
									]
								},
								"output": {
									"type": "string", 
									"title": "(Base) filename where to output results to", 
									"scope": "run-time",
									"examples": [
										"./vtk-output/conserved",
										"data/someFields"
									]
								}, 
								"variables": {
									"type": "integer", 
									"title": "How much variables the plotter writes (Runtime quantitiy)",
									"$comment": "Named variables could be quite handy here, too",
									"minimum": 0,
									"exclusiveMinimum": true,
									"scope": "run-time"
									
								}, 
								"repeat": {
									"type": "number", 
									"title": "Request periodic plotting repeated every t, in coordinate time",
									"minimum": 0,
									"exclusiveMinimum": true,
									"examples": [
										0.0010513,
										100000.0
									]
								}, 
								"time": {
									"type": "number", 
									"title": "Time at which periodic plotting should start, in coordinate time", 
									"default": 0
								},
								"select": {
									"$comment": "Spatial dimensional slicing, invented by Tobias for seismic probes",
									"type": "object",
									"examples": [
										{ "x": 0, "y": 1 }
									]
								},
								"parameters": {
									"type": "object",
									"title": "Free runtime parameters for postprocessing-codes",
									"scope": "run-time"
<<<<<<< HEAD
								},
=======
								}
>>>>>>> aac4a5ba12b63e1cf35eb212c2f5218a6cba1e70
							}
						}
					}, 
					"parameters": {
						"type": "object",
						"title": "Free runtime parameters, however compile-time in terms of parameters support to be compiled in by toolkit",
						"scope": "compile-time"
					}
				}
			}
		}
	}
}
